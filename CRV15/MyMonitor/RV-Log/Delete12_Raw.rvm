package rvm;

import rvm.LogEntryExtractor;
import rvm.LogReader;

import java.lang.Comparable;
import java.lang.Override;
import java.util.ArrayList;
import java.util.HashSet;

Delete12_Raw(String data){

//cache the index of monitors to achieve indexing by value (temporal fix)
protected static HashMap<String,String> indexMap = new HashMap<>();
private State curState = State.Start;
private long ts;
private String user;
private boolean e4Holds;
private boolean e7Holds;

private static enum State {
    //C1 is the first condition on the r.h.s of the implication
    //C2_1, C2_2 refer the two sub-formulas inside the second condition
    //The order of these states should NOT be changed.
    Start, Check, Unsafe, Safe,
    C1Fail, C2_1Pass, C2_2Pass,
    C2Fail, C1Fail_AND_C2_1Pass, C1Fail_AND_C2_2Pass
}

/**
 * Base on the values of the events' arguments, the monitor's state may be updated to different
 * new states. To represent this process using fsm, we can first analyze the event arguments,
 * then we can summarize a list of more accurate events, with which we can build the full
 * transition functions.
 * <p/>
 * Different accurate events are described here:
 * E1: the event that makes monitor enter State.Check state.
 * E2: the event that makes C1 hold.
 * E3: the event that makes C1 NOT hold.
 * E4: the event that makes C2_1 hold.
 * E5: the event that makes C2_1 NOT hold.
 * E6: the event that makes C2_2 hold.
 * E7: the event that makes C2_2 NOT hold.
 * The int arrays with name 'Ei' below are transition functions.
 * For example, array E1 is in fact a function that maps its index (input state) to value
 * (output state resulting from updating input state via event E1).
 */
private static State[] E1 = new State[]{State.Check,State.Check,State.Unsafe,State.Safe,State.C1Fail,
        State.C2_1Pass,State.C2_2Pass,State.C2Fail,
        State.C1Fail_AND_C2_1Pass,State.C1Fail_AND_C2_2Pass};

private static State[] E2 = new State[]{State.Start,State.Safe,State.Unsafe,State.Safe,State.Safe,
        State.Safe,State.Safe,State.Safe,State.Safe,State.Safe};

private static State[] E3 = new State[]{State.Start,State.C1Fail,State.Unsafe,State.Safe,
        State.C1Fail,State.C1Fail_AND_C2_1Pass,
        State.C1Fail_AND_C2_2Pass,State.Unsafe,State.C1Fail_AND_C2_1Pass,State.C1Fail_AND_C2_2Pass};

private static State[] E4 = new State[]{State.Start,State.C2_1Pass,State.Unsafe,State.Safe,
        State.C1Fail_AND_C2_1Pass,State.C2_1Pass,
        State.Safe,State.C2Fail,State.C1Fail_AND_C2_1Pass,State.Safe};

private static State[] E5 = new State[]{State.Start,State.C2Fail,State.Unsafe,State.Safe,
        State.Unsafe,State.C2Fail,State.C2Fail,
        State.C2Fail,State.Unsafe,State.Unsafe};

private static State[] E6 = new State[]{State.Start,State.C2_2Pass,State.Unsafe,State.Safe,
        State.C1Fail_AND_C2_2Pass,State.Safe,
        State.C2_2Pass,State.C2Fail,State.Safe,State.C1Fail_AND_C2_2Pass};

private static State[] E7 = new State[]{State.Start,State.C2Fail,State.Unsafe,State.Safe,
        State.Unsafe,State.C2Fail,State.C2Fail,
        State.C2Fail,State.Unsafe,State.Unsafe};



 private void resetState() {
    this.curState = State.Start;
 }


/**
 * This data structure represents a record that describes which user deletes what data at what time.
 */
public static class DeleteRecord implements Comparable<DeleteRecord> {
    public final long ts;
    public final String user;
    public final String deleteData;

    public DeleteRecord(long ts, String user, String deleteData) {
        this.ts = ts;
        this.user = user;
        this.deleteData = deleteData;
    }

    public boolean equals(DeleteRecord other) {
        if (other == null)
            return false;
        if (this.ts != other.ts)
            return false;

        return (this.user.equals(other.user) &&
                this.deleteData.equals(other.deleteData));
    }

    public String print() {
        return "@" + ts + " delete (" + user + ", db1, " + deleteData + ")\n";
    }

    @Override
    public int compareTo(DeleteRecord other) {
        return (int) (this.ts - other.ts);
    }
}


    public static void printAllViolations() {
        ArrayList<DeleteRecord> listOfViolations = new ArrayList<>();

        for (String ref :  indexMap.keySet()) {
            Delete12_RawRawMonitor monitor = Delete12_RawRuntimeMonitor.Delete12_Raw_data_Map
                                                .getNodeWithStrongRef(ref);
            if (monitor != null && monitor.curState != State.Start) {
                listOfViolations.add(new DeleteRecord(monitor.ts, monitor.user, ref));
            }
        }

        listOfViolations.sort(new Comparator<DeleteRecord>() {
            @Override
            public int compare(DeleteRecord o1, DeleteRecord o2) {
                return (int) (o1.ts - o2.ts);
            }
        });

        for (int i = 0; i < listOfViolations.size(); i++) {
            System.out.println(listOfViolations.get(i).print());
        }
    }

    event delete(String user,String db,String p,String data) {
        if (data.equals("unknown")) //Unknown data does not affect the state of monitor at all
            return true;


        if (db.equals("db1")) {
            //E1 occurs
            this.curState = E1[this.curState.ordinal()];

            this.ts = LogEntryExtractor.TimeStamp;
            this.user = user;

        } else if (db.equals("db2")) {
            //E2 occurs
            this.curState = E2[this.curState.ordinal()];
        } else {
        }

    }


    event insert(String user,String db,String p,String data) {
        if (data.equals("unknown"))
            return true;

        if (db.equals("db1")) {
            //E4 occurs, cond 2-1 begins to hold
            this.curState = E4[this.curState.ordinal()];
            this.e4Holds = true;
        } else if (db.equals("db2")) {
            //E7 occurs, cond 2-2 does not hold now
            this.curState = E7[this.curState.ordinal()];
            this.e7Holds = true;
        }
    }

raw:
        if (this.e4Holds) {
            this.curState = E4[this.curState.ordinal()];
        }

        if (this.e7Holds) {
            this.curState = E7[this.curState.ordinal()];
        }
        // record the violation entry
        if (this.curState == State.Unsafe)
            System.out.println("@" + LogEntryExtractor.TimeStamp + " delete (" + user + ", db1, " +
            data + ")");

        if (this.curState == State.Unsafe || this.curState == State.Safe){
            this.resetState();
        }
}


