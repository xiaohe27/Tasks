I did some experiments on the most complex MFOTL provided in ETH's papers.
N.B. I remove the inaccuracy-tolerance part of the original formula to make the experiment easier to conduct.

I identified its most time consuming sub-formula, which is in the form:

 [*][0, 30h)[][0,30h)!exists u'. insert(u', db2, data)

It would take Monpoly extremely long time (3 hours+ on my machine) to analyze the 308 MB log file 
if the monitored radius is 30 hours (represented by 30h in the formula);

Monpoly's monitoring time would reduce to 45 seconds if I shrank the radius to 60 seconds.

My hypothesis for this difference of execution times is that in wider time interval, more states need to be 
kept track of (in Monpoly) in order to assert the formula. 
================================================================

I came up with a raw specification to express the same property used by Monpoly and get at least 4 times faster.
9s for the 30 hours radius (RV-Log), versus 45s for the 60-seconds radius.

In this hand-crafted rvm-spec, I took advantage of the decentralized paradigm of rv-monitor when constructing the data structures 
for holding states. Instead of a cumbersome central huge HashMap which is both slow to update and retrieve, I simply added some 
extra fields to the local monitor so that the assertion of the property can be performed independently by only querying local information
at each local monitor.

Each time when an event that deletes some data "d" from db1 was 
observed, we can create a reminder inside the monitor instance
corresponds to "d", which records the expected deadline. Some 
sub-formula like [*][0, 30h)!exists u'. insert(u', db2, data)
can be checked at the reminder's creation time, so that
the truth values for several sub-formulas can be finalized at the beginning.

Each time when an event that inserts some known data d
into db2 was observed, the sub-formula 
[][0,30h)!exists u'. insert(u', db2, data)
will be falsified from all the reminders that haven't been expired.

Each time a new event was observed, the global time will be updated and
every expired reminder will be checked; If its associated
property is evaluated to false (by combining all its sub-formulae),
then a violation was reported.  

Finally, when all the log entries have been read, an additional 
check was performed to ensure the bounded-liveness property is verified correctly. 
