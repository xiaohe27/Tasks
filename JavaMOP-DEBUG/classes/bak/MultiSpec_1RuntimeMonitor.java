package mop;
import java.io.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;
import java.util.*;
import java.lang.reflect.*;
import java.lang.*;
import java.util.concurrent.*;
import org.aspectj.lang.Signature;
import java.nio.channels.*;
import java.net.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.*;
import javax.swing.*;
import java.awt.EventQueue;
import java.security.*;
import java.util.concurrent.locks.*;
import java.lang.ref.*;
import com.runtimeverification.rvmonitor.java.rt.*;
import com.runtimeverification.rvmonitor.java.rt.ref.*;
import com.runtimeverification.rvmonitor.java.rt.table.*;
import com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractIndexingTree;
import com.runtimeverification.rvmonitor.java.rt.tablebase.SetEventDelegator;
import com.runtimeverification.rvmonitor.java.rt.tablebase.TableAdopter.Tuple2;
import com.runtimeverification.rvmonitor.java.rt.tablebase.TableAdopter.Tuple3;
import com.runtimeverification.rvmonitor.java.rt.tablebase.IDisableHolder;
import com.runtimeverification.rvmonitor.java.rt.tablebase.IMonitor;
import com.runtimeverification.rvmonitor.java.rt.tablebase.DisableHolder;
import com.runtimeverification.rvmonitor.java.rt.tablebase.TerminatedMonitorCleaner;
import java.util.concurrent.atomic.AtomicInteger;

final class Appendable_ThreadSafeMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Appendable_ThreadSafeMonitor> {

	Appendable_ThreadSafeMonitor_Set(){
		this.size = 0;
		this.elements = new Appendable_ThreadSafeMonitor[4];
	}
	final void event_safe_append(Appendable a, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Appendable_ThreadSafeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Appendable_ThreadSafeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_safe_append(a, t);
				if(monitorfinalMonitor.Appendable_ThreadSafeMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unsafe_append(Appendable a, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Appendable_ThreadSafeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Appendable_ThreadSafeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unsafe_append(a, t);
				if(monitorfinalMonitor.Appendable_ThreadSafeMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ArrayDeque_NonNullRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ArrayDeque_NonNullRawMonitor> {

	ArrayDeque_NonNullRawMonitor_Set(){
		this.size = 0;
		this.elements = new ArrayDeque_NonNullRawMonitor[4];
	}
	final void event_insertnull(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ArrayDeque_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ArrayDeque_UnsafeIteratorMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ArrayDeque_UnsafeIteratorMonitor> {

	ArrayDeque_UnsafeIteratorMonitor_Set(){
		this.size = 0;
		this.elements = new ArrayDeque_UnsafeIteratorMonitor[4];
	}
	final void event_create(ArrayDeque q, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ArrayDeque_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ArrayDeque_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(q, i);
				if(monitorfinalMonitor.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(ArrayDeque q) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ArrayDeque_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ArrayDeque_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(q);
				if(monitorfinalMonitor.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ArrayDeque_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ArrayDeque_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Arrays_ComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Arrays_ComparableRawMonitor> {

	Arrays_ComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new Arrays_ComparableRawMonitor[4];
	}
	final void event_invalid_sort(Object[] arr) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_sort(arr);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Arrays_DeepHashCodeRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Arrays_DeepHashCodeRawMonitor> {

	Arrays_DeepHashCodeRawMonitor_Set(){
		this.size = 0;
		this.elements = new Arrays_DeepHashCodeRawMonitor[4];
	}
	final void event_invalid_deephashcode(Object[] arr) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_DeepHashCodeRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_deephashcode(arr);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Arrays_MutuallyComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Arrays_MutuallyComparableRawMonitor> {

	Arrays_MutuallyComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new Arrays_MutuallyComparableRawMonitor[4];
	}
	final void event_invalid_sort(Object[] arr, Comparator comp) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_MutuallyComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_sort(arr, comp);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Arrays_SortBeforeBinarySearchMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Arrays_SortBeforeBinarySearchMonitor> {

	Arrays_SortBeforeBinarySearchMonitor_Set(){
		this.size = 0;
		this.elements = new Arrays_SortBeforeBinarySearchMonitor[4];
	}
	final void event_sort1(Object[] arr) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sort1(arr);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_sort1(Object[] arr, int from, int to) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sort1(arr, from, to);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_sort2(Object[] arr, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sort2(arr, comp2);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_sort2(Object[] arr, int from, int to, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sort2(arr, from, to, comp2);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(Object[] arr) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(arr);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bsearch1(Object[] arr) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bsearch1(arr);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bsearch1(Object[] arr, int from, int to) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bsearch1(arr, from, to);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bsearch2(Object[] arr, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bsearch2(arr, comp2);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bsearch2(Object[] arr, int from, int to, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Arrays_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Arrays_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bsearch2(arr, from, to, comp2);
				if(monitorfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Authenticator_OverrideGetPasswordAuthenticationRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Authenticator_OverrideGetPasswordAuthenticationRawMonitor> {

	Authenticator_OverrideGetPasswordAuthenticationRawMonitor_Set(){
		this.size = 0;
		this.elements = new Authenticator_OverrideGetPasswordAuthenticationRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Authenticator_OverrideGetPasswordAuthenticationRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Boolean_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Boolean_StaticFactoryRawMonitor> {

	Boolean_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Boolean_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Boolean_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(b);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class BufferedInputStream_SynchronizedFillMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<BufferedInputStream_SynchronizedFillMonitor> {

	BufferedInputStream_SynchronizedFillMonitor_Set(){
		this.size = 0;
		this.elements = new BufferedInputStream_SynchronizedFillMonitor[4];
	}
	final void event_fill(BufferedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			BufferedInputStream_SynchronizedFillMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final BufferedInputStream_SynchronizedFillMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_fill(i);
				if(monitorfinalMonitor.BufferedInputStream_SynchronizedFillMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ByteArrayOutputStream_FlushBeforeRetrieveMonitor> {

	ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set(){
		this.size = 0;
		this.elements = new ByteArrayOutputStream_FlushBeforeRetrieveMonitor[4];
	}
	final void event_outputstreaminit(ByteArrayOutputStream b, OutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_outputstreaminit(b, o);
				if(monitorfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_write(OutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_write(o);
				if(monitorfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_flush(OutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_flush(o);
				if(monitorfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(OutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(o);
				if(monitorfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_tobytearray(ByteArrayOutputStream b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_tobytearray(b);
				if(monitorfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_tostring(ByteArrayOutputStream b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ByteArrayOutputStream_FlushBeforeRetrieveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_tostring(b);
				if(monitorfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Byte_BadDecodeArgRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Byte_BadDecodeArgRawMonitor> {

	Byte_BadDecodeArgRawMonitor_Set(){
		this.size = 0;
		this.elements = new Byte_BadDecodeArgRawMonitor[4];
	}
	final void event_decode(Byte b, String nm) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Byte_BadDecodeArgRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_decode(b, nm);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Byte_BadParsingArgsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Byte_BadParsingArgsRawMonitor> {

	Byte_BadParsingArgsRawMonitor_Set(){
		this.size = 0;
		this.elements = new Byte_BadParsingArgsRawMonitor[4];
	}
	final void event_bad_arg(String s, int radix) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Byte_BadParsingArgsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_arg(s, radix);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_arg2(String s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Byte_BadParsingArgsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_arg2(s);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Byte_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Byte_StaticFactoryRawMonitor> {

	Byte_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Byte_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Byte b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Byte_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(b);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class CharSequence_NotInMapRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<CharSequence_NotInMapRawMonitor> {

	CharSequence_NotInMapRawMonitor_Set(){
		this.size = 0;
		this.elements = new CharSequence_NotInMapRawMonitor[4];
	}
	final void event_map_put(Map map) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			CharSequence_NotInMapRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_map_put(map);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_map_putall(Map map, Map m) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			CharSequence_NotInMapRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_map_putall(map, m);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class CharSequence_NotInSetRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<CharSequence_NotInSetRawMonitor> {

	CharSequence_NotInSetRawMonitor_Set(){
		this.size = 0;
		this.elements = new CharSequence_NotInSetRawMonitor[4];
	}
	final void event_set_add() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			CharSequence_NotInSetRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set_add();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set_addall(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			CharSequence_NotInSetRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set_addall(c);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class CharSequence_UndefinedHashCodeRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<CharSequence_UndefinedHashCodeRawMonitor> {

	CharSequence_UndefinedHashCodeRawMonitor_Set(){
		this.size = 0;
		this.elements = new CharSequence_UndefinedHashCodeRawMonitor[4];
	}
	final void event_equals() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			CharSequence_UndefinedHashCodeRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_equals();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_hashCode() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			CharSequence_UndefinedHashCodeRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_hashCode();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Character_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Character_StaticFactoryRawMonitor> {

	Character_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Character_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Character b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Character_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(b);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Character_ValidateCharRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Character_ValidateCharRawMonitor> {

	Character_ValidateCharRawMonitor_Set(){
		this.size = 0;
		this.elements = new Character_ValidateCharRawMonitor[4];
	}
	final void event_charCount(int codePoint) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Character_ValidateCharRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_charCount(codePoint);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_toCodePoint(char high, char low) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Character_ValidateCharRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_toCodePoint(high, low);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ClassLoader_UnsafeClassDefinitionRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ClassLoader_UnsafeClassDefinitionRawMonitor> {

	ClassLoader_UnsafeClassDefinitionRawMonitor_Set(){
		this.size = 0;
		this.elements = new ClassLoader_UnsafeClassDefinitionRawMonitor[4];
	}
	final void event_defineClass(String name) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ClassLoader_UnsafeClassDefinitionRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_defineClass(name);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Closeable_MeaninglessCloseRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Closeable_MeaninglessCloseRawMonitor> {

	Closeable_MeaninglessCloseRawMonitor_Set(){
		this.size = 0;
		this.elements = new Closeable_MeaninglessCloseRawMonitor[4];
	}
	final void event_close() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Closeable_MeaninglessCloseRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_close();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Closeable_MultipleCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Closeable_MultipleCloseMonitor> {

	Closeable_MultipleCloseMonitor_Set(){
		this.size = 0;
		this.elements = new Closeable_MultipleCloseMonitor[4];
	}
	final void event_close(Closeable c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Closeable_MultipleCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Closeable_MultipleCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(c);
				if(monitorfinalMonitor.Closeable_MultipleCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collection_HashCodeRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collection_HashCodeRawMonitor> {

	Collection_HashCodeRawMonitor_Set(){
		this.size = 0;
		this.elements = new Collection_HashCodeRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_HashCodeRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collection_StandardConstructorsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collection_StandardConstructorsRawMonitor> {

	Collection_StandardConstructorsRawMonitor_Set(){
		this.size = 0;
		this.elements = new Collection_StandardConstructorsRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_StandardConstructorsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collection_UnsafeIteratorMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collection_UnsafeIteratorMonitor> {

	Collection_UnsafeIteratorMonitor_Set(){
		this.size = 0;
		this.elements = new Collection_UnsafeIteratorMonitor[4];
	}
	final void event_create(Collection c, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collection_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(c, i);
				if(monitorfinalMonitor.Collection_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collection_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(c);
				if(monitorfinalMonitor.Collection_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collection_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.Collection_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collection_UnsynchronizedAddAllMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collection_UnsynchronizedAddAllMonitor> {

	Collection_UnsynchronizedAddAllMonitor_Set(){
		this.size = 0;
		this.elements = new Collection_UnsynchronizedAddAllMonitor[4];
	}
	final void event_enter(Collection t, Collection s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_UnsynchronizedAddAllMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collection_UnsynchronizedAddAllMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_enter(t, s);
				if(monitorfinalMonitor.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(Collection s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_UnsynchronizedAddAllMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collection_UnsynchronizedAddAllMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(s);
				if(monitorfinalMonitor.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_leave(Collection t, Collection s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collection_UnsynchronizedAddAllMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collection_UnsynchronizedAddAllMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_leave(t, s);
				if(monitorfinalMonitor.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_ComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_ComparableRawMonitor> {

	Collections_ComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_ComparableRawMonitor[4];
	}
	final void event_invalid_sort(List list, Comparator comp) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_sort(list, comp);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_invalid_minmax(Collection col, Comparator comp) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_minmax(col, comp);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_CopySizeRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_CopySizeRawMonitor> {

	Collections_CopySizeRawMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_CopySizeRawMonitor[4];
	}
	final void event_bad_copy(List dest, List src) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_CopySizeRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_copy(dest, src);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_ImplementComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_ImplementComparableRawMonitor> {

	Collections_ImplementComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_ImplementComparableRawMonitor[4];
	}
	final void event_invalid_sort(List list) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_ImplementComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_sort(list);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_invalid_minmax(Collection col) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_ImplementComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_invalid_minmax(col);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_NewSetFromMapMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_NewSetFromMapMonitor> {

	Collections_NewSetFromMapMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_NewSetFromMapMonitor[4];
	}
	final void event_create(Map map) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_NewSetFromMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_NewSetFromMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(map);
				if(monitorfinalMonitor.Collections_NewSetFromMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_create(Map map) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_NewSetFromMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_NewSetFromMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bad_create(map);
				if(monitorfinalMonitor.Collections_NewSetFromMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_access(Map map) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_NewSetFromMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_NewSetFromMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_access(map);
				if(monitorfinalMonitor.Collections_NewSetFromMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_SortBeforeBinarySearchMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_SortBeforeBinarySearchMonitor> {

	Collections_SortBeforeBinarySearchMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_SortBeforeBinarySearchMonitor[4];
	}
	final void event_sort1(List list) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sort1(list);
				if(monitorfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_sort2(List list, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sort2(list, comp2);
				if(monitorfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(List list) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(list);
				if(monitorfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bsearch1(List list) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bsearch1(list);
				if(monitorfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bsearch2(List list, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bsearch2(list, comp2);
				if(monitorfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_bsearch2(List list, Comparator comp2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SortBeforeBinarySearchMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SortBeforeBinarySearchMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bad_bsearch2(list, comp2);
				if(monitorfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_SynchronizedCollectionMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_SynchronizedCollectionMonitor> {

	Collections_SynchronizedCollectionMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_SynchronizedCollectionMonitor[4];
	}
	final void event_sync(Collection col) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedCollectionMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedCollectionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sync(col);
				if(monitorfinalMonitor.Collections_SynchronizedCollectionMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_syncCreateIter(Collection col, Iterator iter) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedCollectionMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedCollectionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_syncCreateIter(col, iter);
				if(monitorfinalMonitor.Collections_SynchronizedCollectionMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_asyncCreateIter(Collection col, Iterator iter) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedCollectionMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedCollectionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_asyncCreateIter(col, iter);
				if(monitorfinalMonitor.Collections_SynchronizedCollectionMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_accessIter(Iterator iter) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedCollectionMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedCollectionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_accessIter(iter);
				if(monitorfinalMonitor.Collections_SynchronizedCollectionMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_SynchronizedMapMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_SynchronizedMapMonitor> {

	Collections_SynchronizedMapMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_SynchronizedMapMonitor[4];
	}
	final void event_sync(Map syncMap) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sync(syncMap);
				if(monitorfinalMonitor.Collections_SynchronizedMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_createSet(Map syncMap, Collection col) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_createSet(syncMap, col);
				if(monitorfinalMonitor.Collections_SynchronizedMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_syncCreateIter(Collection col, Iterator iter) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_syncCreateIter(col, iter);
				if(monitorfinalMonitor.Collections_SynchronizedMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_asyncCreateIter(Collection col, Iterator iter) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_asyncCreateIter(col, iter);
				if(monitorfinalMonitor.Collections_SynchronizedMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_accessIter(Iterator iter) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_SynchronizedMapMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Collections_SynchronizedMapMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_accessIter(iter);
				if(monitorfinalMonitor.Collections_SynchronizedMapMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Collections_UnnecessaryNewSetFromMapRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Collections_UnnecessaryNewSetFromMapRawMonitor> {

	Collections_UnnecessaryNewSetFromMapRawMonitor_Set(){
		this.size = 0;
		this.elements = new Collections_UnnecessaryNewSetFromMapRawMonitor[4];
	}
	final void event_unnecessary() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Collections_UnnecessaryNewSetFromMapRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_unnecessary();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Comparable_CompareToNullRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Comparable_CompareToNullRawMonitor> {

	Comparable_CompareToNullRawMonitor_Set(){
		this.size = 0;
		this.elements = new Comparable_CompareToNullRawMonitor[4];
	}
	final void event_nullcompare(Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Comparable_CompareToNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_nullcompare(o);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Comparable_CompareToNullExceptionRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Comparable_CompareToNullExceptionRawMonitor> {

	Comparable_CompareToNullExceptionRawMonitor_Set(){
		this.size = 0;
		this.elements = new Comparable_CompareToNullExceptionRawMonitor[4];
	}
	final void event_badexception(Object o, Exception e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Comparable_CompareToNullExceptionRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_badexception(o, e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_badcompare(Object o, int i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Comparable_CompareToNullExceptionRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_badcompare(o, i);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Console_CloseReaderMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Console_CloseReaderMonitor> {

	Console_CloseReaderMonitor_Set(){
		this.size = 0;
		this.elements = new Console_CloseReaderMonitor[4];
	}
	final void event_getreader(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_CloseReaderMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_CloseReaderMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getreader(r);
				if(monitorfinalMonitor.Console_CloseReaderMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_CloseReaderMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_CloseReaderMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(r);
				if(monitorfinalMonitor.Console_CloseReaderMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Console_CloseWriterMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Console_CloseWriterMonitor> {

	Console_CloseWriterMonitor_Set(){
		this.size = 0;
		this.elements = new Console_CloseWriterMonitor[4];
	}
	final void event_getwriter(Writer w) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_CloseWriterMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_CloseWriterMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getwriter(w);
				if(monitorfinalMonitor.Console_CloseWriterMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Writer w) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_CloseWriterMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_CloseWriterMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(w);
				if(monitorfinalMonitor.Console_CloseWriterMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Console_FillZeroPasswordMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Console_FillZeroPasswordMonitor> {

	Console_FillZeroPasswordMonitor_Set(){
		this.size = 0;
		this.elements = new Console_FillZeroPasswordMonitor[4];
	}
	final void event_read(Object pwd) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_FillZeroPasswordMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_FillZeroPasswordMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read(pwd);
				if(monitorfinalMonitor.Console_FillZeroPasswordMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_obliterate(Object pwd) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_FillZeroPasswordMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_FillZeroPasswordMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_obliterate(pwd);
				if(monitorfinalMonitor.Console_FillZeroPasswordMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endProg() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Console_FillZeroPasswordMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Console_FillZeroPasswordMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endProg();
				if(monitorfinalMonitor.Console_FillZeroPasswordMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ContentHandler_GetContentRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ContentHandler_GetContentRawMonitor> {

	ContentHandler_GetContentRawMonitor_Set(){
		this.size = 0;
		this.elements = new ContentHandler_GetContentRawMonitor[4];
	}
	final void event_get_content() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ContentHandler_GetContentRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_get_content();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class DatagramPacket_LengthRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<DatagramPacket_LengthRawMonitor> {

	DatagramPacket_LengthRawMonitor_Set(){
		this.size = 0;
		this.elements = new DatagramPacket_LengthRawMonitor[4];
	}
	final void event_construct_len(byte[] buffer, int length) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			DatagramPacket_LengthRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct_len(buffer, length);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_construct_offlen(byte[] buffer, int offset, int length) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			DatagramPacket_LengthRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct_offlen(buffer, offset, length);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class DatagramPacket_SetLengthRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<DatagramPacket_SetLengthRawMonitor> {

	DatagramPacket_SetLengthRawMonitor_Set(){
		this.size = 0;
		this.elements = new DatagramPacket_SetLengthRawMonitor[4];
	}
	final void event_setlength(DatagramPacket packet, int length) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			DatagramPacket_SetLengthRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_setlength(packet, length);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class DatagramSocket_PortRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<DatagramSocket_PortRawMonitor> {

	DatagramSocket_PortRawMonitor_Set(){
		this.size = 0;
		this.elements = new DatagramSocket_PortRawMonitor[4];
	}
	final void event_construct_port(int port) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			DatagramSocket_PortRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct_port(port);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class DatagramSocket_SoTimeoutRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<DatagramSocket_SoTimeoutRawMonitor> {

	DatagramSocket_SoTimeoutRawMonitor_Set(){
		this.size = 0;
		this.elements = new DatagramSocket_SoTimeoutRawMonitor[4];
	}
	final void event_settimeout(int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			DatagramSocket_SoTimeoutRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_settimeout(timeout);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class DatagramSocket_TrafficClassRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<DatagramSocket_TrafficClassRawMonitor> {

	DatagramSocket_TrafficClassRawMonitor_Set(){
		this.size = 0;
		this.elements = new DatagramSocket_TrafficClassRawMonitor[4];
	}
	final void event_settc(DatagramSocket socket, int tc) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			DatagramSocket_TrafficClassRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_settc(socket, tc);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Deque_OfferRatherThanAddMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Deque_OfferRatherThanAddMonitor> {

	Deque_OfferRatherThanAddMonitor_Set(){
		this.size = 0;
		this.elements = new Deque_OfferRatherThanAddMonitor[4];
	}
	final void event_create(Deque q) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Deque_OfferRatherThanAddMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Deque_OfferRatherThanAddMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(q);
				if(monitorfinalMonitor.Deque_OfferRatherThanAddMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_add(Deque q) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Deque_OfferRatherThanAddMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Deque_OfferRatherThanAddMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_add(q);
				if(monitorfinalMonitor.Deque_OfferRatherThanAddMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Dictionary_NullKeyOrValueRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Dictionary_NullKeyOrValueRawMonitor> {

	Dictionary_NullKeyOrValueRawMonitor_Set(){
		this.size = 0;
		this.elements = new Dictionary_NullKeyOrValueRawMonitor[4];
	}
	final void event_putnull(Dictionary d, Object key, Object value) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Dictionary_NullKeyOrValueRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_putnull(d, key, value);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Dictionary_ObsoleteMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Dictionary_ObsoleteMonitor> {

	Dictionary_ObsoleteMonitor_Set(){
		this.size = 0;
		this.elements = new Dictionary_ObsoleteMonitor[4];
	}
	final void event_use(Dictionary d) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Dictionary_ObsoleteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Dictionary_ObsoleteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_use(d);
				if(monitorfinalMonitor.Dictionary_ObsoleteMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Double_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Double_StaticFactoryRawMonitor> {

	Double_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Double_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Double d) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Double_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(d);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class EnumMap_NonNullRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<EnumMap_NonNullRawMonitor> {

	EnumMap_NonNullRawMonitor_Set(){
		this.size = 0;
		this.elements = new EnumMap_NonNullRawMonitor[4];
	}
	final void event_insertnull(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			EnumMap_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_insertnull(Map m) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			EnumMap_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(m);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class EnumSet_NonNullRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<EnumSet_NonNullRawMonitor> {

	EnumSet_NonNullRawMonitor_Set(){
		this.size = 0;
		this.elements = new EnumSet_NonNullRawMonitor[4];
	}
	final void event_insertnull(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			EnumSet_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_insertnull(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			EnumSet_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(c);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Enum_NoExtraWhiteSpaceRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Enum_NoExtraWhiteSpaceRawMonitor> {

	Enum_NoExtraWhiteSpaceRawMonitor_Set(){
		this.size = 0;
		this.elements = new Enum_NoExtraWhiteSpaceRawMonitor[4];
	}
	final void event_valueOf(Class c, String name) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Enum_NoExtraWhiteSpaceRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_valueOf(c, name);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Enum_NoOrdinalRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Enum_NoOrdinalRawMonitor> {

	Enum_NoOrdinalRawMonitor_Set(){
		this.size = 0;
		this.elements = new Enum_NoOrdinalRawMonitor[4];
	}
	final void event_ordinal() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Enum_NoOrdinalRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_ordinal();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Enum_UserFriendlyNameRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Enum_UserFriendlyNameRawMonitor> {

	Enum_UserFriendlyNameRawMonitor_Set(){
		this.size = 0;
		this.elements = new Enum_UserFriendlyNameRawMonitor[4];
	}
	final void event_name() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Enum_UserFriendlyNameRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_name();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Enumeration_ObsoleteMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Enumeration_ObsoleteMonitor> {

	Enumeration_ObsoleteMonitor_Set(){
		this.size = 0;
		this.elements = new Enumeration_ObsoleteMonitor[4];
	}
	final void event_use(Enumeration e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Enumeration_ObsoleteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Enumeration_ObsoleteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_use(e);
				if(monitorfinalMonitor.Enumeration_ObsoleteMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class File_DeleteTempFileMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<File_DeleteTempFileMonitor> {

	File_DeleteTempFileMonitor_Set(){
		this.size = 0;
		this.elements = new File_DeleteTempFileMonitor[4];
	}
	final void event_create(File f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			File_DeleteTempFileMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final File_DeleteTempFileMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(f);
				if(monitorfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_explicit(File f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			File_DeleteTempFileMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final File_DeleteTempFileMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_explicit(f);
				if(monitorfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_implicit(File f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			File_DeleteTempFileMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final File_DeleteTempFileMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_implicit(f);
				if(monitorfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endProg() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			File_DeleteTempFileMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final File_DeleteTempFileMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endProg();
				if(monitorfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class File_LengthOnDirectoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<File_LengthOnDirectoryRawMonitor> {

	File_LengthOnDirectoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new File_LengthOnDirectoryRawMonitor[4];
	}
	final void event_bad_length(File f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			File_LengthOnDirectoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_length(f);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Float_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Float_StaticFactoryRawMonitor> {

	Float_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Float_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Float f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Float_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(f);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class HttpCookie_DomainRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<HttpCookie_DomainRawMonitor> {

	HttpCookie_DomainRawMonitor_Set(){
		this.size = 0;
		this.elements = new HttpCookie_DomainRawMonitor[4];
	}
	final void event_setdomain(String domain) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			HttpCookie_DomainRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_setdomain(domain);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class HttpCookie_NameRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<HttpCookie_NameRawMonitor> {

	HttpCookie_NameRawMonitor_Set(){
		this.size = 0;
		this.elements = new HttpCookie_NameRawMonitor[4];
	}
	final void event_construct(String name) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			HttpCookie_NameRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct(name);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class HttpURLConnection_SetBeforeConnectMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<HttpURLConnection_SetBeforeConnectMonitor> {

	HttpURLConnection_SetBeforeConnectMonitor_Set(){
		this.size = 0;
		this.elements = new HttpURLConnection_SetBeforeConnectMonitor[4];
	}
	final void event_set(HttpURLConnection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			HttpURLConnection_SetBeforeConnectMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final HttpURLConnection_SetBeforeConnectMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(c);
				if(monitorfinalMonitor.HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(HttpURLConnection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			HttpURLConnection_SetBeforeConnectMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final HttpURLConnection_SetBeforeConnectMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(c);
				if(monitorfinalMonitor.HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class IDN_ToAsciiRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<IDN_ToAsciiRawMonitor> {

	IDN_ToAsciiRawMonitor_Set(){
		this.size = 0;
		this.elements = new IDN_ToAsciiRawMonitor[4];
	}
	final void event_toascii(String input) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			IDN_ToAsciiRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_toascii(input);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InetAddress_IsReachableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InetAddress_IsReachableRawMonitor> {

	InetAddress_IsReachableRawMonitor_Set(){
		this.size = 0;
		this.elements = new InetAddress_IsReachableRawMonitor[4];
	}
	final void event_isreachable(int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InetAddress_IsReachableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_isreachable(timeout);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_isreachable(int ttl, int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InetAddress_IsReachableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_isreachable(ttl, timeout);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InetSocketAddress_PortRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InetSocketAddress_PortRawMonitor> {

	InetSocketAddress_PortRawMonitor_Set(){
		this.size = 0;
		this.elements = new InetSocketAddress_PortRawMonitor[4];
	}
	final void event_construct(int port) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InetSocketAddress_PortRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct(port);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InputStream_ManipulateAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InputStream_ManipulateAfterCloseMonitor> {

	InputStream_ManipulateAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new InputStream_ManipulateAfterCloseMonitor[4];
	}
	final void event_manipulate(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(i);
				if(monitorfinalMonitor.InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(i);
				if(monitorfinalMonitor.InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InputStream_MarkAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InputStream_MarkAfterCloseMonitor> {

	InputStream_MarkAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new InputStream_MarkAfterCloseMonitor[4];
	}
	final void event_mark(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_MarkAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_MarkAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_mark(i);
				if(monitorfinalMonitor.InputStream_MarkAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_MarkAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_MarkAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(i);
				if(monitorfinalMonitor.InputStream_MarkAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InputStream_MarkResetRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InputStream_MarkResetRawMonitor> {

	InputStream_MarkResetRawMonitor_Set(){
		this.size = 0;
		this.elements = new InputStream_MarkResetRawMonitor[4];
	}
	final void event_mark_or_reset() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_MarkResetRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_mark_or_reset();
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InputStream_ReadAheadLimitMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InputStream_ReadAheadLimitMonitor> {

	InputStream_ReadAheadLimitMonitor_Set(){
		this.size = 0;
		this.elements = new InputStream_ReadAheadLimitMonitor[4];
	}
	final void event_mark(InputStream i, int l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_mark(i, l);
				if(monitorfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_read1(InputStream i, int n) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read1(i, n);
				if(monitorfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_readn(InputStream i, int n) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_readn(i, n);
				if(monitorfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_badreset(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_badreset(i);
				if(monitorfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_goodreset(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_goodreset(i);
				if(monitorfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InputStream_UnmarkedResetMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InputStream_UnmarkedResetMonitor> {

	InputStream_UnmarkedResetMonitor_Set(){
		this.size = 0;
		this.elements = new InputStream_UnmarkedResetMonitor[4];
	}
	final void event_mark(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_UnmarkedResetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_UnmarkedResetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_mark(i);
				if(monitorfinalMonitor.InputStream_UnmarkedResetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_reset(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InputStream_UnmarkedResetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final InputStream_UnmarkedResetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_reset(i);
				if(monitorfinalMonitor.InputStream_UnmarkedResetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Integer_BadDecodeArgRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Integer_BadDecodeArgRawMonitor> {

	Integer_BadDecodeArgRawMonitor_Set(){
		this.size = 0;
		this.elements = new Integer_BadDecodeArgRawMonitor[4];
	}
	final void event_decode(Integer i, String nm) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Integer_BadDecodeArgRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_decode(i, nm);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Integer_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Integer_StaticFactoryRawMonitor> {

	Integer_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Integer_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Integer i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Integer_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(i);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class InvalidPropertiesFormatException_NonSerializableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<InvalidPropertiesFormatException_NonSerializableRawMonitor> {

	InvalidPropertiesFormatException_NonSerializableRawMonitor_Set(){
		this.size = 0;
		this.elements = new InvalidPropertiesFormatException_NonSerializableRawMonitor[4];
	}
	final void event_serialize(ObjectOutputStream out, InvalidPropertiesFormatException obj) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InvalidPropertiesFormatException_NonSerializableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_serialize(out, obj);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_deserialize(ObjectInputStream in, InvalidPropertiesFormatException obj) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			InvalidPropertiesFormatException_NonSerializableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_deserialize(in, obj);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Iterator_HasNextMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Iterator_HasNextMonitor> {

	Iterator_HasNextMonitor_Set(){
		this.size = 0;
		this.elements = new Iterator_HasNextMonitor[4];
	}
	final void event_hasnexttrue(Iterator i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Iterator_HasNextMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Iterator_HasNextMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasnexttrue(i, b);
				if(monitorfinalMonitor.Iterator_HasNextMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_hasnextfalse(Iterator i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Iterator_HasNextMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Iterator_HasNextMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasnextfalse(i, b);
				if(monitorfinalMonitor.Iterator_HasNextMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_next(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Iterator_HasNextMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Iterator_HasNextMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_next(i);
				if(monitorfinalMonitor.Iterator_HasNextMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Iterator_RemoveOnceMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Iterator_RemoveOnceMonitor> {

	Iterator_RemoveOnceMonitor_Set(){
		this.size = 0;
		this.elements = new Iterator_RemoveOnceMonitor[4];
	}
	final void event_remove(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Iterator_RemoveOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Iterator_RemoveOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_remove(i);
				if(monitorfinalMonitor.Iterator_RemoveOnceMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_next(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Iterator_RemoveOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Iterator_RemoveOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_next(i);
				if(monitorfinalMonitor.Iterator_RemoveOnceMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ListIterator_RemoveOnceMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ListIterator_RemoveOnceMonitor> {

	ListIterator_RemoveOnceMonitor_Set(){
		this.size = 0;
		this.elements = new ListIterator_RemoveOnceMonitor[4];
	}
	final void event_remove(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_RemoveOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_RemoveOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_remove(i);
				if(monitorfinalMonitor.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_next(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_RemoveOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_RemoveOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_next(i);
				if(monitorfinalMonitor.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_previous(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_RemoveOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_RemoveOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_previous(i);
				if(monitorfinalMonitor.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ListIterator_SetMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ListIterator_SetMonitor> {

	ListIterator_SetMonitor_Set(){
		this.size = 0;
		this.elements = new ListIterator_SetMonitor[4];
	}
	final void event_create(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_SetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_SetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(i);
				if(monitorfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_remove(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_SetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_SetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_remove(i);
				if(monitorfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_add(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_SetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_SetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_add(i);
				if(monitorfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_next(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_SetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_SetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_next(i);
				if(monitorfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_previous(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_SetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_SetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_previous(i);
				if(monitorfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_SetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_SetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(i);
				if(monitorfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ListIterator_hasNextPreviousMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ListIterator_hasNextPreviousMonitor> {

	ListIterator_hasNextPreviousMonitor_Set(){
		this.size = 0;
		this.elements = new ListIterator_hasNextPreviousMonitor[4];
	}
	final void event_hasnexttrue(ListIterator i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_hasNextPreviousMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_hasNextPreviousMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasnexttrue(i, b);
				if(monitorfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_hasnextfalse(ListIterator i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_hasNextPreviousMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_hasNextPreviousMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasnextfalse(i, b);
				if(monitorfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_next(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_hasNextPreviousMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_hasNextPreviousMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_next(i);
				if(monitorfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_hasprevioustrue(ListIterator i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_hasNextPreviousMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_hasNextPreviousMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasprevioustrue(i, b);
				if(monitorfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_haspreviousfalse(ListIterator i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_hasNextPreviousMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_hasNextPreviousMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_haspreviousfalse(i, b);
				if(monitorfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_previous(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ListIterator_hasNextPreviousMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ListIterator_hasNextPreviousMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_previous(i);
				if(monitorfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class List_UnsafeListIteratorMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<List_UnsafeListIteratorMonitor> {

	List_UnsafeListIteratorMonitor_Set(){
		this.size = 0;
		this.elements = new List_UnsafeListIteratorMonitor[4];
	}
	final void event_create(List l, ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			List_UnsafeListIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final List_UnsafeListIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(l, i);
				if(monitorfinalMonitor.List_UnsafeListIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(List l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			List_UnsafeListIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final List_UnsafeListIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(l);
				if(monitorfinalMonitor.List_UnsafeListIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(ListIterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			List_UnsafeListIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final List_UnsafeListIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.List_UnsafeListIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class List_UnsynchronizedSubListMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<List_UnsynchronizedSubListMonitor> {

	List_UnsynchronizedSubListMonitor_Set(){
		this.size = 0;
		this.elements = new List_UnsynchronizedSubListMonitor[4];
	}
	final void event_createsublist(List b, List s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			List_UnsynchronizedSubListMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final List_UnsynchronizedSubListMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_createsublist(b, s);
				if(monitorfinalMonitor.List_UnsynchronizedSubListMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modifybackinglist(List b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			List_UnsynchronizedSubListMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final List_UnsynchronizedSubListMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modifybackinglist(b);
				if(monitorfinalMonitor.List_UnsynchronizedSubListMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_usesublist(List s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			List_UnsynchronizedSubListMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final List_UnsynchronizedSubListMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_usesublist(s);
				if(monitorfinalMonitor.List_UnsynchronizedSubListMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Long_BadDecodeArgRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Long_BadDecodeArgRawMonitor> {

	Long_BadDecodeArgRawMonitor_Set(){
		this.size = 0;
		this.elements = new Long_BadDecodeArgRawMonitor[4];
	}
	final void event_decode(Long l, String nm) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Long_BadDecodeArgRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_decode(l, nm);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Long_BadParsingArgsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Long_BadParsingArgsRawMonitor> {

	Long_BadParsingArgsRawMonitor_Set(){
		this.size = 0;
		this.elements = new Long_BadParsingArgsRawMonitor[4];
	}
	final void event_bad_arg(String s, int radix) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Long_BadParsingArgsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_arg(s, radix);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_arg2(String s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Long_BadParsingArgsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_arg2(s);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Long_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Long_StaticFactoryRawMonitor> {

	Long_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Long_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Long l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Long_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(l);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Map_CollectionViewAddMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Map_CollectionViewAddMonitor> {

	Map_CollectionViewAddMonitor_Set(){
		this.size = 0;
		this.elements = new Map_CollectionViewAddMonitor[4];
	}
	final void event_getset(Map m, Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_CollectionViewAddMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_CollectionViewAddMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getset(m, c);
				if(monitorfinalMonitor.Map_CollectionViewAddMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_add(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_CollectionViewAddMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_CollectionViewAddMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_add(c);
				if(monitorfinalMonitor.Map_CollectionViewAddMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Map_ItselfAsKeyRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Map_ItselfAsKeyRawMonitor> {

	Map_ItselfAsKeyRawMonitor_Set(){
		this.size = 0;
		this.elements = new Map_ItselfAsKeyRawMonitor[4];
	}
	final void event_put(Map map, Object key, Object value) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_ItselfAsKeyRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_put(map, key, value);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_putall(Map map, Map src) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_ItselfAsKeyRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_putall(map, src);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Map_ItselfAsValueRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Map_ItselfAsValueRawMonitor> {

	Map_ItselfAsValueRawMonitor_Set(){
		this.size = 0;
		this.elements = new Map_ItselfAsValueRawMonitor[4];
	}
	final void event_put(Map map, Object key, Object value) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_ItselfAsValueRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_put(map, key, value);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_putall(Map map, Map src) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_ItselfAsValueRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_putall(map, src);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Map_StandardConstructorsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Map_StandardConstructorsRawMonitor> {

	Map_StandardConstructorsRawMonitor_Set(){
		this.size = 0;
		this.elements = new Map_StandardConstructorsRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_StandardConstructorsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Map_UnsafeIteratorMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Map_UnsafeIteratorMonitor> {

	Map_UnsafeIteratorMonitor_Set(){
		this.size = 0;
		this.elements = new Map_UnsafeIteratorMonitor[4];
	}
	final void event_getset(Map m, Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getset(m, c);
				if(monitorfinalMonitor.Map_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getiter(Collection c, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getiter(c, i);
				if(monitorfinalMonitor.Map_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modifyMap(Map m) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modifyMap(m);
				if(monitorfinalMonitor.Map_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modifyCol(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modifyCol(c);
				if(monitorfinalMonitor.Map_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.Map_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Map_UnsynchronizedAddAllMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Map_UnsynchronizedAddAllMonitor> {

	Map_UnsynchronizedAddAllMonitor_Set(){
		this.size = 0;
		this.elements = new Map_UnsynchronizedAddAllMonitor[4];
	}
	final void event_enter(Map t, Map s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsynchronizedAddAllMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsynchronizedAddAllMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_enter(t, s);
				if(monitorfinalMonitor.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify(Map s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsynchronizedAddAllMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsynchronizedAddAllMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify(s);
				if(monitorfinalMonitor.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_leave(Map t, Map s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Map_UnsynchronizedAddAllMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Map_UnsynchronizedAddAllMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_leave(t, s);
				if(monitorfinalMonitor.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Math_ContendedRandomMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Math_ContendedRandomMonitor> {

	Math_ContendedRandomMonitor_Set(){
		this.size = 0;
		this.elements = new Math_ContendedRandomMonitor[4];
	}
	final void event_onethread_use(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Math_ContendedRandomMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Math_ContendedRandomMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_onethread_use(t);
				if(monitorfinalMonitor.Math_ContendedRandomMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_otherthread_use(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Math_ContendedRandomMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Math_ContendedRandomMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_otherthread_use(t);
				if(monitorfinalMonitor.Math_ContendedRandomMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class MulticastSocket_TTLRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<MulticastSocket_TTLRawMonitor> {

	MulticastSocket_TTLRawMonitor_Set(){
		this.size = 0;
		this.elements = new MulticastSocket_TTLRawMonitor[4];
	}
	final void event_set1(byte ttl) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			MulticastSocket_TTLRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set1(ttl);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set2(int ttl) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			MulticastSocket_TTLRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set2(ttl);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class NavigableMap_ModificationMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<NavigableMap_ModificationMonitor> {

	NavigableMap_ModificationMonitor_Set(){
		this.size = 0;
		this.elements = new NavigableMap_ModificationMonitor[4];
	}
	final void event_create(NavigableMap m1, NavigableMap m2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(m1, m2);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getset1(NavigableMap m1, Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getset1(m1, c);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getset2(NavigableMap m2, Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getset2(m2, c);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getiter(Collection c, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getiter(c, i);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify1(NavigableMap m1) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify1(m1);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify2(NavigableMap m2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify2(m2);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify3(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify3(c);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.NavigableMap_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class NavigableMap_UnsafeIteratorMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<NavigableMap_UnsafeIteratorMonitor> {

	NavigableMap_UnsafeIteratorMonitor_Set(){
		this.size = 0;
		this.elements = new NavigableMap_UnsafeIteratorMonitor[4];
	}
	final void event_getset(NavigableMap m, Set s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getset(m, s);
				if(monitorfinalMonitor.NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getiter(Set s, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getiter(s, i);
				if(monitorfinalMonitor.NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modifyMap(NavigableMap m) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modifyMap(m);
				if(monitorfinalMonitor.NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modifySet(Set s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modifySet(s);
				if(monitorfinalMonitor.NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableMap_UnsafeIteratorMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableMap_UnsafeIteratorMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class NavigableSet_ModificationMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<NavigableSet_ModificationMonitor> {

	NavigableSet_ModificationMonitor_Set(){
		this.size = 0;
		this.elements = new NavigableSet_ModificationMonitor[4];
	}
	final void event_create(NavigableSet s1, NavigableSet s2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableSet_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableSet_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(s1, s2);
				if(monitorfinalMonitor.NavigableSet_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getiter1(NavigableSet s1, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableSet_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableSet_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getiter1(s1, i);
				if(monitorfinalMonitor.NavigableSet_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_getiter2(NavigableSet s2, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableSet_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableSet_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getiter2(s2, i);
				if(monitorfinalMonitor.NavigableSet_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify1(NavigableSet s1) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableSet_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableSet_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify1(s1);
				if(monitorfinalMonitor.NavigableSet_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_modify2(NavigableSet s2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableSet_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableSet_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_modify2(s2);
				if(monitorfinalMonitor.NavigableSet_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_useiter(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NavigableSet_ModificationMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final NavigableSet_ModificationMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_useiter(i);
				if(monitorfinalMonitor.NavigableSet_ModificationMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class NetPermission_ActionsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<NetPermission_ActionsRawMonitor> {

	NetPermission_ActionsRawMonitor_Set(){
		this.size = 0;
		this.elements = new NetPermission_ActionsRawMonitor[4];
	}
	final void event_construct(String actions) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NetPermission_ActionsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct(actions);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class NetPermission_NameRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<NetPermission_NameRawMonitor> {

	NetPermission_NameRawMonitor_Set(){
		this.size = 0;
		this.elements = new NetPermission_NameRawMonitor[4];
	}
	final void event_construct(String name) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			NetPermission_NameRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct(name);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ObjectInput_CloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ObjectInput_CloseMonitor> {

	ObjectInput_CloseMonitor_Set(){
		this.size = 0;
		this.elements = new ObjectInput_CloseMonitor[4];
	}
	final void event_create(ObjectInput i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectInput_CloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectInput_CloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(i);
				if(monitorfinalMonitor.ObjectInput_CloseMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(ObjectInput i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectInput_CloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectInput_CloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(i);
				if(monitorfinalMonitor.ObjectInput_CloseMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endProg() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectInput_CloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectInput_CloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endProg();
				if(monitorfinalMonitor.ObjectInput_CloseMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ObjectOutput_CloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ObjectOutput_CloseMonitor> {

	ObjectOutput_CloseMonitor_Set(){
		this.size = 0;
		this.elements = new ObjectOutput_CloseMonitor[4];
	}
	final void event_create(ObjectOutput o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectOutput_CloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectOutput_CloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(o);
				if(monitorfinalMonitor.ObjectOutput_CloseMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(ObjectOutput o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectOutput_CloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectOutput_CloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(o);
				if(monitorfinalMonitor.ObjectOutput_CloseMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endProg() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectOutput_CloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectOutput_CloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endProg();
				if(monitorfinalMonitor.ObjectOutput_CloseMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ObjectStreamClass_InitializeMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ObjectStreamClass_InitializeMonitor> {

	ObjectStreamClass_InitializeMonitor_Set(){
		this.size = 0;
		this.elements = new ObjectStreamClass_InitializeMonitor[4];
	}
	final void event_create(ObjectStreamClass c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectStreamClass_InitializeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectStreamClass_InitializeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(c);
				if(monitorfinalMonitor.ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_init(ObjectStreamClass c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectStreamClass_InitializeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectStreamClass_InitializeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_init(c);
				if(monitorfinalMonitor.ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endProg() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ObjectStreamClass_InitializeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ObjectStreamClass_InitializeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endProg();
				if(monitorfinalMonitor.ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Object_MonitorOwnerRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Object_MonitorOwnerRawMonitor> {

	Object_MonitorOwnerRawMonitor_Set(){
		this.size = 0;
		this.elements = new Object_MonitorOwnerRawMonitor[4];
	}
	final void event_bad_notify(Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Object_MonitorOwnerRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_notify(o);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_wait(Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Object_MonitorOwnerRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_wait(o);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Object_NoCloneRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Object_NoCloneRawMonitor> {

	Object_NoCloneRawMonitor_Set(){
		this.size = 0;
		this.elements = new Object_NoCloneRawMonitor[4];
	}
	final void event_clone(Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Object_NoCloneRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_clone(o);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class OutputStream_ManipulateAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<OutputStream_ManipulateAfterCloseMonitor> {

	OutputStream_ManipulateAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new OutputStream_ManipulateAfterCloseMonitor[4];
	}
	final void event_manipulate(OutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			OutputStream_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final OutputStream_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(o);
				if(monitorfinalMonitor.OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(OutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			OutputStream_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final OutputStream_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(o);
				if(monitorfinalMonitor.OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PasswordAuthentication_FillZeroPasswordMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PasswordAuthentication_FillZeroPasswordMonitor> {

	PasswordAuthentication_FillZeroPasswordMonitor_Set(){
		this.size = 0;
		this.elements = new PasswordAuthentication_FillZeroPasswordMonitor[4];
	}
	final void event_read(Object pwd) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PasswordAuthentication_FillZeroPasswordMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PasswordAuthentication_FillZeroPasswordMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read(pwd);
				if(monitorfinalMonitor.PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_obliterate(Object pwd) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PasswordAuthentication_FillZeroPasswordMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PasswordAuthentication_FillZeroPasswordMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_obliterate(pwd);
				if(monitorfinalMonitor.PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endProg() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PasswordAuthentication_FillZeroPasswordMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PasswordAuthentication_FillZeroPasswordMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endProg();
				if(monitorfinalMonitor.PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PipedInputStream_UnconnectedReadMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PipedInputStream_UnconnectedReadMonitor> {

	PipedInputStream_UnconnectedReadMonitor_Set(){
		this.size = 0;
		this.elements = new PipedInputStream_UnconnectedReadMonitor[4];
	}
	final void event_create(PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedInputStream_UnconnectedReadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedInputStream_UnconnectedReadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(i);
				if(monitorfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_oi(PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedInputStream_UnconnectedReadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedInputStream_UnconnectedReadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_oi(i);
				if(monitorfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_io(PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedInputStream_UnconnectedReadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedInputStream_UnconnectedReadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_io(i);
				if(monitorfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect1(PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedInputStream_UnconnectedReadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedInputStream_UnconnectedReadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect1(i);
				if(monitorfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect2(PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedInputStream_UnconnectedReadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedInputStream_UnconnectedReadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect2(i);
				if(monitorfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_read(PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedInputStream_UnconnectedReadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedInputStream_UnconnectedReadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read(i);
				if(monitorfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PipedOutputStream_UnconnectedWriteMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PipedOutputStream_UnconnectedWriteMonitor> {

	PipedOutputStream_UnconnectedWriteMonitor_Set(){
		this.size = 0;
		this.elements = new PipedOutputStream_UnconnectedWriteMonitor[4];
	}
	final void event_create(PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedOutputStream_UnconnectedWriteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedOutputStream_UnconnectedWriteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(o);
				if(monitorfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_io(PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedOutputStream_UnconnectedWriteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedOutputStream_UnconnectedWriteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_io(o);
				if(monitorfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_oi(PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedOutputStream_UnconnectedWriteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedOutputStream_UnconnectedWriteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_oi(o);
				if(monitorfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect1(PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedOutputStream_UnconnectedWriteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedOutputStream_UnconnectedWriteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect1(o);
				if(monitorfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect2(PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedOutputStream_UnconnectedWriteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedOutputStream_UnconnectedWriteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect2(o);
				if(monitorfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_write(PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedOutputStream_UnconnectedWriteMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedOutputStream_UnconnectedWriteMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_write(o);
				if(monitorfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PipedStream_SingleThreadMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PipedStream_SingleThreadMonitor> {

	PipedStream_SingleThreadMonitor_Set(){
		this.size = 0;
		this.elements = new PipedStream_SingleThreadMonitor[4];
	}
	final void event_create1(PipedOutputStream o, PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedStream_SingleThreadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedStream_SingleThreadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create1(o, i);
				if(monitorfinalMonitor.PipedStream_SingleThreadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create2(PipedInputStream i, PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedStream_SingleThreadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedStream_SingleThreadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create2(i, o);
				if(monitorfinalMonitor.PipedStream_SingleThreadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create3(PipedInputStream i, PipedOutputStream o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedStream_SingleThreadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedStream_SingleThreadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create3(i, o);
				if(monitorfinalMonitor.PipedStream_SingleThreadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create4(PipedOutputStream o, PipedInputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedStream_SingleThreadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedStream_SingleThreadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create4(o, i);
				if(monitorfinalMonitor.PipedStream_SingleThreadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_write(PipedOutputStream o, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedStream_SingleThreadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedStream_SingleThreadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_write(o, t);
				if(monitorfinalMonitor.PipedStream_SingleThreadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_read(PipedInputStream i, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PipedStream_SingleThreadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PipedStream_SingleThreadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read(i, t);
				if(monitorfinalMonitor.PipedStream_SingleThreadMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PriorityQueue_NonComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PriorityQueue_NonComparableRawMonitor> {

	PriorityQueue_NonComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new PriorityQueue_NonComparableRawMonitor[4];
	}
	final void event_insertnull(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PriorityQueue_NonComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_insertnull(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PriorityQueue_NonComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(c);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PriorityQueue_NonNullRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PriorityQueue_NonNullRawMonitor> {

	PriorityQueue_NonNullRawMonitor_Set(){
		this.size = 0;
		this.elements = new PriorityQueue_NonNullRawMonitor[4];
	}
	final void event_insertnull(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PriorityQueue_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_insertnull(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PriorityQueue_NonNullRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insertnull(c);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ProcessBuilder_NullKeyOrValueMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ProcessBuilder_NullKeyOrValueMonitor> {

	ProcessBuilder_NullKeyOrValueMonitor_Set(){
		this.size = 0;
		this.elements = new ProcessBuilder_NullKeyOrValueMonitor[4];
	}
	final void event_createMap(Map map) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ProcessBuilder_NullKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ProcessBuilder_NullKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_createMap(map);
				if(monitorfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nullPut(Map map, Object key, Object value) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ProcessBuilder_NullKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ProcessBuilder_NullKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nullPut(map, key, value);
				if(monitorfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nullPut(Map map, Map map2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ProcessBuilder_NullKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ProcessBuilder_NullKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nullPut(map, map2);
				if(monitorfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nullQuery(Map map, Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ProcessBuilder_NullKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ProcessBuilder_NullKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nullQuery(map, o);
				if(monitorfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ProcessBuilder_ThreadSafeMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ProcessBuilder_ThreadSafeMonitor> {

	ProcessBuilder_ThreadSafeMonitor_Set(){
		this.size = 0;
		this.elements = new ProcessBuilder_ThreadSafeMonitor[4];
	}
	final void event_safe_oper(ProcessBuilder p, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ProcessBuilder_ThreadSafeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ProcessBuilder_ThreadSafeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_safe_oper(p, t);
				if(monitorfinalMonitor.ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unsafe_oper(ProcessBuilder p, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ProcessBuilder_ThreadSafeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ProcessBuilder_ThreadSafeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unsafe_oper(p, t);
				if(monitorfinalMonitor.ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Properties_ManipulateAfterLoadMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Properties_ManipulateAfterLoadMonitor> {

	Properties_ManipulateAfterLoadMonitor_Set(){
		this.size = 0;
		this.elements = new Properties_ManipulateAfterLoadMonitor[4];
	}
	final void event_manipulate(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Properties_ManipulateAfterLoadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Properties_ManipulateAfterLoadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(i);
				if(monitorfinalMonitor.Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(InputStream i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Properties_ManipulateAfterLoadMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Properties_ManipulateAfterLoadMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(i);
				if(monitorfinalMonitor.Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class PushbackInputStream_UnreadAheadLimitMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<PushbackInputStream_UnreadAheadLimitMonitor> {

	PushbackInputStream_UnreadAheadLimitMonitor_Set(){
		this.size = 0;
		this.elements = new PushbackInputStream_UnreadAheadLimitMonitor[4];
	}
	final void event_create(PushbackInputStream p) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(p);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create(int size, PushbackInputStream p) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(size, p);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_read1(PushbackInputStream p, int r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read1(p, r);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_read2(PushbackInputStream p, int n) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read2(p, n);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_safeunread(PushbackInputStream p) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_safeunread(p);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unsafeunread(PushbackInputStream p) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unsafeunread(p);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_safeunread(PushbackInputStream p, Object b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_safeunread(p, b);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unsafeunread(PushbackInputStream p, Object b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unsafeunread(p, b);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_safeunread(PushbackInputStream p, int len) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_safeunread(p, len);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unsafeunread(PushbackInputStream p, int len) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			PushbackInputStream_UnreadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final PushbackInputStream_UnreadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unsafeunread(p, len);
				if(monitorfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class RandomAccessFile_ManipulateAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<RandomAccessFile_ManipulateAfterCloseMonitor> {

	RandomAccessFile_ManipulateAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new RandomAccessFile_ManipulateAfterCloseMonitor[4];
	}
	final void event_manipulate(RandomAccessFile f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			RandomAccessFile_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final RandomAccessFile_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(f);
				if(monitorfinalMonitor.RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(RandomAccessFile f) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			RandomAccessFile_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final RandomAccessFile_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(f);
				if(monitorfinalMonitor.RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Random_OverrideNextRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Random_OverrideNextRawMonitor> {

	Random_OverrideNextRawMonitor_Set(){
		this.size = 0;
		this.elements = new Random_OverrideNextRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Random_OverrideNextRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Reader_ManipulateAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Reader_ManipulateAfterCloseMonitor> {

	Reader_ManipulateAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new Reader_ManipulateAfterCloseMonitor[4];
	}
	final void event_manipulate(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(r);
				if(monitorfinalMonitor.Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(r);
				if(monitorfinalMonitor.Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Reader_MarkResetRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Reader_MarkResetRawMonitor> {

	Reader_MarkResetRawMonitor_Set(){
		this.size = 0;
		this.elements = new Reader_MarkResetRawMonitor[4];
	}
	final void event_mark(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_MarkResetRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_mark(r);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_reset(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_MarkResetRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_reset(r);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Reader_ReadAheadLimitMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Reader_ReadAheadLimitMonitor> {

	Reader_ReadAheadLimitMonitor_Set(){
		this.size = 0;
		this.elements = new Reader_ReadAheadLimitMonitor[4];
	}
	final void event_mark(Reader r, int l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_mark(r, l);
				if(monitorfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_read1(Reader r, int n) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_read1(r, n);
				if(monitorfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_readn(Reader r, int n) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_readn(r, n);
				if(monitorfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_badreset(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_badreset(r);
				if(monitorfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_goodreset(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_ReadAheadLimitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_ReadAheadLimitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_goodreset(r);
				if(monitorfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Reader_UnmarkedResetMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Reader_UnmarkedResetMonitor> {

	Reader_UnmarkedResetMonitor_Set(){
		this.size = 0;
		this.elements = new Reader_UnmarkedResetMonitor[4];
	}
	final void event_mark(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_UnmarkedResetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_UnmarkedResetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_mark(r);
				if(monitorfinalMonitor.Reader_UnmarkedResetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_reset(Reader r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Reader_UnmarkedResetMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Reader_UnmarkedResetMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_reset(r);
				if(monitorfinalMonitor.Reader_UnmarkedResetMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ResourceBundleControl_MutateFormatListMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ResourceBundleControl_MutateFormatListMonitor> {

	ResourceBundleControl_MutateFormatListMonitor_Set(){
		this.size = 0;
		this.elements = new ResourceBundleControl_MutateFormatListMonitor[4];
	}
	final void event_create(List l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ResourceBundleControl_MutateFormatListMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ResourceBundleControl_MutateFormatListMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(l);
				if(monitorfinalMonitor.ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_mutate(List l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ResourceBundleControl_MutateFormatListMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ResourceBundleControl_MutateFormatListMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_mutate(l);
				if(monitorfinalMonitor.ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Runnable_OverrideRunRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Runnable_OverrideRunRawMonitor> {

	Runnable_OverrideRunRawMonitor_Set(){
		this.size = 0;
		this.elements = new Runnable_OverrideRunRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Runnable_OverrideRunRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class RuntimePermission_NullActionRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<RuntimePermission_NullActionRawMonitor> {

	RuntimePermission_NullActionRawMonitor_Set(){
		this.size = 0;
		this.elements = new RuntimePermission_NullActionRawMonitor[4];
	}
	final void event_constructor_runtimeperm(String name, String actions, RuntimePermission r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			RuntimePermission_NullActionRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_runtimeperm(name, actions, r);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class RuntimePermission_PermNameRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<RuntimePermission_PermNameRawMonitor> {

	RuntimePermission_PermNameRawMonitor_Set(){
		this.size = 0;
		this.elements = new RuntimePermission_PermNameRawMonitor[4];
	}
	final void event_constructor_runtimeperm(String name, RuntimePermission r) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			RuntimePermission_PermNameRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_runtimeperm(name, r);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Scanner_ManipulateAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Scanner_ManipulateAfterCloseMonitor> {

	Scanner_ManipulateAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new Scanner_ManipulateAfterCloseMonitor[4];
	}
	final void event_create(Closeable c, Scanner s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Scanner_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Scanner_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(c, s);
				if(monitorfinalMonitor.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Scanner s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Scanner_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Scanner_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(s);
				if(monitorfinalMonitor.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_manipulate(Closeable c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Scanner_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Scanner_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(c);
				if(monitorfinalMonitor.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Scanner_SearchAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Scanner_SearchAfterCloseMonitor> {

	Scanner_SearchAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new Scanner_SearchAfterCloseMonitor[4];
	}
	final void event_close(Scanner s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Scanner_SearchAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Scanner_SearchAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(s);
				if(monitorfinalMonitor.Scanner_SearchAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_search(Scanner s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Scanner_SearchAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Scanner_SearchAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_search(s);
				if(monitorfinalMonitor.Scanner_SearchAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class SecurityManager_PermissionMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<SecurityManager_PermissionMonitor> {

	SecurityManager_PermissionMonitor_Set(){
		this.size = 0;
		this.elements = new SecurityManager_PermissionMonitor[4];
	}
	final void event_get(SecurityManager manager, Object context) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SecurityManager_PermissionMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final SecurityManager_PermissionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_get(manager, context);
				if(monitorfinalMonitor.SecurityManager_PermissionMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_check(SecurityManager manager, Object context) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SecurityManager_PermissionMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final SecurityManager_PermissionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_check(manager, context);
				if(monitorfinalMonitor.SecurityManager_PermissionMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Serializable_NoArgConstructorRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Serializable_NoArgConstructorRawMonitor> {

	Serializable_NoArgConstructorRawMonitor_Set(){
		this.size = 0;
		this.elements = new Serializable_NoArgConstructorRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Serializable_NoArgConstructorRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Serializable_UIDRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Serializable_UIDRawMonitor> {

	Serializable_UIDRawMonitor_Set(){
		this.size = 0;
		this.elements = new Serializable_UIDRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Serializable_UIDRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_BacklogRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_BacklogRawMonitor> {

	ServerSocket_BacklogRawMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_BacklogRawMonitor[4];
	}
	final void event_construct(int backlog) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_BacklogRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct(backlog);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(int backlog) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_BacklogRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set(backlog);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_LargeReceiveBufferMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_LargeReceiveBufferMonitor> {

	ServerSocket_LargeReceiveBufferMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_LargeReceiveBufferMonitor[4];
	}
	final void event_create_bound(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_bound(sock);
				if(monitorfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unbound(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unbound(sock);
				if(monitorfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bind(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bind(sock);
				if(monitorfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(ServerSocket sock, int size) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock, size);
				if(monitorfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_PerformancePreferencesMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_PerformancePreferencesMonitor> {

	ServerSocket_PerformancePreferencesMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_PerformancePreferencesMonitor[4];
	}
	final void event_create_bound(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_bound(sock);
				if(monitorfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unbound(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unbound(sock);
				if(monitorfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bind(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bind(sock);
				if(monitorfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock);
				if(monitorfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_PortRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_PortRawMonitor> {

	ServerSocket_PortRawMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_PortRawMonitor[4];
	}
	final void event_construct_port(int port) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_PortRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct_port(port);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_ReuseAddressMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_ReuseAddressMonitor> {

	ServerSocket_ReuseAddressMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_ReuseAddressMonitor[4];
	}
	final void event_create_bound(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_bound(sock);
				if(monitorfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unbound(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unbound(sock);
				if(monitorfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bind(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bind(sock);
				if(monitorfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock);
				if(monitorfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_SetTimeoutBeforeBlockingMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_SetTimeoutBeforeBlockingMonitor> {

	ServerSocket_SetTimeoutBeforeBlockingMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_SetTimeoutBeforeBlockingMonitor[4];
	}
	final void event_enter(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_SetTimeoutBeforeBlockingMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_SetTimeoutBeforeBlockingMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_enter(sock);
				if(monitorfinalMonitor.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_leave(ServerSocket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_SetTimeoutBeforeBlockingMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_SetTimeoutBeforeBlockingMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_leave(sock);
				if(monitorfinalMonitor.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(ServerSocket sock, int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_SetTimeoutBeforeBlockingMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServerSocket_SetTimeoutBeforeBlockingMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock, timeout);
				if(monitorfinalMonitor.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServerSocket_TimeoutRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServerSocket_TimeoutRawMonitor> {

	ServerSocket_TimeoutRawMonitor_Set(){
		this.size = 0;
		this.elements = new ServerSocket_TimeoutRawMonitor[4];
	}
	final void event_set(int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServerSocket_TimeoutRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set(timeout);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServiceLoaderIterator_RemoveMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServiceLoaderIterator_RemoveMonitor> {

	ServiceLoaderIterator_RemoveMonitor_Set(){
		this.size = 0;
		this.elements = new ServiceLoaderIterator_RemoveMonitor[4];
	}
	final void event_create(ServiceLoader s, Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServiceLoaderIterator_RemoveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServiceLoaderIterator_RemoveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(s, i);
				if(monitorfinalMonitor.ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_remove(Iterator i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServiceLoaderIterator_RemoveMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServiceLoaderIterator_RemoveMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_remove(i);
				if(monitorfinalMonitor.ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ServiceLoader_MultipleConcurrentThreadsMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ServiceLoader_MultipleConcurrentThreadsMonitor> {

	ServiceLoader_MultipleConcurrentThreadsMonitor_Set(){
		this.size = 0;
		this.elements = new ServiceLoader_MultipleConcurrentThreadsMonitor[4];
	}
	final void event_create(Thread t2, ServiceLoader s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServiceLoader_MultipleConcurrentThreadsMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServiceLoader_MultipleConcurrentThreadsMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create(t2, s);
				if(monitorfinalMonitor.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_gooduse(ServiceLoader s, Thread t2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServiceLoader_MultipleConcurrentThreadsMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServiceLoader_MultipleConcurrentThreadsMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_gooduse(s, t2);
				if(monitorfinalMonitor.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_baduse(ServiceLoader s, Thread t2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ServiceLoader_MultipleConcurrentThreadsMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ServiceLoader_MultipleConcurrentThreadsMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_baduse(s, t2);
				if(monitorfinalMonitor.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Set_ItselfAsElementRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Set_ItselfAsElementRawMonitor> {

	Set_ItselfAsElementRawMonitor_Set(){
		this.size = 0;
		this.elements = new Set_ItselfAsElementRawMonitor[4];
	}
	final void event_add(Set s, Object elem) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Set_ItselfAsElementRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_add(s, elem);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_addall(Set s, Collection src) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Set_ItselfAsElementRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_addall(s, src);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Short_BadDecodeArgRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Short_BadDecodeArgRawMonitor> {

	Short_BadDecodeArgRawMonitor_Set(){
		this.size = 0;
		this.elements = new Short_BadDecodeArgRawMonitor[4];
	}
	final void event_decode(Short s, String nm) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Short_BadDecodeArgRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_decode(s, nm);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Short_BadParsingArgsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Short_BadParsingArgsRawMonitor> {

	Short_BadParsingArgsRawMonitor_Set(){
		this.size = 0;
		this.elements = new Short_BadParsingArgsRawMonitor[4];
	}
	final void event_bad_arg(String s, int radix) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Short_BadParsingArgsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_arg(s, radix);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_arg2(String s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Short_BadParsingArgsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_bad_arg2(s);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Short_StaticFactoryRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Short_StaticFactoryRawMonitor> {

	Short_StaticFactoryRawMonitor_Set(){
		this.size = 0;
		this.elements = new Short_StaticFactoryRawMonitor[4];
	}
	final void event_constructor_create(Short l) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Short_StaticFactoryRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(l);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ShutdownHook_LateRegisterMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ShutdownHook_LateRegisterMonitor> {

	ShutdownHook_LateRegisterMonitor_Set(){
		this.size = 0;
		this.elements = new ShutdownHook_LateRegisterMonitor[4];
	}
	final void event_register(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_LateRegisterMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_LateRegisterMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_register(t);
				if(monitorfinalMonitor.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unregister(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_LateRegisterMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_LateRegisterMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unregister(t);
				if(monitorfinalMonitor.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_start(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_LateRegisterMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_LateRegisterMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_start(t);
				if(monitorfinalMonitor.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ShutdownHook_PrematureStartMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ShutdownHook_PrematureStartMonitor> {

	ShutdownHook_PrematureStartMonitor_Set(){
		this.size = 0;
		this.elements = new ShutdownHook_PrematureStartMonitor[4];
	}
	final void event_good_register(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_PrematureStartMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_PrematureStartMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_good_register(t);
				if(monitorfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
					monitorfinalMonitor.Prop_1_handler_err();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bad_register(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_PrematureStartMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_PrematureStartMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bad_register(t);
				if(monitorfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
					monitorfinalMonitor.Prop_1_handler_err();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unregister(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_PrematureStartMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_PrematureStartMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unregister(t);
				if(monitorfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
					monitorfinalMonitor.Prop_1_handler_err();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_userstart(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_PrematureStartMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_PrematureStartMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_userstart(t);
				if(monitorfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
					monitorfinalMonitor.Prop_1_handler_err();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ShutdownHook_SystemExitMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ShutdownHook_SystemExitMonitor> {
	boolean skipEvent = false;

	ShutdownHook_SystemExitMonitor_Set(){
		this.size = 0;
		this.elements = new ShutdownHook_SystemExitMonitor[4];
	}
	final void event_register(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_SystemExitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_SystemExitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_register(t);
				if(monitorfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unregister(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_SystemExitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_SystemExitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unregister(t);
				if(monitorfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_start(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_SystemExitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_SystemExitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_start(t);
				if(monitorfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_exit(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_SystemExitMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_SystemExitMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_exit(t);
				if(monitorfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ShutdownHook_UnsafeAWTCallMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ShutdownHook_UnsafeAWTCallMonitor> {
	boolean skipEvent = false;

	ShutdownHook_UnsafeAWTCallMonitor_Set(){
		this.size = 0;
		this.elements = new ShutdownHook_UnsafeAWTCallMonitor[4];
	}
	final void event_register(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeAWTCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeAWTCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_register(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unregister(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeAWTCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeAWTCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unregister(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_start(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeAWTCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeAWTCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_start(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_awtcall(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeAWTCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeAWTCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_awtcall(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class ShutdownHook_UnsafeSwingCallMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<ShutdownHook_UnsafeSwingCallMonitor> {
	boolean skipEvent = false;

	ShutdownHook_UnsafeSwingCallMonitor_Set(){
		this.size = 0;
		this.elements = new ShutdownHook_UnsafeSwingCallMonitor[4];
	}
	final void event_register(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeSwingCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeSwingCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_register(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unregister(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeSwingCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeSwingCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unregister(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_start(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeSwingCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeSwingCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_start(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_swingcall1(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeSwingCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeSwingCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_swingcall1(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_swingcall2(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			ShutdownHook_UnsafeSwingCallMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final ShutdownHook_UnsafeSwingCallMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_swingcall2(t);
				if(monitorfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					monitorfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= monitorfinalMonitor.skipEvent;
				monitorfinalMonitor.skipEvent = false;
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class SocketImpl_CloseOutputMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<SocketImpl_CloseOutputMonitor> {

	SocketImpl_CloseOutputMonitor_Set(){
		this.size = 0;
		this.elements = new SocketImpl_CloseOutputMonitor[4];
	}
	final void event_getoutput(SocketImpl sock, OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SocketImpl_CloseOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final SocketImpl_CloseOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getoutput(sock, output);
				if(monitorfinalMonitor.SocketImpl_CloseOutputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(SocketImpl sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SocketImpl_CloseOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final SocketImpl_CloseOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(sock);
				if(monitorfinalMonitor.SocketImpl_CloseOutputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_use(OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SocketImpl_CloseOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final SocketImpl_CloseOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_use(output);
				if(monitorfinalMonitor.SocketImpl_CloseOutputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class SocketPermission_ActionsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<SocketPermission_ActionsRawMonitor> {

	SocketPermission_ActionsRawMonitor_Set(){
		this.size = 0;
		this.elements = new SocketPermission_ActionsRawMonitor[4];
	}
	final void event_construct(String actions) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SocketPermission_ActionsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_construct(actions);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_CloseInputMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_CloseInputMonitor> {

	Socket_CloseInputMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_CloseInputMonitor[4];
	}
	final void event_getinput(Socket sock, InputStream input) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_CloseInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_CloseInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getinput(sock, input);
				if(monitorfinalMonitor.Socket_CloseInputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_CloseInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_CloseInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(sock);
				if(monitorfinalMonitor.Socket_CloseInputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_use(InputStream input) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_CloseInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_CloseInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_use(input);
				if(monitorfinalMonitor.Socket_CloseInputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_CloseOutputMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_CloseOutputMonitor> {

	Socket_CloseOutputMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_CloseOutputMonitor[4];
	}
	final void event_getoutput(Socket sock, OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_CloseOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_CloseOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getoutput(sock, output);
				if(monitorfinalMonitor.Socket_CloseOutputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_CloseOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_CloseOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(sock);
				if(monitorfinalMonitor.Socket_CloseOutputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_use(OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_CloseOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_CloseOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_use(output);
				if(monitorfinalMonitor.Socket_CloseOutputMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_InputStreamUnavailableMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_InputStreamUnavailableMonitor> {

	Socket_InputStreamUnavailableMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_InputStreamUnavailableMonitor[4];
	}
	final void event_create_connected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_InputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_InputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_connected(sock);
				if(monitorfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unconnected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_InputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_InputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unconnected(sock);
				if(monitorfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_InputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_InputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(sock);
				if(monitorfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_get(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_InputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_InputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_get(sock);
				if(monitorfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_InputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_InputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(sock);
				if(monitorfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_shutdown(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_InputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_InputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_shutdown(sock);
				if(monitorfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_LargeReceiveBufferMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_LargeReceiveBufferMonitor> {

	Socket_LargeReceiveBufferMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_LargeReceiveBufferMonitor[4];
	}
	final void event_create_connected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_connected(sock);
				if(monitorfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unconnected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unconnected(sock);
				if(monitorfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(sock);
				if(monitorfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(Socket sock, int size) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_LargeReceiveBufferMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_LargeReceiveBufferMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock, size);
				if(monitorfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_OutputStreamUnavailableMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_OutputStreamUnavailableMonitor> {

	Socket_OutputStreamUnavailableMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_OutputStreamUnavailableMonitor[4];
	}
	final void event_create_connected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_OutputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_OutputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_connected(sock);
				if(monitorfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unconnected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_OutputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_OutputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unconnected(sock);
				if(monitorfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_OutputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_OutputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(sock);
				if(monitorfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_get(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_OutputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_OutputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_get(sock);
				if(monitorfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_OutputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_OutputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(sock);
				if(monitorfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_shutdown(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_OutputStreamUnavailableMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_OutputStreamUnavailableMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_shutdown(sock);
				if(monitorfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_PerformancePreferencesMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_PerformancePreferencesMonitor> {

	Socket_PerformancePreferencesMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_PerformancePreferencesMonitor[4];
	}
	final void event_create_connected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_connected(sock);
				if(monitorfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unconnected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unconnected(sock);
				if(monitorfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(sock);
				if(monitorfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_PerformancePreferencesMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_PerformancePreferencesMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock);
				if(monitorfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_ReuseAddressMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_ReuseAddressMonitor> {

	Socket_ReuseAddressMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_ReuseAddressMonitor[4];
	}
	final void event_create_connected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_connected(sock);
				if(monitorfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_create_unconnected(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_create_unconnected(sock);
				if(monitorfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bind(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bind(sock);
				if(monitorfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseAddressMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseAddressMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock);
				if(monitorfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_ReuseSocketMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_ReuseSocketMonitor> {

	Socket_ReuseSocketMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_ReuseSocketMonitor[4];
	}
	final void event_close(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseSocketMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseSocketMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(sock);
				if(monitorfinalMonitor.Socket_ReuseSocketMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_bind(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseSocketMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseSocketMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_bind(sock);
				if(monitorfinalMonitor.Socket_ReuseSocketMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(Socket sock) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_ReuseSocketMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_ReuseSocketMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(sock);
				if(monitorfinalMonitor.Socket_ReuseSocketMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_SetTimeoutBeforeBlockingInputMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_SetTimeoutBeforeBlockingInputMonitor> {

	Socket_SetTimeoutBeforeBlockingInputMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_SetTimeoutBeforeBlockingInputMonitor[4];
	}
	final void event_getinput(Socket sock, InputStream input) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getinput(sock, input);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_enter(InputStream input) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_enter(input);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_leave(InputStream input) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_leave(input);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(Socket sock, int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingInputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingInputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock, timeout);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_SetTimeoutBeforeBlockingOutputMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_SetTimeoutBeforeBlockingOutputMonitor> {

	Socket_SetTimeoutBeforeBlockingOutputMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_SetTimeoutBeforeBlockingOutputMonitor[4];
	}
	final void event_getoutput(Socket sock, OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_getoutput(sock, output);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_enter(OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_enter(output);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_leave(OutputStream output) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_leave(output);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_set(Socket sock, int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_SetTimeoutBeforeBlockingOutputMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Socket_SetTimeoutBeforeBlockingOutputMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(sock, timeout);
				if(monitorfinalMonitor.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_TimeoutRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_TimeoutRawMonitor> {

	Socket_TimeoutRawMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_TimeoutRawMonitor[4];
	}
	final void event_set(int timeout) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_TimeoutRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_set(timeout);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Socket_TrafficClassRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Socket_TrafficClassRawMonitor> {

	Socket_TrafficClassRawMonitor_Set(){
		this.size = 0;
		this.elements = new Socket_TrafficClassRawMonitor[4];
	}
	final void event_settc(Socket socket, int tc) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Socket_TrafficClassRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_settc(socket, tc);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class SortedMap_StandardConstructorsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<SortedMap_StandardConstructorsRawMonitor> {

	SortedMap_StandardConstructorsRawMonitor_Set(){
		this.size = 0;
		this.elements = new SortedMap_StandardConstructorsRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SortedMap_StandardConstructorsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class SortedSet_ComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<SortedSet_ComparableRawMonitor> {

	SortedSet_ComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new SortedSet_ComparableRawMonitor[4];
	}
	final void event_add(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SortedSet_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_add(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_addall(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SortedSet_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_addall(c);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class SortedSet_StandardConstructorsRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<SortedSet_StandardConstructorsRawMonitor> {

	SortedSet_StandardConstructorsRawMonitor_Set(){
		this.size = 0;
		this.elements = new SortedSet_StandardConstructorsRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			SortedSet_StandardConstructorsRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class StreamTokenizer_AccessInvalidFieldMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<StreamTokenizer_AccessInvalidFieldMonitor> {

	StreamTokenizer_AccessInvalidFieldMonitor_Set(){
		this.size = 0;
		this.elements = new StreamTokenizer_AccessInvalidFieldMonitor[4];
	}
	final void event_nexttoken_word(StreamTokenizer s, int t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StreamTokenizer_AccessInvalidFieldMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StreamTokenizer_AccessInvalidFieldMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nexttoken_word(s, t);
				if(monitorfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nexttoken_num(StreamTokenizer s, int t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StreamTokenizer_AccessInvalidFieldMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StreamTokenizer_AccessInvalidFieldMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nexttoken_num(s, t);
				if(monitorfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nexttoken_eol(StreamTokenizer s, int t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StreamTokenizer_AccessInvalidFieldMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StreamTokenizer_AccessInvalidFieldMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nexttoken_eol(s, t);
				if(monitorfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nexttoken_eof(StreamTokenizer s, int t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StreamTokenizer_AccessInvalidFieldMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StreamTokenizer_AccessInvalidFieldMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nexttoken_eof(s, t);
				if(monitorfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_sval(StreamTokenizer s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StreamTokenizer_AccessInvalidFieldMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StreamTokenizer_AccessInvalidFieldMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_sval(s);
				if(monitorfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nval(StreamTokenizer s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StreamTokenizer_AccessInvalidFieldMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StreamTokenizer_AccessInvalidFieldMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nval(s);
				if(monitorfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class StrictMath_ContendedRandomMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<StrictMath_ContendedRandomMonitor> {

	StrictMath_ContendedRandomMonitor_Set(){
		this.size = 0;
		this.elements = new StrictMath_ContendedRandomMonitor[4];
	}
	final void event_onethread_use(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StrictMath_ContendedRandomMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StrictMath_ContendedRandomMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_onethread_use(t);
				if(monitorfinalMonitor.StrictMath_ContendedRandomMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_otherthread_use(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StrictMath_ContendedRandomMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StrictMath_ContendedRandomMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_otherthread_use(t);
				if(monitorfinalMonitor.StrictMath_ContendedRandomMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class StringBuffer_SingleThreadUsageMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<StringBuffer_SingleThreadUsageMonitor> {

	StringBuffer_SingleThreadUsageMonitor_Set(){
		this.size = 0;
		this.elements = new StringBuffer_SingleThreadUsageMonitor[4];
	}
	final void event_init(Thread t, StringBuffer s) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringBuffer_SingleThreadUsageMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringBuffer_SingleThreadUsageMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_init(t, s);
				if(monitorfinalMonitor.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_use(StringBuffer s, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringBuffer_SingleThreadUsageMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringBuffer_SingleThreadUsageMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_use(s, t);
				if(monitorfinalMonitor.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_endprogram() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringBuffer_SingleThreadUsageMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringBuffer_SingleThreadUsageMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_endprogram();
				if(monitorfinalMonitor.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class StringBuilder_ThreadSafeMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<StringBuilder_ThreadSafeMonitor> {

	StringBuilder_ThreadSafeMonitor_Set(){
		this.size = 0;
		this.elements = new StringBuilder_ThreadSafeMonitor[4];
	}
	final void event_safe_oper(StringBuilder b, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringBuilder_ThreadSafeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringBuilder_ThreadSafeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_safe_oper(b, t);
				if(monitorfinalMonitor.StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_unsafe_oper(StringBuilder b, Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringBuilder_ThreadSafeMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringBuilder_ThreadSafeMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_unsafe_oper(b, t);
				if(monitorfinalMonitor.StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class StringTokenizer_HasMoreElementsMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<StringTokenizer_HasMoreElementsMonitor> {

	StringTokenizer_HasMoreElementsMonitor_Set(){
		this.size = 0;
		this.elements = new StringTokenizer_HasMoreElementsMonitor[4];
	}
	final void event_hasnexttrue(StringTokenizer i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringTokenizer_HasMoreElementsMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringTokenizer_HasMoreElementsMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasnexttrue(i, b);
				if(monitorfinalMonitor.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_hasnextfalse(StringTokenizer i, boolean b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringTokenizer_HasMoreElementsMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringTokenizer_HasMoreElementsMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_hasnextfalse(i, b);
				if(monitorfinalMonitor.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_next(StringTokenizer i) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			StringTokenizer_HasMoreElementsMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final StringTokenizer_HasMoreElementsMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_next(i);
				if(monitorfinalMonitor.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation) {
					monitorfinalMonitor.Prop_1_handler_violation();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class String_UseStringBuilderRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<String_UseStringBuilderRawMonitor> {

	String_UseStringBuilderRawMonitor_Set(){
		this.size = 0;
		this.elements = new String_UseStringBuilderRawMonitor[4];
	}
	final void event_constructor_create(String b) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			String_UseStringBuilderRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_constructor_create(b);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class System_NullArrayCopyRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<System_NullArrayCopyRawMonitor> {

	System_NullArrayCopyRawMonitor_Set(){
		this.size = 0;
		this.elements = new System_NullArrayCopyRawMonitor[4];
	}
	final void event_null_arraycopy(Object src, int srcPos, Object dest, int destPos, int length) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			System_NullArrayCopyRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_null_arraycopy(src, srcPos, dest, destPos, length);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class System_WrongKeyOrValueMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<System_WrongKeyOrValueMonitor> {

	System_WrongKeyOrValueMonitor_Set(){
		this.size = 0;
		this.elements = new System_WrongKeyOrValueMonitor[4];
	}
	final void event_createMap(Map map) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			System_WrongKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final System_WrongKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_createMap(map);
				if(monitorfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nullPut(Map map, Object key, Object value) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			System_WrongKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final System_WrongKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nullPut(map, key, value);
				if(monitorfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nullPut(Map map, Map map2) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			System_WrongKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final System_WrongKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nullPut(map, map2);
				if(monitorfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_nullQuery(Map map, Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			System_WrongKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final System_WrongKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_nullQuery(map, o);
				if(monitorfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_notStringQuery(Map map, Object o) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			System_WrongKeyOrValueMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final System_WrongKeyOrValueMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_notStringQuery(map, o);
				if(monitorfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Thread_SetDaemonBeforeStartMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Thread_SetDaemonBeforeStartMonitor> {

	Thread_SetDaemonBeforeStartMonitor_Set(){
		this.size = 0;
		this.elements = new Thread_SetDaemonBeforeStartMonitor[4];
	}
	final void event_start(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Thread_SetDaemonBeforeStartMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Thread_SetDaemonBeforeStartMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_start(t);
				if(monitorfinalMonitor.Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_setDaemon(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Thread_SetDaemonBeforeStartMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Thread_SetDaemonBeforeStartMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_setDaemon(t);
				if(monitorfinalMonitor.Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Thread_StartOnceMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Thread_StartOnceMonitor> {

	Thread_StartOnceMonitor_Set(){
		this.size = 0;
		this.elements = new Thread_StartOnceMonitor[4];
	}
	final void event_start(Thread t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Thread_StartOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Thread_StartOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_start(t);
				if(monitorfinalMonitor.Thread_StartOnceMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Throwable_InitCauseOnceMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Throwable_InitCauseOnceMonitor> {

	Throwable_InitCauseOnceMonitor_Set(){
		this.size = 0;
		this.elements = new Throwable_InitCauseOnceMonitor[4];
	}
	final void event_createWithoutThrowable(Throwable t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Throwable_InitCauseOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Throwable_InitCauseOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_createWithoutThrowable(t);
				if(monitorfinalMonitor.Throwable_InitCauseOnceMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_createWithThrowable(Throwable t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Throwable_InitCauseOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Throwable_InitCauseOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_createWithThrowable(t);
				if(monitorfinalMonitor.Throwable_InitCauseOnceMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_initCause(Throwable t) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Throwable_InitCauseOnceMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Throwable_InitCauseOnceMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_initCause(t);
				if(monitorfinalMonitor.Throwable_InitCauseOnceMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class TreeMap_ComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<TreeMap_ComparableRawMonitor> {

	TreeMap_ComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new TreeMap_ComparableRawMonitor[4];
	}
	final void event_create(Map src) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			TreeMap_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_create(src);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_put(Object key) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			TreeMap_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_put(key);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_putall(Map src) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			TreeMap_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_putall(src);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class TreeSet_ComparableRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<TreeSet_ComparableRawMonitor> {

	TreeSet_ComparableRawMonitor_Set(){
		this.size = 0;
		this.elements = new TreeSet_ComparableRawMonitor[4];
	}
	final void event_add(Object e) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			TreeSet_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_add(e);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_addall(Collection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			TreeSet_ComparableRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_addall(c);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class URLConnection_ConnectMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<URLConnection_ConnectMonitor> {

	URLConnection_ConnectMonitor_Set(){
		this.size = 0;
		this.elements = new URLConnection_ConnectMonitor[4];
	}
	final void event_explicit(URLConnection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLConnection_ConnectMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final URLConnection_ConnectMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_explicit(c);
				if(monitorfinalMonitor.URLConnection_ConnectMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_implicit(URLConnection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLConnection_ConnectMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final URLConnection_ConnectMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_implicit(c);
				if(monitorfinalMonitor.URLConnection_ConnectMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class URLConnection_OverrideGetPermissionRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<URLConnection_OverrideGetPermissionRawMonitor> {

	URLConnection_OverrideGetPermissionRawMonitor_Set(){
		this.size = 0;
		this.elements = new URLConnection_OverrideGetPermissionRawMonitor[4];
	}
	final void event_staticinit(org.aspectj.lang.Signature staticsig) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLConnection_OverrideGetPermissionRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_staticinit(staticsig);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class URLConnection_SetBeforeConnectMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<URLConnection_SetBeforeConnectMonitor> {

	URLConnection_SetBeforeConnectMonitor_Set(){
		this.size = 0;
		this.elements = new URLConnection_SetBeforeConnectMonitor[4];
	}
	final void event_set(URLConnection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLConnection_SetBeforeConnectMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final URLConnection_SetBeforeConnectMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set(c);
				if(monitorfinalMonitor.URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_connect(URLConnection c) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLConnection_SetBeforeConnectMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final URLConnection_SetBeforeConnectMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_connect(c);
				if(monitorfinalMonitor.URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
					monitorfinalMonitor.Prop_1_handler_fail();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class URLDecoder_DecodeUTF8RawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<URLDecoder_DecodeUTF8RawMonitor> {

	URLDecoder_DecodeUTF8RawMonitor_Set(){
		this.size = 0;
		this.elements = new URLDecoder_DecodeUTF8RawMonitor[4];
	}
	final void event_decode(String enc) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLDecoder_DecodeUTF8RawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_decode(enc);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class URLEncoder_EncodeUTF8RawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<URLEncoder_EncodeUTF8RawMonitor> {

	URLEncoder_EncodeUTF8RawMonitor_Set(){
		this.size = 0;
		this.elements = new URLEncoder_EncodeUTF8RawMonitor[4];
	}
	final void event_encode(String enc) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URLEncoder_EncodeUTF8RawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_encode(enc);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class URL_SetURLStreamHandlerFactoryMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<URL_SetURLStreamHandlerFactoryMonitor> {

	URL_SetURLStreamHandlerFactoryMonitor_Set(){
		this.size = 0;
		this.elements = new URL_SetURLStreamHandlerFactoryMonitor[4];
	}
	final void event_set() {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			URL_SetURLStreamHandlerFactoryMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final URL_SetURLStreamHandlerFactoryMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_set();
				if(monitorfinalMonitor.URL_SetURLStreamHandlerFactoryMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Vector_InsertIndexRawMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Vector_InsertIndexRawMonitor> {

	Vector_InsertIndexRawMonitor_Set(){
		this.size = 0;
		this.elements = new Vector_InsertIndexRawMonitor[4];
	}
	final void event_insert(Vector v, int index) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Vector_InsertIndexRawMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				monitor.event_insert(v, index);
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}
final class Writer_ManipulateAfterCloseMonitor_Set extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractMonitorSet<Writer_ManipulateAfterCloseMonitor> {

	Writer_ManipulateAfterCloseMonitor_Set(){
		this.size = 0;
		this.elements = new Writer_ManipulateAfterCloseMonitor[4];
	}
	final void event_manipulate(Writer w) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Writer_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Writer_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_manipulate(w);
				if(monitorfinalMonitor.Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
	final void event_close(Writer w) {
		int numAlive = 0 ;
		for(int i_1 = 0; i_1 < this.size; i_1++){
			Writer_ManipulateAfterCloseMonitor monitor = this.elements[i_1];
			if(!monitor.isTerminated()){
				elements[numAlive] = monitor;
				numAlive++;

				final Writer_ManipulateAfterCloseMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_close(w);
				if(monitorfinalMonitor.Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}
			}
		}
		for(int i_1 = numAlive; i_1 < this.size; i_1++){
			this.elements[i_1] = null;
		}
		size = numAlive;
	}
}

class Appendable_ThreadSafeMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Appendable_ThreadSafeMonitor ret = (Appendable_ThreadSafeMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread owner = null;

	static final int Prop_1_transition_safe_append[] = {0, 1};;
	static final int Prop_1_transition_unsafe_append[] = {1, 1};;

	volatile boolean Appendable_ThreadSafeMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Appendable_ThreadSafeMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 1) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 1) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 1) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_safe_append(Appendable a, Thread t) {
		{
			if ( ! (this.owner == null || this.owner == t) ) {
				return false;
			}
			{
				this.owner = t;
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_safe_append) ;
		this.Appendable_ThreadSafeMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_unsafe_append(Appendable a, Thread t) {
		{
			if ( ! (this.owner != null && this.owner != t) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unsafe_append) ;
		this.Appendable_ThreadSafeMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Appendable_ThreadSafe has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Appendable_ThreadSafe.html");
			RVMLogging.out.println(Level.CRITICAL, "More than two threads attempted to use an Appendable instance, which may lead to a race condition");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Appendable_ThreadSafeMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_a was suppressed to reduce memory overhead

	//alive_parameters_0 = [Appendable a]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//safe_append
			//alive_a
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//unsafe_append
			//alive_a
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 2;
	}

}
class ArrayDeque_NonNullRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ArrayDeque_NonNullRawMonitor ret = (ArrayDeque_NonNullRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_insertnull(Object e) {
		RVM_lastevent = 0;
		{
			if ( ! (e == null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification ArrayDeque_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ArrayDeque_NonNull.html");
				RVMLogging.out.println(Level.CRITICAL, "ArrayDeque does not permit null.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//insertnull
			return;
		}
		return;
	}

}
class ArrayDeque_UnsafeIteratorMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ArrayDeque_UnsafeIteratorMonitor ret = (ArrayDeque_UnsafeIteratorMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_q = null;
	WeakReference Ref_i = null;

	static final int Prop_1_transition_create[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_modify[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_useiter[] = {4, 4, 2, 1, 4};;

	volatile boolean ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ArrayDeque_UnsafeIteratorMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(ArrayDeque q, Iterator i) {
		{
		}
		if(Ref_q == null){
			Ref_q = new WeakReference(q);
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_modify(ArrayDeque q) {
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_q == null){
			Ref_q = new WeakReference(q);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_modify) ;
		this.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_useiter(Iterator i) {
		ArrayDeque q = null;
		if(Ref_q != null){
			q = (ArrayDeque)Ref_q.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_useiter) ;
		this.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ArrayDeque_UnsafeIterator has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ArrayDeque_UnsafeIterator.html");
			RVMLogging.out.println(Level.CRITICAL, "The deque was modified while an iterator is being used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_q was suppressed to reduce memory overhead
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [ArrayDeque q, Iterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [Iterator i]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_q && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//modify
			//alive_i
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//useiter
			//alive_q && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Arrays_ComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Arrays_ComparableRawMonitor ret = (Arrays_ComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_invalid_sort(Object[] arr) {
		RVM_lastevent = 0;
		{
			for (int i = 0; i < arr.length; ++i) {
				Object o1 = arr[i];
				if (!(o1 instanceof Comparable)) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Arrays_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Arrays_Comparable.html");
					RVMLogging.out.println(Level.CRITICAL, i + "-th element does not implement the Comparable interface.");
				}
				Comparable c1 = (Comparable) o1;
				for (int j = i + 1; j < arr.length; ++j) {
					try {
						Comparable c2 = (Comparable) arr[j];
						c1.compareTo(c2);
						c2.compareTo(c1);
					} catch (ClassCastException e) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Arrays_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Arrays_Comparable.html");
						RVMLogging.out.println(Level.CRITICAL, i + "-th element and " + j + "-th element are not comparable.");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//invalid_sort
			return;
		}
		return;
	}

}
class Arrays_DeepHashCodeRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Arrays_DeepHashCodeRawMonitor ret = (Arrays_DeepHashCodeRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private boolean cycle(ArrayList<Object[]> enclosing, Object[] arr) {
		for (Object[] e : enclosing) {
			if (e == arr) return true;
		}
		enclosing.add(arr);
		for (Object e : arr) {
			if (e instanceof Object[]) {
				if (cycle(enclosing, (Object[]) e)) return true;
			}
		}
		enclosing.remove(enclosing.size() - 1);
		return false;
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_invalid_deephashcode(Object[] arr) {
		RVM_lastevent = 0;
		{
			ArrayList<Object[]> enclosing = new ArrayList<Object[]>();
			if (cycle(enclosing, arr)) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Arrays_DeepHashCode has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Arrays_DeepHashCode.html");
				RVMLogging.out.println(Level.CRITICAL, "The specified array contains itself as an element.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//invalid_deephashcode
			return;
		}
		return;
	}

}
class Arrays_MutuallyComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Arrays_MutuallyComparableRawMonitor ret = (Arrays_MutuallyComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_invalid_sort(Object[] arr, Comparator comp) {
		RVM_lastevent = 0;
		{
			for (int i = 0; i < arr.length; ++i) {
				Object o1 = arr[i];
				for (int j = i + 1; j < arr.length; ++j) {
					Object o2 = arr[j];
					try {
						comp.compare(o1, o2);
						comp.compare(o2, o1);
					} catch (ClassCastException e) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Arrays_MutuallyComparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Arrays_MutuallyComparable.html");
						RVMLogging.out.println(Level.CRITICAL, i + "-th element and " + j + "-th element are not comparable.");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//invalid_sort
			return;
		}
		return;
	}

}
class Arrays_SortBeforeBinarySearchMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Arrays_SortBeforeBinarySearchMonitor ret = (Arrays_SortBeforeBinarySearchMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	int fromIndex;

	int toIndex;

	Comparator comp = null;

	static final int Prop_1_transition_sort1[] = {2, 2, 2, 3};;
	static final int Prop_1_transition_sort2[] = {1, 1, 1, 3};;
	static final int Prop_1_transition_modify[] = {0, 0, 0, 3};;
	static final int Prop_1_transition_bsearch1[] = {3, 3, 2, 3};;
	static final int Prop_1_transition_bsearch2[] = {3, 1, 3, 3};;

	volatile boolean Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Arrays_SortBeforeBinarySearchMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_sort1(Object[] arr) {
		{
			this.fromIndex = 0;
			this.toIndex = arr.length;
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_sort1) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_sort1(Object[] arr, int from, int to) {
		{
			this.fromIndex = from;
			this.toIndex = to;
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_sort1) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_sort2(Object[] arr, Comparator comp2) {
		{
			this.fromIndex = 0;
			this.toIndex = arr.length;
			this.comp = comp2;
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_sort2) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_sort2(Object[] arr, int from, int to, Comparator comp2) {
		{
			this.fromIndex = from;
			this.toIndex = to;
			this.comp = comp2;
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_sort2) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_modify(Object[] arr) {
		{
			this.toIndex = 0;
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_modify) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bsearch1(Object[] arr) {
		{
			if ( ! (this.fromIndex <= 0 && arr.length <= this.toIndex) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_bsearch1) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bsearch1(Object[] arr, int from, int to) {
		{
			if ( ! (this.fromIndex <= from && to <= this.toIndex) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(6, Prop_1_transition_bsearch1) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bsearch2(Object[] arr, Comparator comp2) {
		{
			if ( ! (this.fromIndex <= 0 && arr.length <= this.toIndex && this.comp == comp2) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(7, Prop_1_transition_bsearch2) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bsearch2(Object[] arr, int from, int to, Comparator comp2) {
		{
			if ( ! (this.fromIndex <= from && to <= this.toIndex && this.comp == comp2) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(8, Prop_1_transition_bsearch2) ;
		this.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Arrays_SortBeforeBinarySearch has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Arrays_SortBeforeBinarySearch.html");
			RVMLogging.out.println(Level.CRITICAL, "The array or part of the array must be sorted prior to making binarySearch() call.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_arr was suppressed to reduce memory overhead

	//alive_parameters_0 = [Object[] arr]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//sort1
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//sort1
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//sort2
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//sort2
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//modify
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//bsearch1
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 6:
			//bsearch1
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 7:
			//bsearch2
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 8:
			//bsearch2
			//alive_arr
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 9;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Authenticator_OverrideGetPasswordAuthenticationRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Authenticator_OverrideGetPasswordAuthenticationRawMonitor ret = (Authenticator_OverrideGetPasswordAuthenticationRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			org.aspectj.lang.Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			Method overriden = null;
			while (klass != null && !klass.getName().equals("java.net.Authenticator")) {
				try {
					for (Method m : klass.getDeclaredMethods()) {
						if (!m.getName().equals("getPasswordAuthentication")) continue;
						if (m.getParameterTypes().length != 0) continue;
						overriden = m;
						break;
					}
					if (overriden != null) break;
				} catch (SecurityException e) {
				}
				klass = klass.getSuperclass();
			}
			if (overriden == null) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Authenticator_OverrideGetPasswordAuthentication has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Authenticator_OverrideGetPasswordAuthentication.html");
				RVMLogging.out.println(Level.CRITICAL, "An Authenticator class should override the getPasswordAuthentication() method.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class Boolean_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Boolean_StaticFactoryRawMonitor ret = (Boolean_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Boolean b) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Boolean_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Boolean_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Boolean(boolean value) might be inefficient. Use valueOf(boolean) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class BufferedInputStream_SynchronizedFillMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			BufferedInputStream_SynchronizedFillMonitor ret = (BufferedInputStream_SynchronizedFillMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_fill[] = {1, 2, 2};;

	volatile boolean BufferedInputStream_SynchronizedFillMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	BufferedInputStream_SynchronizedFillMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_fill(BufferedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_fill) ;
		this.BufferedInputStream_SynchronizedFillMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification BufferedInputStream_SynchronizedFill has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/BufferedInputStream_SynchronizedFill.html");
			RVMLogging.out.println(Level.CRITICAL, "BufferedInputStream.fill() is being called by a non-synchronized method.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		BufferedInputStream_SynchronizedFillMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//fill
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 1;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class ByteArrayOutputStream_FlushBeforeRetrieveMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor ret = (ByteArrayOutputStream_FlushBeforeRetrieveMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_b = null;
	WeakReference Ref_o = null;

	static final int Prop_1_transition_outputstreaminit[] = {3, 4, 4, 4, 4};;
	static final int Prop_1_transition_write[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_flush[] = {4, 4, 2, 2, 4};;
	static final int Prop_1_transition_close[] = {4, 4, 1, 1, 4};;
	static final int Prop_1_transition_tobytearray[] = {4, 1, 2, 4, 4};;
	static final int Prop_1_transition_tostring[] = {4, 1, 2, 4, 4};;

	volatile boolean ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	ByteArrayOutputStream_FlushBeforeRetrieveMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_outputstreaminit(ByteArrayOutputStream b, OutputStream o) {
		{
		}
		if(Ref_b == null){
			Ref_b = new WeakReference(b);
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_outputstreaminit) ;
		this.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_write(OutputStream o) {
		ByteArrayOutputStream b = null;
		if(Ref_b != null){
			b = (ByteArrayOutputStream)Ref_b.get();
		}
		{
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_write) ;
		this.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_flush(OutputStream o) {
		ByteArrayOutputStream b = null;
		if(Ref_b != null){
			b = (ByteArrayOutputStream)Ref_b.get();
		}
		{
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_flush) ;
		this.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_close(OutputStream o) {
		ByteArrayOutputStream b = null;
		if(Ref_b != null){
			b = (ByteArrayOutputStream)Ref_b.get();
		}
		{
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_close) ;
		this.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_tobytearray(ByteArrayOutputStream b) {
		OutputStream o = null;
		if(Ref_o != null){
			o = (OutputStream)Ref_o.get();
		}
		{
		}
		if(Ref_b == null){
			Ref_b = new WeakReference(b);
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_tobytearray) ;
		this.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_tostring(ByteArrayOutputStream b) {
		OutputStream o = null;
		if(Ref_o != null){
			o = (OutputStream)Ref_o.get();
		}
		{
		}
		if(Ref_b == null){
			Ref_b = new WeakReference(b);
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_tostring) ;
		this.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ByteArrayOutputStream_FlushBeforeRetrieve has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ByteArrayOutputStream_FlushBeforeRetrieve.html");
			RVMLogging.out.println(Level.CRITICAL, "flush() or close() should be invoked before toByteArray() or toString() to get the complete contents." + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode());
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_b was suppressed to reduce memory overhead
	// RVMRef_o was suppressed to reduce memory overhead

	//alive_parameters_0 = [ByteArrayOutputStream b]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [OutputStream o]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//outputstreaminit
			//alive_b || alive_o
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//write
			//alive_b || alive_o
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//flush
			//alive_b || alive_o
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//close
			//alive_b || alive_o
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//tobytearray
			//alive_b || alive_o
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//tostring
			//alive_b || alive_o
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Byte_BadDecodeArgRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Byte_BadDecodeArgRawMonitor ret = (Byte_BadDecodeArgRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_decode(Byte b, String nm) {
		RVM_lastevent = 0;
		{
			if (nm == null || nm.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadDecodeArg.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.decode(String nm)");
			} else {
				for (int j = 0; j < nm.length(); j++) {
					if (Character.isWhitespace(nm.charAt(j))) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.decode(String nm)");
					}
				}
				String sub;
				if (nm.charAt(0) == '-') {
					sub = nm.substring(1);
				} else {
					sub = nm;
				}
				int radix = 0;
				if (sub.startsWith("0x") || sub.startsWith("0X")) {
					sub = sub.substring(2);
					radix = 16;
				} else if (sub.startsWith("#")) {
					sub = sub.substring(1);
					radix = 16;
				} else if (sub.startsWith("0")) {
					sub = sub.substring(1);
					radix = 8;
				} else {
					radix = 10;
				}
				try {
					if (Byte.parseByte(sub, radix) < 0) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.decode(String nm)");
					}
				} catch (Exception e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadDecodeArg.html");
					RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.decode(String nm)");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//decode
			return;
		}
		return;
	}

}
class Byte_BadParsingArgsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Byte_BadParsingArgsRawMonitor ret = (Byte_BadParsingArgsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_bad_arg(String s, int radix) {
		RVM_lastevent = 0;
		{
			if (s == null || s.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.parseByte(String s, int radix)");
			} else if (radix < java.lang.Character.MIN_RADIX || radix > java.lang.Character.MAX_RADIX) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.parseByte(String s, int radix)");
			} else {
				for (int j = 0; j < s.length(); j++) {
					if (Character.digit(s.charAt(j), radix) == -1) {
						if (!(j == 0 && s.length() > 1 && s.charAt(0) == '-')) {
							RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadParsingArgs.html");
							RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.parseByte(String s, int radix)");
						}
					}
				}
			}
		}
		return true;
	}

	final boolean event_bad_arg2(String s) {
		RVM_lastevent = 1;
		{
			if (s == null || s.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.parseByte(String s)");
			} else {
				for (int j = 0; j < s.length(); j++) {
					if (Character.digit(s.charAt(j), 10) == -1) {
						if (!(j == 0 && s.length() > 1 && s.charAt(0) == '-')) {
							RVMLogging.out.println(Level.CRITICAL, "Specification Byte_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_BadParsingArgs.html");
							RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Byte.parseByte(String s)");
						}
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//bad_arg
			return;
			case 1:
			//bad_arg2
			return;
		}
		return;
	}

}
class Byte_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Byte_StaticFactoryRawMonitor ret = (Byte_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Byte b) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Byte_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Byte_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Byte(byte value) might be inefficient. Use valueOf(byte) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class CharSequence_NotInMapRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			CharSequence_NotInMapRawMonitor ret = (CharSequence_NotInMapRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	boolean flag = false;

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_map_put(Map map) {
		RVM_lastevent = 0;
		{
			if ( ! (!flag) ) {
				return false;
			}
			{
				flag = true;
				RVMLogging.out.println(Level.CRITICAL, "Specification CharSequence_NotInMap has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/CharSequence_NotInMap.html");
				RVMLogging.out.println(Level.CRITICAL, "It might not be safe to add a CharSequence instance into a map as a key");
			}
		}
		return true;
	}

	final boolean event_map_putall(Map map, Map m) {
		RVM_lastevent = 1;
		{
			if ( ! (!flag) ) {
				return false;
			}
			{
				for (Object o : m.keySet()) {
					if (o instanceof CharSequence && !(o instanceof String) && !(o instanceof CharBuffer)) {
						flag = true;
						RVMLogging.out.println(Level.CRITICAL, "Specification CharSequence_NotInMap has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/CharSequence_NotInMap.html");
						RVMLogging.out.println(Level.CRITICAL, "It might not be safe to add a CharSequence instance into a map as a key");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	// RVMRef_map was suppressed to reduce memory overhead

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//map_put
			return;
			case 1:
			//map_putall
			return;
		}
		return;
	}

}
class CharSequence_NotInSetRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			CharSequence_NotInSetRawMonitor ret = (CharSequence_NotInSetRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	boolean flag = false;

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_set_add() {
		RVM_lastevent = 0;
		{
			if ( ! (!flag) ) {
				return false;
			}
			{
				flag = true;
				RVMLogging.out.println(Level.CRITICAL, "Specification CharSequence_NotInSet has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/CharSequence_NotInSet.html");
				RVMLogging.out.println(Level.CRITICAL, "It might not be safe to add a CharSequence instance into a set");
			}
		}
		return true;
	}

	final boolean event_set_addall(Collection c) {
		RVM_lastevent = 1;
		{
			if ( ! (!flag) ) {
				return false;
			}
			{
				for (Object o : c) {
					if (o instanceof CharSequence && !(o instanceof String) && !(o instanceof CharBuffer)) {
						flag = true;
						RVMLogging.out.println(Level.CRITICAL, "Specification CharSequence_NotInSet has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/CharSequence_NotInSet.html");
						RVMLogging.out.println(Level.CRITICAL, "It might not be safe to add a CharSequence instance into a set");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//set_add
			return;
			case 1:
			//set_addall
			return;
		}
		return;
	}

}
class CharSequence_UndefinedHashCodeRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			CharSequence_UndefinedHashCodeRawMonitor ret = (CharSequence_UndefinedHashCodeRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_equals() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification CharSequence_UndefinedHashCode has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/CharSequence_UndefinedHashCode.html");
			RVMLogging.out.println(Level.CRITICAL, "equals and hashCode methods might not be supported in CharSequence");
		}
		return true;
	}

	final boolean event_hashCode() {
		RVM_lastevent = 1;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification CharSequence_UndefinedHashCode has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/CharSequence_UndefinedHashCode.html");
			RVMLogging.out.println(Level.CRITICAL, "equals and hashCode methods might not be supported in CharSequence");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//equals
			return;
			case 1:
			//hashCode
			return;
		}
		return;
	}

}
class Character_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Character_StaticFactoryRawMonitor ret = (Character_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Character b) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Character_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Character_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Character(char value) might be inefficient. Use valueOf(char c) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class Character_ValidateCharRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Character_ValidateCharRawMonitor ret = (Character_ValidateCharRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_charCount(int codePoint) {
		RVM_lastevent = 0;
		{
			if (!Character.isValidCodePoint(codePoint)) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Character_ValidateChar has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Character_ValidateChar.html");
				RVMLogging.out.println(Level.CRITICAL, "The code point used in charCount(int codePoint) is not valid.");
			}
		}
		return true;
	}

	final boolean event_toCodePoint(char high, char low) {
		RVM_lastevent = 1;
		{
			if (!Character.isSurrogatePair(high, low)) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Character_ValidateChar has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Character_ValidateChar.html");
				RVMLogging.out.println(Level.CRITICAL, "The surrogate pair used in toCodePoint(char high, char low) is not valid.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//charCount
			return;
			case 1:
			//toCodePoint
			return;
		}
		return;
	}

}
class ClassLoader_UnsafeClassDefinitionRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ClassLoader_UnsafeClassDefinitionRawMonitor ret = (ClassLoader_UnsafeClassDefinitionRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_defineClass(String name) {
		RVM_lastevent = 0;
		{
			if ( ! (name.startsWith("java.")) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification ClassLoader_UnsafeClassDefinition has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ClassLoader_UnsafeClassDefinition.html");
				RVMLogging.out.println(Level.CRITICAL, "An invalid binary name is used");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//defineClass
			return;
		}
		return;
	}

}
class Closeable_MeaninglessCloseRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Closeable_MeaninglessCloseRawMonitor ret = (Closeable_MeaninglessCloseRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_close() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Closeable_MeaninglessClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Closeable_MeaninglessClose.html");
			RVMLogging.out.println(Level.CRITICAL, "close() has no effect.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//close
			return;
		}
		return;
	}

}
class Closeable_MultipleCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Closeable_MultipleCloseMonitor ret = (Closeable_MultipleCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_close[] = {1, 2, 2, 3};;

	volatile boolean Closeable_MultipleCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Closeable_MultipleCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_close(Closeable c) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_close) ;
		this.Closeable_MultipleCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Closeable_MultipleClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Closeable_MultipleClose.html");
			RVMLogging.out.println(Level.CRITICAL, "close() was invoked multiple times.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Closeable_MultipleCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [Closeable c]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//close
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 1;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Collection_HashCodeRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collection_HashCodeRawMonitor ret = (Collection_HashCodeRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				Method equalsmethod = null;
				Method hashcodemethod = null;
				try {
					equalsmethod = klass.getDeclaredMethod("equals", Object.class);
					hashcodemethod = klass.getDeclaredMethod("hashCode", (Class[]) null);
				} catch (NoSuchMethodException e) {
				}
				if (equalsmethod != null && hashcodemethod == null) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Collection_HashCode has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collection_HashCode.html");
					RVMLogging.out.println(Level.CRITICAL, klass.getName() + " overrides equals() but does not override hashCode().");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class Collection_StandardConstructorsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collection_StandardConstructorsRawMonitor ret = (Collection_StandardConstructorsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				try {
					Constructor ctor1 = klass.getDeclaredConstructor((Class[]) null);
					Constructor ctor2 = klass.getDeclaredConstructor(Collection.class);
				} catch (NoSuchMethodException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Collection_StandardConstructors has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collection_StandardConstructors.html");
					RVMLogging.out.println(Level.CRITICAL, klass.getName() + " does not define the 'standard' constructors.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class Collection_UnsafeIteratorMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collection_UnsafeIteratorMonitor ret = (Collection_UnsafeIteratorMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_c = null;
	WeakReference Ref_i = null;

	static final int Prop_1_transition_create[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_modify[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_useiter[] = {4, 4, 2, 1, 4};;

	volatile boolean Collection_UnsafeIteratorMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Collection_UnsafeIteratorMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(Collection c, Iterator i) {
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.Collection_UnsafeIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_modify(Collection c) {
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_modify) ;
		this.Collection_UnsafeIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_useiter(Iterator i) {
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_useiter) ;
		this.Collection_UnsafeIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collection_UnsafeIterator has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collection_UnsafeIterator.html");
			RVMLogging.out.println(Level.CRITICAL, "The collection was modified while an iterator is being used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Collection_UnsafeIteratorMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_c was suppressed to reduce memory overhead
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [Collection c, Iterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [Iterator i]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_c && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//modify
			//alive_i
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//useiter
			//alive_c && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Collection_UnsynchronizedAddAllMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collection_UnsynchronizedAddAllMonitor ret = (Collection_UnsynchronizedAddAllMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_t = null;

	static final int Prop_1_transition_enter[] = {2, 2, 3, 3};;
	static final int Prop_1_transition_modify[] = {3, 1, 3, 3};;
	static final int Prop_1_transition_leave[] = {3, 3, 1, 3};;

	volatile boolean Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Collection_UnsynchronizedAddAllMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_enter(Collection t, Collection s) {
		{
		}
		if(Ref_t == null){
			Ref_t = new WeakReference(t);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_enter) ;
		this.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_modify(Collection s) {
		Collection t = null;
		if(Ref_t != null){
			t = (Collection)Ref_t.get();
		}
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_modify) ;
		this.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_leave(Collection t, Collection s) {
		{
		}
		if(Ref_t == null){
			Ref_t = new WeakReference(t);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_leave) ;
		this.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collection_UnsynchronizedAddAll has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collection_UnsynchronizedAddAll.html");
			RVMLogging.out.println(Level.CRITICAL, "The source collection of addAll() has been modified.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead
	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [Collection s]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			break;
			case 1:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//enter
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//modify
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//leave
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Collections_ComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collections_ComparableRawMonitor ret = (Collections_ComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private void validate(Object[] arr, Comparator comp, String msg) {
		for (int i = 0; i < arr.length; ++i) {
			Object o1 = arr[i];
			for (int j = i + 1; j < arr.length; ++j) {
				Object o2 = arr[j];
				try {
					comp.compare(o1, o2);
					comp.compare(o2, o1);
				} catch (ClassCastException e) {
					RVMLogging.out.println(Level.CRITICAL, msg);
					RVMLogging.out.println(Level.CRITICAL, i + "-th element and " + j + "-th element are not comparable.");
				}
			}
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_invalid_sort(List list, Comparator comp) {
		RVM_lastevent = 0;
		{
			this.validate(list.toArray(), comp, "Specification Collections_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_Comparable.html");
		}
		return true;
	}

	final boolean event_invalid_minmax(Collection col, Comparator comp) {
		RVM_lastevent = 1;
		{
			this.validate(col.toArray(), comp, "Specification Collections_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_Comparable.html");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//invalid_sort
			return;
			case 1:
			//invalid_minmax
			return;
		}
		return;
	}

}
class Collections_CopySizeRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collections_CopySizeRawMonitor ret = (Collections_CopySizeRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_bad_copy(List dest, List src) {
		RVM_lastevent = 0;
		{
			if ( ! (dest.size() < src.size()) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification Collections_CopySize has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_CopySize.html");
				RVMLogging.out.println(Level.CRITICAL, "The destination list must be at least as long as the source list.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//bad_copy
			return;
		}
		return;
	}

}
class Collections_ImplementComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collections_ImplementComparableRawMonitor ret = (Collections_ImplementComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private void validate(Object[] arr, String msg) {
		for (int i = 0; i < arr.length; ++i) {
			Object o1 = arr[i];
			if (!(o1 instanceof Comparable)) {
				RVMLogging.out.println(Level.CRITICAL, msg);
				RVMLogging.out.println(Level.CRITICAL, i + "-th element does not implement the Comparable interface.");
			}
			Comparable c1 = (Comparable) o1;
			for (int j = i + 1; j < arr.length; ++j) {
				try {
					Comparable c2 = (Comparable) arr[j];
					c1.compareTo(c2);
					c2.compareTo(c1);
				} catch (ClassCastException e) {
					RVMLogging.out.println(Level.CRITICAL, msg);
					RVMLogging.out.println(Level.CRITICAL, i + "-th element and " + j + "-th element are not comparable.");
				}
			}
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_invalid_sort(List list) {
		RVM_lastevent = 0;
		{
			this.validate(list.toArray(), "Specification Collections_ImplementComparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_ImplementComparable.html");
		}
		return true;
	}

	final boolean event_invalid_minmax(Collection col) {
		RVM_lastevent = 1;
		{
			this.validate(col.toArray(), "Specification Collections_ImplementComparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_ImplementComparable.html");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//invalid_sort
			return;
			case 1:
			//invalid_minmax
			return;
		}
		return;
	}

}
class Collections_NewSetFromMapMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collections_NewSetFromMapMonitor ret = (Collections_NewSetFromMapMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_bad_create[] = {2, 3, 3, 3};;
	static final int Prop_1_transition_access[] = {3, 2, 3, 3};;

	volatile boolean Collections_NewSetFromMapMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Collections_NewSetFromMapMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(Map map) {
		{
			if ( ! (map.size() == 0) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.Collections_NewSetFromMapMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_bad_create(Map map) {
		{
			if ( ! (map.size() > 0) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_bad_create) ;
		this.Collections_NewSetFromMapMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_access(Map map) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_access) ;
		this.Collections_NewSetFromMapMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collections_NewSetFromMap has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_NewSetFromMap.html");
			RVMLogging.out.println(Level.CRITICAL, "The map used in Collections.newSetFromMap() must be empty before calling this method, and should not be accessed directly after this method returns.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Collections_NewSetFromMapMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_map was suppressed to reduce memory overhead

	//alive_parameters_0 = [Map map]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//bad_create
			return;
			case 2:
			//access
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Collections_SortBeforeBinarySearchMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collections_SortBeforeBinarySearchMonitor ret = (Collections_SortBeforeBinarySearchMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Comparator comp = null;

	static final int Prop_1_transition_sort1[] = {2, 2, 2, 3};;
	static final int Prop_1_transition_sort2[] = {1, 1, 1, 3};;
	static final int Prop_1_transition_modify[] = {0, 0, 0, 3};;
	static final int Prop_1_transition_bsearch1[] = {3, 3, 2, 3};;
	static final int Prop_1_transition_bsearch2[] = {3, 1, 3, 3};;
	static final int Prop_1_transition_bad_bsearch2[] = {3, 3, 3, 3};;

	volatile boolean Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Collections_SortBeforeBinarySearchMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_sort1(List list) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_sort1) ;
		this.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_sort2(List list, Comparator comp2) {
		{
			this.comp = comp2;
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_sort2) ;
		this.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_modify(List list) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_modify) ;
		this.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bsearch1(List list) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_bsearch1) ;
		this.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bsearch2(List list, Comparator comp2) {
		{
			if ( ! (this.comp == comp2) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_bsearch2) ;
		this.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_bad_bsearch2(List list, Comparator comp2) {
		{
			if ( ! (this.comp != comp2) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_bad_bsearch2) ;
		this.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collections_SortBeforeBinarySearch has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_SortBeforeBinarySearch.html");
			RVMLogging.out.println(Level.CRITICAL, "The list must be sorted prior to making binarySearch() call.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_list was suppressed to reduce memory overhead

	//alive_parameters_0 = [List list]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//sort1
			//alive_list
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//sort2
			//alive_list
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//modify
			//alive_list
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//bsearch1
			//alive_list
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//bsearch2
			//alive_list
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//bad_bsearch2
			//alive_list
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
interface ICollections_SynchronizedCollectionMonitor extends IMonitor, IDisableHolder {
}

class Collections_SynchronizedCollectionDisableHolder extends DisableHolder implements ICollections_SynchronizedCollectionMonitor {
	Collections_SynchronizedCollectionDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class Collections_SynchronizedCollectionMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, ICollections_SynchronizedCollectionMonitor {
	protected Object clone() {
		try {
			Collections_SynchronizedCollectionMonitor ret = (Collections_SynchronizedCollectionMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Collection col;

	WeakReference Ref_col = null;
	WeakReference Ref_iter = null;
	int Prop_1_state;
	static final int Prop_1_transition_sync[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_syncCreateIter[] = {4, 4, 1, 4, 4};;
	static final int Prop_1_transition_asyncCreateIter[] = {4, 4, 3, 4, 4};;
	static final int Prop_1_transition_accessIter[] = {4, 3, 4, 4, 4};;

	boolean Collections_SynchronizedCollectionMonitor_Prop_1_Category_match = false;

	Collections_SynchronizedCollectionMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_sync(Collection col) {
		Iterator iter = null;
		if(Ref_iter != null){
			iter = (Iterator)Ref_iter.get();
		}
		{
			this.col = col;
		}
		if(Ref_col == null){
			Ref_col = new WeakReference(col);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_sync[Prop_1_state];
		Collections_SynchronizedCollectionMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_syncCreateIter(Collection col, Iterator iter) {
		{
			if ( ! (Thread.holdsLock(col)) ) {
				return false;
			}
			{
			}
		}
		if(Ref_col == null){
			Ref_col = new WeakReference(col);
		}
		if(Ref_iter == null){
			Ref_iter = new WeakReference(iter);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_syncCreateIter[Prop_1_state];
		Collections_SynchronizedCollectionMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_asyncCreateIter(Collection col, Iterator iter) {
		{
			if ( ! (!Thread.holdsLock(col)) ) {
				return false;
			}
			{
			}
		}
		if(Ref_col == null){
			Ref_col = new WeakReference(col);
		}
		if(Ref_iter == null){
			Ref_iter = new WeakReference(iter);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_asyncCreateIter[Prop_1_state];
		Collections_SynchronizedCollectionMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_accessIter(Iterator iter) {
		Collection col = null;
		if(Ref_col != null){
			col = (Collection)Ref_col.get();
		}
		{
			if ( ! (!Thread.holdsLock(this.col)) ) {
				return false;
			}
			{
			}
		}
		if(Ref_iter == null){
			Ref_iter = new WeakReference(iter);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_accessIter[Prop_1_state];
		Collections_SynchronizedCollectionMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collections_SynchronizedCollection has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_SynchronizedCollection.html");
			RVMLogging.out.println(Level.CRITICAL, "A synchronized collection was accessed in a thread-unsafe manner.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		Collections_SynchronizedCollectionMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_col was suppressed to reduce memory overhead
	// RVMRef_iter was suppressed to reduce memory overhead

	//alive_parameters_0 = [Collection col, Iterator iter]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [Iterator iter]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//sync
			//alive_col && alive_iter
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//syncCreateIter
			//alive_iter
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//asyncCreateIter
			return;
			case 3:
			//accessIter
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
interface ICollections_SynchronizedMapMonitor extends IMonitor, IDisableHolder {
}

class Collections_SynchronizedMapDisableHolder extends DisableHolder implements ICollections_SynchronizedMapMonitor {
	Collections_SynchronizedMapDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class Collections_SynchronizedMapMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, ICollections_SynchronizedMapMonitor {
	protected Object clone() {
		try {
			Collections_SynchronizedMapMonitor ret = (Collections_SynchronizedMapMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Map map;

	WeakReference Ref_col = null;
	WeakReference Ref_syncMap = null;
	WeakReference Ref_iter = null;
	int Prop_1_state;
	static final int Prop_1_transition_sync[] = {4, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_createSet[] = {5, 5, 5, 5, 3, 5};;
	static final int Prop_1_transition_syncCreateIter[] = {5, 5, 5, 1, 5, 5};;
	static final int Prop_1_transition_asyncCreateIter[] = {5, 5, 5, 2, 5, 5};;
	static final int Prop_1_transition_accessIter[] = {5, 2, 5, 5, 5, 5};;

	boolean Collections_SynchronizedMapMonitor_Prop_1_Category_match = false;

	Collections_SynchronizedMapMonitor(long tau, CachedWeakReference RVMRef_syncMap) {
		this.tau = tau;
		Prop_1_state = 0;

		this.RVMRef_syncMap = RVMRef_syncMap;
	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_sync(Map syncMap) {
		Collection col = null;
		if(Ref_col != null){
			col = (Collection)Ref_col.get();
		}
		Iterator iter = null;
		if(Ref_iter != null){
			iter = (Iterator)Ref_iter.get();
		}
		{
			this.map = syncMap;
		}
		if(Ref_syncMap == null){
			Ref_syncMap = new WeakReference(syncMap);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_sync[Prop_1_state];
		Collections_SynchronizedMapMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_createSet(Map syncMap, Collection col) {
		Iterator iter = null;
		if(Ref_iter != null){
			iter = (Iterator)Ref_iter.get();
		}
		{
		}
		if(Ref_col == null){
			Ref_col = new WeakReference(col);
		}
		if(Ref_syncMap == null){
			Ref_syncMap = new WeakReference(syncMap);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_createSet[Prop_1_state];
		Collections_SynchronizedMapMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_syncCreateIter(Collection col, Iterator iter) {
		Map syncMap = null;
		if(Ref_syncMap != null){
			syncMap = (Map)Ref_syncMap.get();
		}
		{
			if ( ! (Thread.holdsLock(map)) ) {
				return false;
			}
			{
			}
		}
		if(Ref_col == null){
			Ref_col = new WeakReference(col);
		}
		if(Ref_iter == null){
			Ref_iter = new WeakReference(iter);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_syncCreateIter[Prop_1_state];
		Collections_SynchronizedMapMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_asyncCreateIter(Collection col, Iterator iter) {
		Map syncMap = null;
		if(Ref_syncMap != null){
			syncMap = (Map)Ref_syncMap.get();
		}
		{
			if ( ! (!Thread.holdsLock(map)) ) {
				return false;
			}
			{
			}
		}
		if(Ref_col == null){
			Ref_col = new WeakReference(col);
		}
		if(Ref_iter == null){
			Ref_iter = new WeakReference(iter);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_asyncCreateIter[Prop_1_state];
		Collections_SynchronizedMapMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_accessIter(Iterator iter) {
		Map syncMap = null;
		if(Ref_syncMap != null){
			syncMap = (Map)Ref_syncMap.get();
		}
		Collection col = null;
		if(Ref_col != null){
			col = (Collection)Ref_col.get();
		}
		{
			if ( ! (!Thread.holdsLock(map)) ) {
				return false;
			}
			{
			}
		}
		if(Ref_iter == null){
			Ref_iter = new WeakReference(iter);
		}
		RVM_lastevent = 4;

		Prop_1_state = Prop_1_transition_accessIter[Prop_1_state];
		Collections_SynchronizedMapMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collections_SynchronizedMap has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_SynchronizedMap.html");
			RVMLogging.out.println(Level.CRITICAL, "A collection view of a synchronized map was accessed in a thread-unsafe manner.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		Collections_SynchronizedMapMonitor_Prop_1_Category_match = false;
	}

	final CachedWeakReference RVMRef_syncMap;
	// RVMRef_col was suppressed to reduce memory overhead
	// RVMRef_iter was suppressed to reduce memory overhead

	//alive_parameters_0 = [Map syncMap, Collection col, Iterator iter]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [Collection col, Iterator iter]
	boolean alive_parameters_1 = true;
	//alive_parameters_2 = [Iterator iter]
	boolean alive_parameters_2 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
			case 2:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//sync
			//alive_syncMap && alive_col && alive_iter
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//createSet
			//alive_col && alive_iter
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//syncCreateIter
			//alive_iter
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//asyncCreateIter
			return;
			case 4:
			//accessIter
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class Collections_UnnecessaryNewSetFromMapRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Collections_UnnecessaryNewSetFromMapRawMonitor ret = (Collections_UnnecessaryNewSetFromMapRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_unnecessary() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Collections_UnnecessaryNewSetFromMap has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Collections_UnnecessaryNewSetFromMap.html");
			RVMLogging.out.println(Level.CRITICAL, "There is no need to use Collections.newSetFromMap() on HashMap or TreeMap.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//unnecessary
			return;
		}
		return;
	}

}
class Comparable_CompareToNullRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Comparable_CompareToNullRawMonitor ret = (Comparable_CompareToNullRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_nullcompare(Object o) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Comparable_CompareToNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Comparable_CompareToNull.html");
			RVMLogging.out.println(Level.CRITICAL, "null cannot be compared to any object");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//nullcompare
			return;
		}
		return;
	}

}
class Comparable_CompareToNullExceptionRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Comparable_CompareToNullExceptionRawMonitor ret = (Comparable_CompareToNullExceptionRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_badexception(Object o, Exception e) {
		RVM_lastevent = 0;
		{
			if ( ! (!(e instanceof NullPointerException)) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification Comparable_CompareToNullException has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Comparable_CompareToNullException.html");
				RVMLogging.out.println(Level.CRITICAL, "NullPointerException should be thrown when an object is compared to null");
			}
		}
		return true;
	}

	final boolean event_badcompare(Object o, int i) {
		RVM_lastevent = 1;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Comparable_CompareToNullException has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Comparable_CompareToNullException.html");
			RVMLogging.out.println(Level.CRITICAL, "NullPointerException should be thrown when an object is compared to null");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//badexception
			return;
			case 1:
			//badcompare
			return;
		}
		return;
	}

}
class Console_CloseReaderMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Console_CloseReaderMonitor ret = (Console_CloseReaderMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_getreader[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_close[] = {3, 2, 2, 3};;

	volatile boolean Console_CloseReaderMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Console_CloseReaderMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getreader(Reader r) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getreader) ;
		this.Console_CloseReaderMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(Reader r) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Console_CloseReaderMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification Console_CloseReader has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Console_CloseReader.html");
			RVMLogging.out.println(Level.WARNING, "Invoking close() on the object returned by Console.reader() does not close the underlying stream.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Console_CloseReaderMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_r was suppressed to reduce memory overhead

	//alive_parameters_0 = [Reader r]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getreader
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Console_CloseWriterMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Console_CloseWriterMonitor ret = (Console_CloseWriterMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_getwriter[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_close[] = {3, 2, 2, 3};;

	volatile boolean Console_CloseWriterMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Console_CloseWriterMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getwriter(Writer w) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getwriter) ;
		this.Console_CloseWriterMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(Writer w) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Console_CloseWriterMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification Console_CloseWriter has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Console_CloseWriter.html");
			RVMLogging.out.println(Level.WARNING, "Invoking close() on the object returned by Console.writer() does not close the underlying stream.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Console_CloseWriterMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_w was suppressed to reduce memory overhead

	//alive_parameters_0 = [Writer w]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getwriter
			//alive_w
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_w
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
interface IConsole_FillZeroPasswordMonitor extends IMonitor, IDisableHolder {
}

class Console_FillZeroPasswordDisableHolder extends DisableHolder implements IConsole_FillZeroPasswordMonitor {
	Console_FillZeroPasswordDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class Console_FillZeroPasswordMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IConsole_FillZeroPasswordMonitor {
	protected Object clone() {
		try {
			Console_FillZeroPasswordMonitor ret = (Console_FillZeroPasswordMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_pwd = null;
	int Prop_1_state;
	static final int Prop_1_transition_read[] = {1, 2, 3, 3};;
	static final int Prop_1_transition_obliterate[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_endProg[] = {0, 2, 3, 3};;

	boolean Console_FillZeroPasswordMonitor_Prop_1_Category_violation = false;

	Console_FillZeroPasswordMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_read(Object pwd) {
		{
		}
		if(Ref_pwd == null){
			Ref_pwd = new WeakReference(pwd);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_read[Prop_1_state];
		Console_FillZeroPasswordMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_obliterate(Object pwd) {
		{
		}
		if(Ref_pwd == null){
			Ref_pwd = new WeakReference(pwd);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_obliterate[Prop_1_state];
		Console_FillZeroPasswordMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_endProg() {
		Object pwd = null;
		if(Ref_pwd != null){
			pwd = (Object)Ref_pwd.get();
		}
		{
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_endProg[Prop_1_state];
		Console_FillZeroPasswordMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Console_FillZeroPassword has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Console_FillZeroPassword.html");
			RVMLogging.out.println(Level.CRITICAL, "A password has never been obliterated.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		Console_FillZeroPasswordMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_pwd was suppressed to reduce memory overhead

	//alive_parameters_0 = [Object pwd]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//read
			return;
			case 1:
			//obliterate
			//alive_pwd
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//endProg
			//alive_pwd
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class ContentHandler_GetContentRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ContentHandler_GetContentRawMonitor ret = (ContentHandler_GetContentRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_get_content() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.WARNING, "Specification ContentHandler_GetContent has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ContentHandler_GetContent.html");
			RVMLogging.out.println(Level.WARNING, "An application does not generally call ContentHandler.getContent().");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//get_content
			return;
		}
		return;
	}

}
class DatagramPacket_LengthRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			DatagramPacket_LengthRawMonitor ret = (DatagramPacket_LengthRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	void validateOffsetLength(byte[] buffer, int offset, int length, String msg) {
		if (offset + length <= buffer.length) return;
		RVMLogging.out.println(Level.CRITICAL, msg);
		RVMLogging.out.println(Level.CRITICAL, "The offset argument and/or the length argument are out of range; " + offset + " + " + length + " > " + buffer.length);
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct_len(byte[] buffer, int length) {
		RVM_lastevent = 0;
		{
			this.validateOffsetLength(buffer, 0, length, "Specification DatagramPacket_Length has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/DatagramPacket_Length.html");
		}
		return true;
	}

	final boolean event_construct_offlen(byte[] buffer, int offset, int length) {
		RVM_lastevent = 1;
		{
			this.validateOffsetLength(buffer, offset, length, "Specification DatagramPacket_Length has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/DatagramPacket_Length.html");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct_len
			return;
			case 1:
			//construct_offlen
			return;
		}
		return;
	}

}
class DatagramPacket_SetLengthRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			DatagramPacket_SetLengthRawMonitor ret = (DatagramPacket_SetLengthRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_setlength(DatagramPacket packet, int length) {
		RVM_lastevent = 0;
		{
			int offset = packet.getOffset();
			byte[] buffer = packet.getData();
			if (length + offset <= buffer.length) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification DatagramPacket_SetLength has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/DatagramPacket_SetLength.html");
			RVMLogging.out.println(Level.CRITICAL, "The length argument is out of range; " + offset + " + " + length + " > " + buffer.length);
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//setlength
			return;
		}
		return;
	}

}
class DatagramSocket_PortRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			DatagramSocket_PortRawMonitor ret = (DatagramSocket_PortRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct_port(int port) {
		RVM_lastevent = 0;
		{
			if (0 <= port && port <= 65535) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification DatagramSocket_Port has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/DatagramSocket_Port.html");
			RVMLogging.out.println(Level.CRITICAL, "The specified port " + port + " is out of range; [0 ~ 65535]");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct_port
			return;
		}
		return;
	}

}
class DatagramSocket_SoTimeoutRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			DatagramSocket_SoTimeoutRawMonitor ret = (DatagramSocket_SoTimeoutRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_settimeout(int timeout) {
		RVM_lastevent = 0;
		{
			if (timeout >= 0) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification DatagramSocket_SoTimeout has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/DatagramSocket_SoTimeout.html");
			RVMLogging.out.println(Level.CRITICAL, "The timeout value " + timeout + " is out of range; [0 ~ ]");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//settimeout
			return;
		}
		return;
	}

}
class DatagramSocket_TrafficClassRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			DatagramSocket_TrafficClassRawMonitor ret = (DatagramSocket_TrafficClassRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_settc(DatagramSocket socket, int tc) {
		RVM_lastevent = 0;
		{
			boolean outofrange = !(0 <= tc && tc <= 255);
			boolean mbz = false;
			boolean precedence = false;
			InetAddress addr = socket.getLocalAddress();
			if (addr instanceof Inet4Address) {
				mbz = (tc & 1) != 0 ? true : false;
				precedence = (tc >> (4 + 1)) != 0;
			}
			if (outofrange || mbz || precedence) {
				RVMLogging.out.println(Level.CRITICAL, "Specification DatagramSocket_TrafficClass has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/DatagramSocket_TrafficClass.html");
				if (outofrange) {
					RVMLogging.out.println(Level.CRITICAL, "The traffic class value " + tc + " is out of range; [0 ~ 255].");
				} else {
					if (mbz) {
						RVMLogging.out.println(Level.CRITICAL, "The traffic class value sets 1 to MBZ.");
					}
					if (precedence) {
						RVMLogging.out.println(Level.CRITICAL, "The traffic class value sets non-zero precedence.");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//settc
			return;
		}
		return;
	}

}
class Deque_OfferRatherThanAddMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Deque_OfferRatherThanAddMonitor ret = (Deque_OfferRatherThanAddMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_add[] = {3, 2, 2, 3};;

	volatile boolean Deque_OfferRatherThanAddMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Deque_OfferRatherThanAddMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(Deque q) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.Deque_OfferRatherThanAddMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_add(Deque q) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_add) ;
		this.Deque_OfferRatherThanAddMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Deque_OfferRatherThanAdd has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Deque_OfferRatherThanAdd.html");
			RVMLogging.out.println(Level.CRITICAL, "When using a capacity-restricted deque, it is generally preferable to use offerFirst(), offerLast() and offer() instead of addFirt(), addLast() and add().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Deque_OfferRatherThanAddMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_q was suppressed to reduce memory overhead

	//alive_parameters_0 = [Deque q]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_q
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//add
			//alive_q
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Dictionary_NullKeyOrValueRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Dictionary_NullKeyOrValueRawMonitor ret = (Dictionary_NullKeyOrValueRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_putnull(Dictionary d, Object key, Object value) {
		RVM_lastevent = 0;
		{
			if ( ! (key == null || value == null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.WARNING, "Specification Dictionary_NullKeyOrValue has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Dictionary_NullKeyOrValue.html");
				RVMLogging.out.println(Level.WARNING, "Dictionary allow neither null key nor null value.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//putnull
			return;
		}
		return;
	}

}
class Dictionary_ObsoleteMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Dictionary_ObsoleteMonitor ret = (Dictionary_ObsoleteMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_use[] = {1, 2, 2};;

	volatile boolean Dictionary_ObsoleteMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Dictionary_ObsoleteMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_use(Dictionary d) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_use) ;
		this.Dictionary_ObsoleteMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Dictionary_Obsolete has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Dictionary_Obsolete.html");
			RVMLogging.out.println(Level.CRITICAL, "The Dictionary class is obsolete. New implementations should implement the Map interface.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Dictionary_ObsoleteMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_d was suppressed to reduce memory overhead

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//use
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 1;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class Double_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Double_StaticFactoryRawMonitor ret = (Double_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Double d) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Double_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Double_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Double(double value) might be inefficient. Use valueOf(double) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class EnumMap_NonNullRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			EnumMap_NonNullRawMonitor ret = (EnumMap_NonNullRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_insertnull(Object e) {
		RVM_lastevent = 0;
		{
			if ( ! (e == null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification EnumMap_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/EnumMap_NonNull.html");
				RVMLogging.out.println(Level.CRITICAL, "EnumMap does not permit null.");
			}
		}
		return true;
	}

	final boolean event_insertnull(Map m) {
		RVM_lastevent = 1;
		{
			for (Map.Entry entry : (Set<Map.Entry>) m.entrySet()) {
				if (entry.getKey() == null) {
					RVMLogging.out.println(Level.CRITICAL, "Specification EnumMap_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/EnumMap_NonNull.html");
					RVMLogging.out.println(Level.CRITICAL, "EnumMap does not permit null.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//insertnull
			return;
			case 1:
			//insertnull
			return;
		}
		return;
	}

}
class EnumSet_NonNullRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			EnumSet_NonNullRawMonitor ret = (EnumSet_NonNullRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_insertnull(Object e) {
		RVM_lastevent = 0;
		{
			if ( ! (e == null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification EnumSet_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/EnumSet_NonNull.html");
				RVMLogging.out.println(Level.CRITICAL, "EnumSet does not permit null.");
			}
		}
		return true;
	}

	final boolean event_insertnull(Collection c) {
		RVM_lastevent = 1;
		{
			for (Object elem : c) {
				if (elem == null) {
					RVMLogging.out.println(Level.CRITICAL, "Specification EnumSet_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/EnumSet_NonNull.html");
					RVMLogging.out.println(Level.CRITICAL, "EnumSet does not permit null.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//insertnull
			return;
			case 1:
			//insertnull
			return;
		}
		return;
	}

}
class Enum_NoExtraWhiteSpaceRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Enum_NoExtraWhiteSpaceRawMonitor ret = (Enum_NoExtraWhiteSpaceRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_valueOf(Class c, String name) {
		RVM_lastevent = 0;
		{
			if ( ! (name.length() != name.trim().length()) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification Enum_NoExtraWhiteSpace has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Enum_NoExtraWhiteSpace.html");
				RVMLogging.out.println(Level.CRITICAL, "Please use the exact name. No extraneous whitespace characters are permitted");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//valueOf
			return;
		}
		return;
	}

}
class Enum_NoOrdinalRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Enum_NoOrdinalRawMonitor ret = (Enum_NoOrdinalRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_ordinal() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Enum_NoOrdinal has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Enum_NoOrdinal.html");
			RVMLogging.out.println(Level.CRITICAL, "Most programmers will have no use for ordinal() method.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//ordinal
			return;
		}
		return;
	}

}
class Enum_UserFriendlyNameRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Enum_UserFriendlyNameRawMonitor ret = (Enum_UserFriendlyNameRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_name() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Enum_UserFriendlyName has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Enum_UserFriendlyName.html");
			RVMLogging.out.println(Level.CRITICAL, "Most programmers should use toString(). It gives a more user-friendly name.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//name
			return;
		}
		return;
	}

}
class Enumeration_ObsoleteMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Enumeration_ObsoleteMonitor ret = (Enumeration_ObsoleteMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_use[] = {1, 2, 2};;

	volatile boolean Enumeration_ObsoleteMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Enumeration_ObsoleteMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_use(Enumeration e) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_use) ;
		this.Enumeration_ObsoleteMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Enumeration_Obsolete has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Enumeration_Obsolete.html");
			RVMLogging.out.println(Level.CRITICAL, "The Enumeration interface is obsolete. New implementations should consider using the Interface interface.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Enumeration_ObsoleteMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_e was suppressed to reduce memory overhead

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//use
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 1;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
interface IFile_DeleteTempFileMonitor extends IMonitor, IDisableHolder {
}

class File_DeleteTempFileDisableHolder extends DisableHolder implements IFile_DeleteTempFileMonitor {
	File_DeleteTempFileDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class File_DeleteTempFileMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IFile_DeleteTempFileMonitor {
	protected Object clone() {
		try {
			File_DeleteTempFileMonitor ret = (File_DeleteTempFileMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_f = null;
	int Prop_1_state;
	static final int Prop_1_transition_create[] = {1, 2, 3, 3};;
	static final int Prop_1_transition_explicit[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_implicit[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_endProg[] = {0, 2, 3, 3};;

	boolean File_DeleteTempFileMonitor_Prop_1_Category_violation = false;

	File_DeleteTempFileMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create(File f) {
		{
		}
		if(Ref_f == null){
			Ref_f = new WeakReference(f);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create[Prop_1_state];
		File_DeleteTempFileMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_explicit(File f) {
		{
		}
		if(Ref_f == null){
			Ref_f = new WeakReference(f);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_explicit[Prop_1_state];
		File_DeleteTempFileMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_implicit(File f) {
		{
		}
		if(Ref_f == null){
			Ref_f = new WeakReference(f);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_implicit[Prop_1_state];
		File_DeleteTempFileMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_endProg() {
		File f = null;
		if(Ref_f != null){
			f = (File)Ref_f.get();
		}
		{
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_endProg[Prop_1_state];
		File_DeleteTempFileMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification File_DeleteTempFile has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/File_DeleteTempFile.html");
			RVMLogging.out.println(Level.CRITICAL, "A temporary file has not been deleted.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		File_DeleteTempFileMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_f was suppressed to reduce memory overhead

	//alive_parameters_0 = [File f]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			return;
			case 1:
			//explicit
			//alive_f
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//implicit
			//alive_f
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//endProg
			//alive_f
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class File_LengthOnDirectoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			File_LengthOnDirectoryRawMonitor ret = (File_LengthOnDirectoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_bad_length(File f) {
		RVM_lastevent = 0;
		{
			if ( ! (f.isDirectory()) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification File_LengthOnDirectory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/File_LengthOnDirectory.html");
				RVMLogging.out.println(Level.CRITICAL, "length() was invoked on a File instance that represents a directory.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//bad_length
			return;
		}
		return;
	}

}
class Float_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Float_StaticFactoryRawMonitor ret = (Float_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Float f) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Float_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Float_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Float(float value) might be inefficient. Use valueOf(float) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class HttpCookie_DomainRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			HttpCookie_DomainRawMonitor ret = (HttpCookie_DomainRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_setdomain(String domain) {
		RVM_lastevent = 0;
		{
			String separators = "()<>@,;:\\\"/[]?={} \t";
			char ch = '0';
			boolean quoted = false;
			boolean outofrange = false;
			boolean hasctrl = false;
			boolean hassep = false;
			if (domain.length() >= 2 && domain.charAt(0) == '"' && domain.charAt(domain.length() - 1) == '"') {
				quoted = true;
				domain = domain.substring(1, domain.length() - 1);
			}
			for (int i = 0; i < domain.length(); ++i) {
				ch = domain.charAt(i);
				if (!(0 <= ch && ch <= 127)) {
					outofrange = true;
					break;
				} else if (quoted) {
					if (ch <= 31 || ch == 127) {
						hasctrl = true;
						break;
					} else if (separators.indexOf(ch) != -1) {
						hassep = true;
						break;
					}
				}
			}
			if (outofrange || hasctrl || hassep) {
				RVMLogging.out.println(Level.CRITICAL, "Specification HttpCookie_Domain has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/HttpCookie_Domain.html");
				RVMLogging.out.println(Level.CRITICAL, "The specified domain '" + domain + "' is invalid; it cannot contain '" + ch + "'.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//setdomain
			return;
		}
		return;
	}

}
class HttpCookie_NameRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			HttpCookie_NameRawMonitor ret = (HttpCookie_NameRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct(String name) {
		RVM_lastevent = 0;
		{
			String separators = "()<>@,;:\\\"/[]?={} \t";
			char ch = '0';
			boolean outofrange = false;
			boolean hasctrl = false;
			boolean hassep = false;
			for (int i = 0; i < name.length(); ++i) {
				ch = name.charAt(i);
				if (!(0 <= ch && ch <= 127)) {
					outofrange = true;
					break;
				} else if (ch <= 31 || ch == 127) {
					hasctrl = true;
					break;
				} else if (separators.indexOf(ch) != -1) {
					hassep = true;
					break;
				}
			}
			if (outofrange || hasctrl || hassep) {
				RVMLogging.out.println(Level.CRITICAL, "Specification HttpCookie_Name has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/HttpCookie_Name.html");
				RVMLogging.out.println(Level.CRITICAL, "The specified cookie name '" + name + "' is invalid; it cannot contain '" + ch + "'.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct
			return;
		}
		return;
	}

}
class HttpURLConnection_SetBeforeConnectMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			HttpURLConnection_SetBeforeConnectMonitor ret = (HttpURLConnection_SetBeforeConnectMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_set[] = {0, 2, 2};;
	static final int Prop_1_transition_connect[] = {1, 1, 2};;

	volatile boolean HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	HttpURLConnection_SetBeforeConnectMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_set(HttpURLConnection c) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_set) ;
		this.HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_connect(HttpURLConnection c) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_connect) ;
		this.HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification HttpURLConnection_SetBeforeConnect has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/HttpURLConnection_SetBeforeConnect.html");
			RVMLogging.out.println(Level.CRITICAL, "setFixedLengthStreamingMode(), setChunkedStreamingMode() or setRequestMethod() should not be invoked after the connection was made.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [HttpURLConnection c]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//set
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//connect
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class IDN_ToAsciiRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			IDN_ToAsciiRawMonitor ret = (IDN_ToAsciiRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private boolean isAsciiSafe(String input) {
		for (int i = 0; i < input.length(); ++i) {
			int c = input.charAt(i);
			if (c > 0x7f) return false;
		}
		return true;
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_toascii(String input) {
		RVM_lastevent = 0;
		{
			boolean safe = this.isAsciiSafe(input);
			if (!safe) {
				RVMLogging.out.println(Level.CRITICAL, "Specification IDN_ToAscii has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/IDN_ToAscii.html");
				RVMLogging.out.println(Level.CRITICAL, "The input to IDN.toASCII() should not be used in an internationalized domain name.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//toascii
			return;
		}
		return;
	}

}
class InetAddress_IsReachableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InetAddress_IsReachableRawMonitor ret = (InetAddress_IsReachableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_isreachable(int timeout) {
		RVM_lastevent = 0;
		{
			if (timeout < 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification InetAddress_IsReachable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InetAddress_IsReachable.html");
				RVMLogging.out.println(Level.CRITICAL, "The timeout value for InetAddress.isReachable() should not be a negative value.");
			}
		}
		return true;
	}

	final boolean event_isreachable(int ttl, int timeout) {
		RVM_lastevent = 1;
		{
			if (ttl < 0 || timeout < 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification InetAddress_IsReachable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InetAddress_IsReachable.html");
				if (ttl < 0 && timeout < 0) {
					RVMLogging.out.println(Level.CRITICAL, "The ttl value and the timeout value for InetAddress.isReachable() should not be negative values.");
				} else if (ttl < 0) {
					RVMLogging.out.println(Level.CRITICAL, "The ttl value for InetAddress.isReachable() should not be a negative value.");
				} else {
					RVMLogging.out.println(Level.CRITICAL, "The timeout value for InetAddress.isReachable() should not be a negative value.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//isreachable
			return;
			case 1:
			//isreachable
			return;
		}
		return;
	}

}
class InetSocketAddress_PortRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InetSocketAddress_PortRawMonitor ret = (InetSocketAddress_PortRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct(int port) {
		RVM_lastevent = 0;
		{
			if (0 <= port && port <= 65535) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification InetSocketAddress_Port has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InetSocketAddress_Port.html");
			RVMLogging.out.println(Level.CRITICAL, "The specified port " + port + " is out of range; [0 ~ 65535]");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct
			return;
		}
		return;
	}

}
class InputStream_ManipulateAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InputStream_ManipulateAfterCloseMonitor ret = (InputStream_ManipulateAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_manipulate[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_close[] = {2, 3, 2, 3};;

	volatile boolean InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	InputStream_ManipulateAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_manipulate(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_manipulate) ;
		this.InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_close(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.err.println(Level.CRITICAL, "Specification InputStream_ManipulateAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InputStream_ManipulateAfterClose.html");
			RVMLogging.err.println(Level.CRITICAL, "read(), available(), reset() or skip() was invoked after close().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [InputStream i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//manipulate
			return;
			case 1:
			//close
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class InputStream_MarkAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InputStream_MarkAfterCloseMonitor ret = (InputStream_MarkAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_mark[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_close[] = {1, 1, 3, 3};;

	volatile boolean InputStream_MarkAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	InputStream_MarkAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_mark(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_mark) ;
		this.InputStream_MarkAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.InputStream_MarkAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification InputStream_MarkAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InputStream_MarkAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "mark() after close() had no effect.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		InputStream_MarkAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [InputStream i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//mark
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class InputStream_MarkResetRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InputStream_MarkResetRawMonitor ret = (InputStream_MarkResetRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_mark_or_reset() {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification InputStream_MarkReset has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InputStream_MarkReset.html");
			RVMLogging.out.println(Level.CRITICAL, "FileInputStream, PushbackInputStream, ObjectInputStream, PipedInputStream and SequenceInputStream do not support mark() and reset().");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//mark_or_reset
			return;
		}
		return;
	}

}
class InputStream_ReadAheadLimitMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InputStream_ReadAheadLimitMonitor ret = (InputStream_ReadAheadLimitMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	int limit = 0;

	int rest = 0;

	String LOC = null;

	static final int Prop_1_transition_mark[] = {0, 2, 2};;
	static final int Prop_1_transition_read1[] = {0, 2, 2};;
	static final int Prop_1_transition_readn[] = {0, 2, 2};;
	static final int Prop_1_transition_badreset[] = {1, 1, 2};;
	static final int Prop_1_transition_goodreset[] = {0, 2, 2};;

	volatile boolean InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	InputStream_ReadAheadLimitMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_mark(InputStream i, int l) {
		{
			this.limit = l;
			this.rest = l;
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_mark) ;
		this.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_read1(InputStream i, int n) {
		{
			if (n != -1) {
				this.rest -= 1;
				if (this.rest < 0) this.LOC = com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode();
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_read1) ;
		this.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_readn(InputStream i, int n) {
		{
			if (n != -1) {
				this.rest -= n;
				if (this.rest < 0) this.LOC = com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode();
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_readn) ;
		this.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_badreset(InputStream i) {
		{
			if ( ! (rest < 0) ) {
				return false;
			}
			{
				this.limit = 0;
				this.rest = 0;
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_badreset) ;
		this.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_goodreset(InputStream i) {
		{
			if ( ! (rest >= 0) ) {
				return false;
			}
			{
				this.rest = this.limit;
			}
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_goodreset) ;
		this.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification InputStream_ReadAheadLimit has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InputStream_ReadAheadLimit.html");
			RVMLogging.out.println(Level.CRITICAL, "The position mark has been invalidated.");
			if (this.LOC != null) {
				RVMLogging.out.println(Level.CRITICAL, "read() at line " + this.LOC + " invalidated the mark.");
			}
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		InputStream_ReadAheadLimitMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [InputStream i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//mark
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//read1
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//readn
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//badreset
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//goodreset
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class InputStream_UnmarkedResetMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InputStream_UnmarkedResetMonitor ret = (InputStream_UnmarkedResetMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_mark[] = {1, 1, 2};;
	static final int Prop_1_transition_reset[] = {2, 1, 2};;

	volatile boolean InputStream_UnmarkedResetMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	InputStream_UnmarkedResetMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_mark(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_mark) ;
		this.InputStream_UnmarkedResetMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_reset(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_reset) ;
		this.InputStream_UnmarkedResetMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification InputStream_UnmarkedReset has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InputStream_UnmarkedReset.html");
			RVMLogging.out.println(Level.CRITICAL, "BufferedInputStream, DataInputStream and LineNumberInputStream allow reset() only after mark() has been invoked.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		InputStream_UnmarkedResetMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [InputStream i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//mark
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//reset
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class Integer_BadDecodeArgRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Integer_BadDecodeArgRawMonitor ret = (Integer_BadDecodeArgRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_decode(Integer i, String nm) {
		RVM_lastevent = 0;
		{
			if (nm == null || nm.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Integer_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Integer_BadDecodeArg.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Integer.decode(String nm)");
			} else {
				for (int j = 0; j < nm.length(); j++) {
					if (Character.isWhitespace(nm.charAt(j))) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Integer_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Integer_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Integer.decode(String nm)");
					}
				}
				String sub;
				if (nm.charAt(0) == '-') {
					sub = nm.substring(1);
				} else {
					sub = nm;
				}
				int radix = 0;
				if (sub.startsWith("0x") || sub.startsWith("0X")) {
					sub = sub.substring(2);
					radix = 16;
				} else if (sub.startsWith("#")) {
					sub = sub.substring(1);
					radix = 16;
				} else if (sub.startsWith("0")) {
					sub = sub.substring(1);
					radix = 8;
				} else {
					radix = 10;
				}
				try {
					if (Integer.parseInt(sub, radix) < 0) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Integer_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Integer_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Integer.decode(String nm)");
					}
				} catch (Exception e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Integer_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Integer_BadDecodeArg.html");
					RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Integer.decode(String nm)");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//decode
			return;
		}
		return;
	}

}
class Integer_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Integer_StaticFactoryRawMonitor ret = (Integer_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Integer i) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Integer_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Integer_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Integer(int value) might be inefficient. Use valueOf(int) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class InvalidPropertiesFormatException_NonSerializableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			InvalidPropertiesFormatException_NonSerializableRawMonitor ret = (InvalidPropertiesFormatException_NonSerializableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_serialize(ObjectOutputStream out, InvalidPropertiesFormatException obj) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification InvalidPropertiesFormatException_NonSerializable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InvalidPropertiesFormatException_NonSerializable.html");
			RVMLogging.out.println(Level.CRITICAL, "InvalidPropertiesFormatException is not intended to be Serialized.");
		}
		return true;
	}

	final boolean event_deserialize(ObjectInputStream in, InvalidPropertiesFormatException obj) {
		RVM_lastevent = 1;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification InvalidPropertiesFormatException_NonSerializable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/InvalidPropertiesFormatException_NonSerializable.html");
			RVMLogging.out.println(Level.CRITICAL, "InvalidPropertiesFormatException is not intended to be Serialized.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//serialize
			return;
			case 1:
			//deserialize
			return;
		}
		return;
	}

}
class Iterator_HasNextMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Iterator_HasNextMonitor ret = (Iterator_HasNextMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_hasnexttrue[] = {1, 1, 3, 3};;
	static final int Prop_1_transition_hasnextfalse[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_next[] = {2, 0, 3, 3};;

	volatile boolean Iterator_HasNextMonitor_Prop_1_Category_violation = false;

	private final AtomicInteger pairValue;

	Iterator_HasNextMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_hasnexttrue(Iterator i, boolean b) {
		{
			if ( ! (b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_hasnexttrue) ;
		this.Iterator_HasNextMonitor_Prop_1_Category_violation = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_hasnextfalse(Iterator i, boolean b) {
		{
			if ( ! (!b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_hasnextfalse) ;
		this.Iterator_HasNextMonitor_Prop_1_Category_violation = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_next(Iterator i) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_next) ;
		this.Iterator_HasNextMonitor_Prop_1_Category_violation = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification Iterator_HasNext has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Iterator_HasNext.html");
			RVMLogging.out.println(Level.WARNING, "Iterator.hasNext() was not called before calling next().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Iterator_HasNextMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [Iterator i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//hasnexttrue
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//hasnextfalse
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//next
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Iterator_RemoveOnceMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Iterator_RemoveOnceMonitor ret = (Iterator_RemoveOnceMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_remove[] = {2, 0, 2};;
	static final int Prop_1_transition_next[] = {1, 1, 2};;

	volatile boolean Iterator_RemoveOnceMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Iterator_RemoveOnceMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_remove(Iterator i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_remove) ;
		this.Iterator_RemoveOnceMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_next(Iterator i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_next) ;
		this.Iterator_RemoveOnceMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Iterator_RemoveOnce has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Iterator_RemoveOnce.html");
			RVMLogging.out.println(Level.CRITICAL, "Iterator.remove() can be called only once per call to next().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Iterator_RemoveOnceMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [Iterator i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//remove
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//next
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class ListIterator_RemoveOnceMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ListIterator_RemoveOnceMonitor ret = (ListIterator_RemoveOnceMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_remove[] = {2, 0, 2};;
	static final int Prop_1_transition_next[] = {1, 1, 2};;
	static final int Prop_1_transition_previous[] = {1, 1, 2};;

	volatile boolean ListIterator_RemoveOnceMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	ListIterator_RemoveOnceMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_remove(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_remove) ;
		this.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_next(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_next) ;
		this.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_previous(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_previous) ;
		this.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ListIterator_RemoveOnce has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ListIterator_RemoveOnce.html");
			RVMLogging.out.println(Level.CRITICAL, "ListIterator.remove() can be called only once per call to next()/previous().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ListIterator_RemoveOnceMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [ListIterator i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//remove
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//next
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//previous
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class ListIterator_SetMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ListIterator_SetMonitor ret = (ListIterator_SetMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_remove[] = {4, 4, 3, 4, 4};;
	static final int Prop_1_transition_add[] = {4, 1, 1, 4, 4};;
	static final int Prop_1_transition_next[] = {4, 2, 2, 2, 4};;
	static final int Prop_1_transition_previous[] = {4, 2, 2, 2, 4};;
	static final int Prop_1_transition_set[] = {4, 4, 2, 4, 4};;

	volatile boolean ListIterator_SetMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	ListIterator_SetMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.ListIterator_SetMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_remove(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_remove) ;
		this.ListIterator_SetMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_add(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_add) ;
		this.ListIterator_SetMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_next(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_next) ;
		this.ListIterator_SetMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_previous(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_previous) ;
		this.ListIterator_SetMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_set) ;
		this.ListIterator_SetMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ListIterator_Set has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ListIterator_Set.html");
			RVMLogging.out.println(Level.CRITICAL, "ListIterator.set() can be made only if neither remove() nor add() have been called after the last call to next() or previous().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ListIterator_SetMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [ListIterator i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//remove
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//add
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//next
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//previous
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//set
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class ListIterator_hasNextPreviousMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ListIterator_hasNextPreviousMonitor ret = (ListIterator_hasNextPreviousMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_hasnexttrue[] = {3, 2, 2, 3, 4};;
	static final int Prop_1_transition_hasnextfalse[] = {0, 1, 1, 0, 4};;
	static final int Prop_1_transition_next[] = {4, 4, 1, 1, 4};;
	static final int Prop_1_transition_hasprevioustrue[] = {1, 1, 2, 2, 4};;
	static final int Prop_1_transition_haspreviousfalse[] = {0, 0, 3, 3, 4};;
	static final int Prop_1_transition_previous[] = {4, 3, 3, 4, 4};;

	volatile boolean ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	ListIterator_hasNextPreviousMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_hasnexttrue(ListIterator i, boolean b) {
		{
			if ( ! (b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_hasnexttrue) ;
		this.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_hasnextfalse(ListIterator i, boolean b) {
		{
			if ( ! (!b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_hasnextfalse) ;
		this.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_next(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_next) ;
		this.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_hasprevioustrue(ListIterator i, boolean b) {
		{
			if ( ! (b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_hasprevioustrue) ;
		this.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_haspreviousfalse(ListIterator i, boolean b) {
		{
			if ( ! (!b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_haspreviousfalse) ;
		this.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_previous(ListIterator i) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_previous) ;
		this.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification ListIterator_hasNextPrevious has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ListIterator_hasNextPrevious.html");
			RVMLogging.out.println(Level.WARNING, "ListIterator.hasNext()/hasPrevious() was not called before calling next()/previous().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [ListIterator i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//hasnexttrue
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//hasnextfalse
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//next
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//hasprevioustrue
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//haspreviousfalse
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//previous
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class List_UnsafeListIteratorMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			List_UnsafeListIteratorMonitor ret = (List_UnsafeListIteratorMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_i = null;
	WeakReference Ref_l = null;

	static final int Prop_1_transition_create[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_modify[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_useiter[] = {4, 4, 2, 1, 4};;

	volatile boolean List_UnsafeListIteratorMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	List_UnsafeListIteratorMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(List l, ListIterator i) {
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_l == null){
			Ref_l = new WeakReference(l);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.List_UnsafeListIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_modify(List l) {
		ListIterator i = null;
		if(Ref_i != null){
			i = (ListIterator)Ref_i.get();
		}
		{
		}
		if(Ref_l == null){
			Ref_l = new WeakReference(l);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_modify) ;
		this.List_UnsafeListIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_useiter(ListIterator i) {
		List l = null;
		if(Ref_l != null){
			l = (List)Ref_l.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_useiter) ;
		this.List_UnsafeListIteratorMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification List_UnsafeListIterator has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/List_UnsafeListIterator.html");
			RVMLogging.out.println(Level.CRITICAL, "The list was modified while a list iterator is being used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		List_UnsafeListIteratorMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_l was suppressed to reduce memory overhead
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [List l, ListIterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [ListIterator i]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_l && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//modify
			//alive_i
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//useiter
			//alive_l && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class List_UnsynchronizedSubListMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			List_UnsynchronizedSubListMonitor ret = (List_UnsynchronizedSubListMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_b = null;
	WeakReference Ref_s = null;

	static final int Prop_1_transition_createsublist[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_modifybackinglist[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_usesublist[] = {4, 4, 2, 1, 4};;

	volatile boolean List_UnsynchronizedSubListMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	List_UnsynchronizedSubListMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_createsublist(List b, List s) {
		{
		}
		if(Ref_b == null){
			Ref_b = new WeakReference(b);
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_createsublist) ;
		this.List_UnsynchronizedSubListMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_modifybackinglist(List b) {
		List s = null;
		if(Ref_s != null){
			s = (List)Ref_s.get();
		}
		{
		}
		if(Ref_b == null){
			Ref_b = new WeakReference(b);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_modifybackinglist) ;
		this.List_UnsynchronizedSubListMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_usesublist(List s) {
		List b = null;
		if(Ref_b != null){
			b = (List)Ref_b.get();
		}
		{
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_usesublist) ;
		this.List_UnsynchronizedSubListMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification List_UnsynchronizedSubList has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/List_UnsynchronizedSubList.html");
			RVMLogging.out.println(Level.CRITICAL, "The backing list was modified while a sub-list is being used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		List_UnsynchronizedSubListMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_b was suppressed to reduce memory overhead
	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [List b, List s]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [List s]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//createsublist
			//alive_b && alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//modifybackinglist
			//alive_s
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//usesublist
			//alive_b && alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Long_BadDecodeArgRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Long_BadDecodeArgRawMonitor ret = (Long_BadDecodeArgRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_decode(Long l, String nm) {
		RVM_lastevent = 0;
		{
			if (nm == null || nm.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadDecodeArg.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.decode(String nm)");
			} else {
				for (int j = 0; j < nm.length(); j++) {
					if (Character.isWhitespace(nm.charAt(j))) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.decode(String nm)");
					}
				}
				String sub;
				if (nm.charAt(0) == '-') {
					sub = nm.substring(1);
				} else {
					sub = nm;
				}
				int radix = 0;
				if (sub.startsWith("0x") || sub.startsWith("0X")) {
					sub = sub.substring(2);
					radix = 16;
				} else if (sub.startsWith("#")) {
					sub = sub.substring(1);
					radix = 16;
				} else if (sub.startsWith("0")) {
					sub = sub.substring(1);
					radix = 8;
				} else {
					radix = 10;
				}
				try {
					if (Long.parseLong(sub, radix) < 0) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.decode(String nm)");
					}
				} catch (Exception e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadDecodeArg.html");
					RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.decode(String nm)");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//decode
			return;
		}
		return;
	}

}
class Long_BadParsingArgsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Long_BadParsingArgsRawMonitor ret = (Long_BadParsingArgsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_bad_arg(String s, int radix) {
		RVM_lastevent = 0;
		{
			if (s == null || s.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.parseLong(String s, int radix)");
			} else if (radix < java.lang.Character.MIN_RADIX || radix > java.lang.Character.MAX_RADIX) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.parseLong(String s, int radix)");
			} else {
				for (int j = 0; j < s.length(); j++) {
					if (Character.digit(s.charAt(j), radix) == -1) {
						if (j == 0 && s.length() > 1 && s.charAt(0) == '-') {
						} else if (j == s.length() - 1 && (s.charAt(j) == 'l' || s.charAt(j) == 'L')) {
						} else {
							RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadParsingArgs.html");
							RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.parseLong(String s, int radix)");
						}
					}
				}
			}
		}
		return true;
	}

	final boolean event_bad_arg2(String s) {
		RVM_lastevent = 1;
		{
			if (s == null || s.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.parseLong(String s)");
			} else {
				for (int j = 0; j < s.length(); j++) {
					if (Character.digit(s.charAt(j), 10) == -1) {
						if (j == 0 && s.length() > 1 && s.charAt(0) == '-') {
						} else if (j == s.length() - 1 && (s.charAt(j) == 'l' || s.charAt(j) == 'L')) {
						} else {
							RVMLogging.out.println(Level.CRITICAL, "Specification Long_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_BadParsingArgs.html");
							RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Long.parseLong(String s)");
						}
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//bad_arg
			return;
			case 1:
			//bad_arg2
			return;
		}
		return;
	}

}
class Long_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Long_StaticFactoryRawMonitor ret = (Long_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Long l) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Long_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Long_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Long(long value) might be inefficient. Use valueOf(long) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class Map_CollectionViewAddMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Map_CollectionViewAddMonitor ret = (Map_CollectionViewAddMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_m = null;

	static final int Prop_1_transition_getset[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_add[] = {3, 2, 2, 3};;

	volatile boolean Map_CollectionViewAddMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Map_CollectionViewAddMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getset(Map m, Collection c) {
		{
		}
		if(Ref_m == null){
			Ref_m = new WeakReference(m);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getset) ;
		this.Map_CollectionViewAddMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_add(Collection c) {
		Map m = null;
		if(Ref_m != null){
			m = (Map)Ref_m.get();
		}
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_add) ;
		this.Map_CollectionViewAddMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Map_CollectionViewAdd has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_CollectionViewAdd.html");
			RVMLogging.out.println(Level.CRITICAL, "A collection/set view of a map does not support add()/addAll().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Map_CollectionViewAddMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_m was suppressed to reduce memory overhead
	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [Collection c]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			break;
			case 1:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getset
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//add
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Map_ItselfAsKeyRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Map_ItselfAsKeyRawMonitor ret = (Map_ItselfAsKeyRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_put(Map map, Object key, Object value) {
		RVM_lastevent = 0;
		{
			if (key == map) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Map_ItselfAsKey has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_ItselfAsKey.html");
				RVMLogging.out.println(Level.CRITICAL, "A map cannot contain itself as a key.");
			}
		}
		return true;
	}

	final boolean event_putall(Map map, Map src) {
		RVM_lastevent = 1;
		{
			for (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {
				if (entry.getKey() == map) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Map_ItselfAsKey has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_ItselfAsKey.html");
					RVMLogging.out.println(Level.CRITICAL, "A map cannot contain itself as a key.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//put
			return;
			case 1:
			//putall
			return;
		}
		return;
	}

}
class Map_ItselfAsValueRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Map_ItselfAsValueRawMonitor ret = (Map_ItselfAsValueRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_put(Map map, Object key, Object value) {
		RVM_lastevent = 0;
		{
			if (value == map) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Map_ItselfAsValue has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_ItselfAsValue.html");
				RVMLogging.out.println(Level.CRITICAL, "A map cannot contain itself as a value.");
			}
		}
		return true;
	}

	final boolean event_putall(Map map, Map src) {
		RVM_lastevent = 1;
		{
			for (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {
				if (entry.getValue() == map) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Map_ItselfAsValue has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_ItselfAsValue.html");
					RVMLogging.out.println(Level.CRITICAL, "A map cannot contain itself as a value.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//put
			return;
			case 1:
			//putall
			return;
		}
		return;
	}

}
class Map_StandardConstructorsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Map_StandardConstructorsRawMonitor ret = (Map_StandardConstructorsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				try {
					Constructor ctor1 = klass.getDeclaredConstructor((Class[]) null);
					Constructor ctor2 = klass.getDeclaredConstructor(Map.class);
				} catch (NoSuchMethodException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Map_StandardConstructors has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_StandardConstructors.html");
					RVMLogging.out.println(Level.CRITICAL, klass.getName() + " does not define the 'standard' constructors.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
interface IMap_UnsafeIteratorMonitor extends IMonitor, IDisableHolder {
}

class Map_UnsafeIteratorDisableHolder extends DisableHolder implements IMap_UnsafeIteratorMonitor {
	Map_UnsafeIteratorDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class Map_UnsafeIteratorMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IMap_UnsafeIteratorMonitor {
	protected Object clone() {
		try {
			Map_UnsafeIteratorMonitor ret = (Map_UnsafeIteratorMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_c = null;
	WeakReference Ref_i = null;
	WeakReference Ref_m = null;
	int Prop_1_state;
	static final int Prop_1_transition_getset[] = {4, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_getiter[] = {5, 5, 5, 5, 3, 5};;
	static final int Prop_1_transition_modifyMap[] = {5, 1, 5, 1, 4, 5};;
	static final int Prop_1_transition_modifyCol[] = {5, 1, 5, 1, 4, 5};;
	static final int Prop_1_transition_useiter[] = {5, 2, 5, 3, 5, 5};;

	boolean Map_UnsafeIteratorMonitor_Prop_1_Category_match = false;

	Map_UnsafeIteratorMonitor(long tau, CachedWeakReference RVMRef_m) {
		this.tau = tau;
		Prop_1_state = 0;

		this.RVMRef_m = RVMRef_m;
	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_getset(Map m, Collection c) {
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_m == null){
			Ref_m = new WeakReference(m);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_getset[Prop_1_state];
		Map_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_getiter(Collection c, Iterator i) {
		Map m = null;
		if(Ref_m != null){
			m = (Map)Ref_m.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_getiter[Prop_1_state];
		Map_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_modifyMap(Map m) {
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_m == null){
			Ref_m = new WeakReference(m);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_modifyMap[Prop_1_state];
		Map_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_modifyCol(Collection c) {
		Map m = null;
		if(Ref_m != null){
			m = (Map)Ref_m.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_modifyCol[Prop_1_state];
		Map_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_useiter(Iterator i) {
		Map m = null;
		if(Ref_m != null){
			m = (Map)Ref_m.get();
		}
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 4;

		Prop_1_state = Prop_1_transition_useiter[Prop_1_state];
		Map_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Map_UnsafeIterator has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_UnsafeIterator.html");
			RVMLogging.out.println(Level.CRITICAL, "The map was modified while an iteration over the set is in progress.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		Map_UnsafeIteratorMonitor_Prop_1_Category_match = false;
	}

	final CachedWeakReference RVMRef_m;
	// RVMRef_c was suppressed to reduce memory overhead
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [Collection c, Iterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [Map m, Iterator i]
	boolean alive_parameters_1 = true;
	//alive_parameters_2 = [Iterator i]
	boolean alive_parameters_2 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_1 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			break;
			case 2:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//getset
			//alive_c && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//getiter
			//alive_m && alive_i || alive_c && alive_i
			if(!(alive_parameters_1 || alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//modifyMap
			//alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//modifyCol
			//alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//useiter
			//alive_m && alive_i || alive_c && alive_i
			if(!(alive_parameters_1 || alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class Map_UnsynchronizedAddAllMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Map_UnsynchronizedAddAllMonitor ret = (Map_UnsynchronizedAddAllMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_t = null;

	static final int Prop_1_transition_enter[] = {2, 2, 3, 3};;
	static final int Prop_1_transition_modify[] = {3, 1, 3, 3};;
	static final int Prop_1_transition_leave[] = {3, 3, 1, 3};;

	volatile boolean Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Map_UnsynchronizedAddAllMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_enter(Map t, Map s) {
		{
		}
		if(Ref_t == null){
			Ref_t = new WeakReference(t);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_enter) ;
		this.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_modify(Map s) {
		Map t = null;
		if(Ref_t != null){
			t = (Map)Ref_t.get();
		}
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_modify) ;
		this.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_leave(Map t, Map s) {
		{
		}
		if(Ref_t == null){
			Ref_t = new WeakReference(t);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_leave) ;
		this.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Map_UnsynchronizedAddAll has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Map_UnsynchronizedAddAll.html");
			RVMLogging.out.println(Level.CRITICAL, "The source map of putAll() has been modified.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead
	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [Map s]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			break;
			case 1:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//enter
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//modify
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//leave
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Math_ContendedRandomMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Math_ContendedRandomMonitor ret = (Math_ContendedRandomMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread th = null;

	static final int Prop_1_transition_onethread_use[] = {0, 1};;
	static final int Prop_1_transition_otherthread_use[] = {1, 1};;

	volatile boolean Math_ContendedRandomMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Math_ContendedRandomMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 1) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 1) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 1) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_onethread_use(Thread t) {
		{
			if ( ! (this.th == null || this.th == t) ) {
				return false;
			}
			{
				this.th = t;
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_onethread_use) ;
		this.Math_ContendedRandomMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_otherthread_use(Thread t) {
		{
			if ( ! (this.th != t) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_otherthread_use) ;
		this.Math_ContendedRandomMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Math_ContendedRandom has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Math_ContendedRandom.html");
			RVMLogging.out.println(Level.CRITICAL, "Math.random() is used by multiple threads. If there is contention, we recommend you to use Random.nextDouble().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Math_ContendedRandomMonitor_Prop_1_Category_fail = false;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//onethread_use
			return;
			case 1:
			//otherthread_use
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 2;
	}

}
class MulticastSocket_TTLRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			MulticastSocket_TTLRawMonitor ret = (MulticastSocket_TTLRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private void check(String msg, int ttl) {
		if (0 <= ttl && ttl <= 255) return;
		RVMLogging.out.println(Level.CRITICAL, msg);
		RVMLogging.out.println(Level.CRITICAL, "The specified TTL " + ttl + " is out of range; [0 ~ 255]");
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_set1(byte ttl) {
		RVM_lastevent = 0;
		{
			this.check("Specification MulticastSocket_TTL has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/MulticastSocket_TTL.html", ttl & 0xff);
		}
		return true;
	}

	final boolean event_set2(int ttl) {
		RVM_lastevent = 1;
		{
			this.check("Specification MulticastSocket_TTL has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/MulticastSocket_TTL.html", ttl);
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//set1
			return;
			case 1:
			//set2
			return;
		}
		return;
	}

}
interface INavigableMap_ModificationMonitor extends IMonitor, IDisableHolder {
}

class NavigableMap_ModificationDisableHolder extends DisableHolder implements INavigableMap_ModificationMonitor {
	NavigableMap_ModificationDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class NavigableMap_ModificationMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, INavigableMap_ModificationMonitor {
	protected Object clone() {
		try {
			NavigableMap_ModificationMonitor ret = (NavigableMap_ModificationMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_c = null;
	WeakReference Ref_m1 = null;
	WeakReference Ref_m2 = null;
	WeakReference Ref_i = null;
	int Prop_1_state;
	static final int Prop_1_transition_create[] = {5, 6, 6, 6, 6, 6, 6};;
	static final int Prop_1_transition_getset1[] = {6, 6, 6, 6, 6, 3, 6};;
	static final int Prop_1_transition_getset2[] = {6, 6, 6, 6, 6, 3, 6};;
	static final int Prop_1_transition_getiter[] = {6, 6, 6, 2, 6, 6, 6};;
	static final int Prop_1_transition_modify1[] = {6, 6, 4, 3, 4, 5, 6};;
	static final int Prop_1_transition_modify2[] = {6, 6, 4, 3, 4, 5, 6};;
	static final int Prop_1_transition_modify3[] = {6, 6, 4, 3, 4, 6, 6};;
	static final int Prop_1_transition_useiter[] = {6, 6, 2, 6, 1, 6, 6};;

	boolean NavigableMap_ModificationMonitor_Prop_1_Category_match = false;

	NavigableMap_ModificationMonitor(long tau, CachedWeakReference RVMRef_m1, CachedWeakReference RVMRef_m2) {
		this.tau = tau;
		Prop_1_state = 0;

		this.RVMRef_m1 = RVMRef_m1;
		this.RVMRef_m2 = RVMRef_m2;
	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create(NavigableMap m1, NavigableMap m2) {
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_m1 == null){
			Ref_m1 = new WeakReference(m1);
		}
		if(Ref_m2 == null){
			Ref_m2 = new WeakReference(m2);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_getset1(NavigableMap m1, Collection c) {
		NavigableMap m2 = null;
		if(Ref_m2 != null){
			m2 = (NavigableMap)Ref_m2.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_m1 == null){
			Ref_m1 = new WeakReference(m1);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_getset1[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_getset2(NavigableMap m2, Collection c) {
		NavigableMap m1 = null;
		if(Ref_m1 != null){
			m1 = (NavigableMap)Ref_m1.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_m2 == null){
			Ref_m2 = new WeakReference(m2);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_getset2[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_getiter(Collection c, Iterator i) {
		NavigableMap m1 = null;
		if(Ref_m1 != null){
			m1 = (NavigableMap)Ref_m1.get();
		}
		NavigableMap m2 = null;
		if(Ref_m2 != null){
			m2 = (NavigableMap)Ref_m2.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_getiter[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_modify1(NavigableMap m1) {
		NavigableMap m2 = null;
		if(Ref_m2 != null){
			m2 = (NavigableMap)Ref_m2.get();
		}
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_m1 == null){
			Ref_m1 = new WeakReference(m1);
		}
		RVM_lastevent = 4;

		Prop_1_state = Prop_1_transition_modify1[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_modify2(NavigableMap m2) {
		NavigableMap m1 = null;
		if(Ref_m1 != null){
			m1 = (NavigableMap)Ref_m1.get();
		}
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_m2 == null){
			Ref_m2 = new WeakReference(m2);
		}
		RVM_lastevent = 5;

		Prop_1_state = Prop_1_transition_modify2[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_modify3(Collection c) {
		NavigableMap m1 = null;
		if(Ref_m1 != null){
			m1 = (NavigableMap)Ref_m1.get();
		}
		NavigableMap m2 = null;
		if(Ref_m2 != null){
			m2 = (NavigableMap)Ref_m2.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		RVM_lastevent = 6;

		Prop_1_state = Prop_1_transition_modify3[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final boolean Prop_1_event_useiter(Iterator i) {
		NavigableMap m1 = null;
		if(Ref_m1 != null){
			m1 = (NavigableMap)Ref_m1.get();
		}
		NavigableMap m2 = null;
		if(Ref_m2 != null){
			m2 = (NavigableMap)Ref_m2.get();
		}
		Collection c = null;
		if(Ref_c != null){
			c = (Collection)Ref_c.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 7;

		Prop_1_state = Prop_1_transition_useiter[Prop_1_state];
		NavigableMap_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 1;
		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification NavigableMap_Modification has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/NavigableMap_Modification.html");
			RVMLogging.out.println(Level.CRITICAL, "The NavigableMap was modified while an iteration over a collection view of a NavigableMap that shares the same storage.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		NavigableMap_ModificationMonitor_Prop_1_Category_match = false;
	}

	final CachedWeakReference RVMRef_m1;
	final CachedWeakReference RVMRef_m2;
	// RVMRef_c was suppressed to reduce memory overhead
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [NavigableMap m1, Collection c, Iterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [NavigableMap m2, Collection c, Iterator i]
	boolean alive_parameters_1 = true;
	//alive_parameters_2 = [Collection c, Iterator i]
	boolean alive_parameters_2 = true;
	//alive_parameters_3 = [NavigableMap m1, Iterator i]
	boolean alive_parameters_3 = true;
	//alive_parameters_4 = [NavigableMap m2, Iterator i]
	boolean alive_parameters_4 = true;
	//alive_parameters_5 = [Iterator i]
	boolean alive_parameters_5 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			alive_parameters_3 = false;
			break;
			case 1:
			alive_parameters_1 = false;
			alive_parameters_4 = false;
			break;
			case 2:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			break;
			case 3:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			alive_parameters_3 = false;
			alive_parameters_4 = false;
			alive_parameters_5 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			//alive_m1 && alive_c && alive_i || alive_m2 && alive_c && alive_i
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//getset1
			//alive_c && alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//getset2
			//alive_c && alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//getiter
			//alive_m1 && alive_i || alive_m2 && alive_i || alive_c && alive_i
			if(!(alive_parameters_3 || alive_parameters_4 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//modify1
			//alive_i
			if(!(alive_parameters_5)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//modify2
			//alive_i
			if(!(alive_parameters_5)){
				RVM_terminated = true;
				return;
			}
			break;

			case 6:
			//modify3
			//alive_i
			if(!(alive_parameters_5)){
				RVM_terminated = true;
				return;
			}
			break;

			case 7:
			//useiter
			//alive_m1 && alive_i || alive_m2 && alive_i || alive_c && alive_i
			if(!(alive_parameters_3 || alive_parameters_4 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 8;
	}

	public static int getNumberOfStates() {
		return 7;
	}

}
interface INavigableMap_UnsafeIteratorMonitor extends IMonitor, IDisableHolder {
}

class NavigableMap_UnsafeIteratorDisableHolder extends DisableHolder implements INavigableMap_UnsafeIteratorMonitor {
	NavigableMap_UnsafeIteratorDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class NavigableMap_UnsafeIteratorMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, INavigableMap_UnsafeIteratorMonitor {
	protected Object clone() {
		try {
			NavigableMap_UnsafeIteratorMonitor ret = (NavigableMap_UnsafeIteratorMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_s = null;
	WeakReference Ref_i = null;
	WeakReference Ref_m = null;
	int Prop_1_state;
	static final int Prop_1_transition_getset[] = {4, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_getiter[] = {5, 5, 5, 5, 3, 5};;
	static final int Prop_1_transition_modifyMap[] = {5, 1, 5, 1, 4, 5};;
	static final int Prop_1_transition_modifySet[] = {5, 1, 5, 1, 4, 5};;
	static final int Prop_1_transition_useiter[] = {5, 2, 5, 3, 5, 5};;

	boolean NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = false;

	NavigableMap_UnsafeIteratorMonitor(long tau, CachedWeakReference RVMRef_m) {
		this.tau = tau;
		Prop_1_state = 0;

		this.RVMRef_m = RVMRef_m;
	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_getset(NavigableMap m, Set s) {
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}
		if(Ref_m == null){
			Ref_m = new WeakReference(m);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_getset[Prop_1_state];
		NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_getiter(Set s, Iterator i) {
		NavigableMap m = null;
		if(Ref_m != null){
			m = (NavigableMap)Ref_m.get();
		}
		{
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_getiter[Prop_1_state];
		NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_modifyMap(NavigableMap m) {
		Set s = null;
		if(Ref_s != null){
			s = (Set)Ref_s.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_m == null){
			Ref_m = new WeakReference(m);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_modifyMap[Prop_1_state];
		NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_modifySet(Set s) {
		NavigableMap m = null;
		if(Ref_m != null){
			m = (NavigableMap)Ref_m.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_modifySet[Prop_1_state];
		NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_useiter(Iterator i) {
		NavigableMap m = null;
		if(Ref_m != null){
			m = (NavigableMap)Ref_m.get();
		}
		Set s = null;
		if(Ref_s != null){
			s = (Set)Ref_s.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 4;

		Prop_1_state = Prop_1_transition_useiter[Prop_1_state];
		NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification NavigableMap_UnsafeIterator has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/NavigableMap_UnsafeIterator.html");
			RVMLogging.out.println(Level.CRITICAL, "The NavigableMap was modified while an iteration over the set is in progress.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		NavigableMap_UnsafeIteratorMonitor_Prop_1_Category_match = false;
	}

	final CachedWeakReference RVMRef_m;
	// RVMRef_s was suppressed to reduce memory overhead
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [Set s, Iterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [NavigableMap m, Iterator i]
	boolean alive_parameters_1 = true;
	//alive_parameters_2 = [Iterator i]
	boolean alive_parameters_2 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_1 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			break;
			case 2:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//getset
			//alive_s && alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//getiter
			//alive_m && alive_i || alive_s && alive_i
			if(!(alive_parameters_1 || alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//modifyMap
			//alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//modifySet
			//alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//useiter
			//alive_m && alive_i || alive_s && alive_i
			if(!(alive_parameters_1 || alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
interface INavigableSet_ModificationMonitor extends IMonitor, IDisableHolder {
}

class NavigableSet_ModificationDisableHolder extends DisableHolder implements INavigableSet_ModificationMonitor {
	NavigableSet_ModificationDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class NavigableSet_ModificationMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, INavigableSet_ModificationMonitor {
	protected Object clone() {
		try {
			NavigableSet_ModificationMonitor ret = (NavigableSet_ModificationMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_i = null;
	WeakReference Ref_s1 = null;
	WeakReference Ref_s2 = null;
	int Prop_1_state;
	static final int Prop_1_transition_create[] = {1, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_getiter1[] = {5, 2, 5, 5, 5, 5};;
	static final int Prop_1_transition_getiter2[] = {5, 2, 5, 5, 5, 5};;
	static final int Prop_1_transition_modify1[] = {5, 1, 4, 5, 4, 5};;
	static final int Prop_1_transition_modify2[] = {5, 1, 4, 5, 4, 5};;
	static final int Prop_1_transition_useiter[] = {5, 5, 2, 5, 3, 5};;

	boolean NavigableSet_ModificationMonitor_Prop_1_Category_match = false;

	NavigableSet_ModificationMonitor(long tau, CachedWeakReference RVMRef_s1, CachedWeakReference RVMRef_s2) {
		this.tau = tau;
		Prop_1_state = 0;

		this.RVMRef_s1 = RVMRef_s1;
		this.RVMRef_s2 = RVMRef_s2;
	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create(NavigableSet s1, NavigableSet s2) {
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_s1 == null){
			Ref_s1 = new WeakReference(s1);
		}
		if(Ref_s2 == null){
			Ref_s2 = new WeakReference(s2);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create[Prop_1_state];
		NavigableSet_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_getiter1(NavigableSet s1, Iterator i) {
		NavigableSet s2 = null;
		if(Ref_s2 != null){
			s2 = (NavigableSet)Ref_s2.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_s1 == null){
			Ref_s1 = new WeakReference(s1);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_getiter1[Prop_1_state];
		NavigableSet_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_getiter2(NavigableSet s2, Iterator i) {
		NavigableSet s1 = null;
		if(Ref_s1 != null){
			s1 = (NavigableSet)Ref_s1.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_s2 == null){
			Ref_s2 = new WeakReference(s2);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_getiter2[Prop_1_state];
		NavigableSet_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_modify1(NavigableSet s1) {
		NavigableSet s2 = null;
		if(Ref_s2 != null){
			s2 = (NavigableSet)Ref_s2.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_s1 == null){
			Ref_s1 = new WeakReference(s1);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_modify1[Prop_1_state];
		NavigableSet_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_modify2(NavigableSet s2) {
		NavigableSet s1 = null;
		if(Ref_s1 != null){
			s1 = (NavigableSet)Ref_s1.get();
		}
		Iterator i = null;
		if(Ref_i != null){
			i = (Iterator)Ref_i.get();
		}
		{
		}
		if(Ref_s2 == null){
			Ref_s2 = new WeakReference(s2);
		}
		RVM_lastevent = 4;

		Prop_1_state = Prop_1_transition_modify2[Prop_1_state];
		NavigableSet_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final boolean Prop_1_event_useiter(Iterator i) {
		NavigableSet s1 = null;
		if(Ref_s1 != null){
			s1 = (NavigableSet)Ref_s1.get();
		}
		NavigableSet s2 = null;
		if(Ref_s2 != null){
			s2 = (NavigableSet)Ref_s2.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 5;

		Prop_1_state = Prop_1_transition_useiter[Prop_1_state];
		NavigableSet_ModificationMonitor_Prop_1_Category_match = Prop_1_state == 3;
		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification NavigableSet_Modification has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/NavigableSet_Modification.html");
			RVMLogging.out.println(Level.CRITICAL, "The NavigableSet was modified while an iteration over a NavigableSet that shares the same storage.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		NavigableSet_ModificationMonitor_Prop_1_Category_match = false;
	}

	final CachedWeakReference RVMRef_s1;
	final CachedWeakReference RVMRef_s2;
	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [NavigableSet s1, Iterator i]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [NavigableSet s2, Iterator i]
	boolean alive_parameters_1 = true;
	//alive_parameters_2 = [Iterator i]
	boolean alive_parameters_2 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_1 = false;
			break;
			case 2:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			//alive_s1 && alive_i || alive_s2 && alive_i
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//getiter1
			//alive_s1 && alive_i || alive_s2 && alive_i
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//getiter2
			//alive_s1 && alive_i || alive_s2 && alive_i
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//modify1
			//alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//modify2
			//alive_i
			if(!(alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//useiter
			//alive_s1 && alive_i || alive_s2 && alive_i
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class NetPermission_ActionsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			NetPermission_ActionsRawMonitor ret = (NetPermission_ActionsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct(String actions) {
		RVM_lastevent = 0;
		{
			if (actions != null) {
				RVMLogging.out.println(Level.CRITICAL, "Specification NetPermission_Actions has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/NetPermission_Actions.html");
				RVMLogging.out.println(Level.CRITICAL, "The 'actions' value should be null.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct
			return;
		}
		return;
	}

}
class NetPermission_NameRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			NetPermission_NameRawMonitor ret = (NetPermission_NameRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct(String name) {
		RVM_lastevent = 0;
		{
			boolean valid = true;
			for (int i = 0; i < name.length() - 1; ++i) {
				char c = name.charAt(i);
				if (c == '*') {
					valid = false;
					break;
				}
			}
			if (!valid) {
				RVMLogging.out.println(Level.CRITICAL, "Specification NetPermission_Name has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/NetPermission_Name.html");
				RVMLogging.out.println(Level.CRITICAL, "The target name " + name + " does not conform to the naming convention.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct
			return;
		}
		return;
	}

}
interface IObjectInput_CloseMonitor extends IMonitor, IDisableHolder {
}

class ObjectInput_CloseDisableHolder extends DisableHolder implements IObjectInput_CloseMonitor {
	ObjectInput_CloseDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class ObjectInput_CloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IObjectInput_CloseMonitor {
	protected Object clone() {
		try {
			ObjectInput_CloseMonitor ret = (ObjectInput_CloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_i = null;
	int Prop_1_state;
	static final int Prop_1_transition_create[] = {1, 2, 3, 3};;
	static final int Prop_1_transition_close[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_endProg[] = {0, 2, 3, 3};;

	boolean ObjectInput_CloseMonitor_Prop_1_Category_violation = false;

	ObjectInput_CloseMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create(ObjectInput i) {
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create[Prop_1_state];
		ObjectInput_CloseMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_close(ObjectInput i) {
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_close[Prop_1_state];
		ObjectInput_CloseMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_endProg() {
		ObjectInput i = null;
		if(Ref_i != null){
			i = (ObjectInput)Ref_i.get();
		}
		{
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_endProg[Prop_1_state];
		ObjectInput_CloseMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ObjectInput_Close has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ObjectInput_Close.html");
			RVMLogging.out.println(Level.CRITICAL, "close() was not called.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		ObjectInput_CloseMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [ObjectInput i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			return;
			case 1:
			//close
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//endProg
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
interface IObjectOutput_CloseMonitor extends IMonitor, IDisableHolder {
}

class ObjectOutput_CloseDisableHolder extends DisableHolder implements IObjectOutput_CloseMonitor {
	ObjectOutput_CloseDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class ObjectOutput_CloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IObjectOutput_CloseMonitor {
	protected Object clone() {
		try {
			ObjectOutput_CloseMonitor ret = (ObjectOutput_CloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_o = null;
	int Prop_1_state;
	static final int Prop_1_transition_create[] = {1, 2, 3, 3};;
	static final int Prop_1_transition_close[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_endProg[] = {0, 2, 3, 3};;

	boolean ObjectOutput_CloseMonitor_Prop_1_Category_violation = false;

	ObjectOutput_CloseMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create(ObjectOutput o) {
		{
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create[Prop_1_state];
		ObjectOutput_CloseMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_close(ObjectOutput o) {
		{
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_close[Prop_1_state];
		ObjectOutput_CloseMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_endProg() {
		ObjectOutput o = null;
		if(Ref_o != null){
			o = (ObjectOutput)Ref_o.get();
		}
		{
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_endProg[Prop_1_state];
		ObjectOutput_CloseMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ObjectOutput_Close has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ObjectOutput_Close.html");
			RVMLogging.out.println(Level.CRITICAL, "close() was not called.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		ObjectOutput_CloseMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_o was suppressed to reduce memory overhead

	//alive_parameters_0 = [ObjectOutput o]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			return;
			case 1:
			//close
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//endProg
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
interface IObjectStreamClass_InitializeMonitor extends IMonitor, IDisableHolder {
}

class ObjectStreamClass_InitializeDisableHolder extends DisableHolder implements IObjectStreamClass_InitializeMonitor {
	ObjectStreamClass_InitializeDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class ObjectStreamClass_InitializeMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IObjectStreamClass_InitializeMonitor {
	protected Object clone() {
		try {
			ObjectStreamClass_InitializeMonitor ret = (ObjectStreamClass_InitializeMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_c = null;
	int Prop_1_state;
	static final int Prop_1_transition_create[] = {1, 2, 3, 3};;
	static final int Prop_1_transition_init[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_endProg[] = {0, 2, 3, 3};;

	boolean ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation = false;

	ObjectStreamClass_InitializeMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create(ObjectStreamClass c) {
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create[Prop_1_state];
		ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_init(ObjectStreamClass c) {
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_init[Prop_1_state];
		ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_endProg() {
		ObjectStreamClass c = null;
		if(Ref_c != null){
			c = (ObjectStreamClass)Ref_c.get();
		}
		{
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_endProg[Prop_1_state];
		ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ObjectStreamClass_Initialize has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ObjectStreamClass_Initialize.html");
			RVMLogging.out.println(Level.CRITICAL, "An ObjectStreamClass object was instantiated, but was not initialized using initProxy(), initNonProxy() or readNonProxy()");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [ObjectStreamClass c]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			return;
			case 1:
			//init
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//endProg
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Object_MonitorOwnerRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Object_MonitorOwnerRawMonitor ret = (Object_MonitorOwnerRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_bad_notify(Object o) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Object_MonitorOwner has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Object_MonitorOwner.html");
			RVMLogging.out.println(Level.CRITICAL, "notify() and notifyAll() can be called only by the owner of this object's monitor.");
		}
		return true;
	}

	final boolean event_bad_wait(Object o) {
		RVM_lastevent = 1;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Object_MonitorOwner has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Object_MonitorOwner.html");
			RVMLogging.out.println(Level.CRITICAL, "wait() can be called only by the owner of this object's monitor.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//bad_notify
			return;
			case 1:
			//bad_wait
			return;
		}
		return;
	}

}
class Object_NoCloneRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Object_NoCloneRawMonitor ret = (Object_NoCloneRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_clone(Object o) {
		RVM_lastevent = 0;
		{
			if ( ! (o.getClass().getCanonicalName().equals("java.lang.Object")) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification Object_NoClone has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Object_NoClone.html");
				RVMLogging.out.println(Level.CRITICAL, "Using the clone method on an Object instance will result in throwing an exception.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//clone
			return;
		}
		return;
	}

}
class OutputStream_ManipulateAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			OutputStream_ManipulateAfterCloseMonitor ret = (OutputStream_ManipulateAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_manipulate[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_close[] = {1, 1, 3, 3};;

	volatile boolean OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	OutputStream_ManipulateAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_manipulate(OutputStream o) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_manipulate) ;
		this.OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(OutputStream o) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification OutputStream_ManipulateAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/OutputStream_ManipulateAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "write() or flush() was invoked after close().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_o was suppressed to reduce memory overhead

	//alive_parameters_0 = [OutputStream o]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//manipulate
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
interface IPasswordAuthentication_FillZeroPasswordMonitor extends IMonitor, IDisableHolder {
}

class PasswordAuthentication_FillZeroPasswordDisableHolder extends DisableHolder implements IPasswordAuthentication_FillZeroPasswordMonitor {
	PasswordAuthentication_FillZeroPasswordDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class PasswordAuthentication_FillZeroPasswordMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IPasswordAuthentication_FillZeroPasswordMonitor {
	protected Object clone() {
		try {
			PasswordAuthentication_FillZeroPasswordMonitor ret = (PasswordAuthentication_FillZeroPasswordMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_pwd = null;
	int Prop_1_state;
	static final int Prop_1_transition_read[] = {1, 2, 3, 3};;
	static final int Prop_1_transition_obliterate[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_endProg[] = {0, 2, 3, 3};;

	boolean PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation = false;

	PasswordAuthentication_FillZeroPasswordMonitor(long tau) {
		this.tau = tau;
		Prop_1_state = 0;

	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_read(Object pwd) {
		{
		}
		if(Ref_pwd == null){
			Ref_pwd = new WeakReference(pwd);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_read[Prop_1_state];
		PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_obliterate(Object pwd) {
		{
		}
		if(Ref_pwd == null){
			Ref_pwd = new WeakReference(pwd);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_obliterate[Prop_1_state];
		PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final boolean Prop_1_event_endProg() {
		Object pwd = null;
		if(Ref_pwd != null){
			pwd = (Object)Ref_pwd.get();
		}
		{
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_endProg[Prop_1_state];
		PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation = Prop_1_state == 2;
		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification PasswordAuthentication_FillZeroPassword has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PasswordAuthentication_FillZeroPassword.html");
			RVMLogging.out.println(Level.CRITICAL, "The password, obtained from PasswordAuthentication.getPassword(), has never been obliterated.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_pwd was suppressed to reduce memory overhead

	//alive_parameters_0 = [Object pwd]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//read
			return;
			case 1:
			//obliterate
			//alive_pwd
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//endProg
			//alive_pwd
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class PipedInputStream_UnconnectedReadMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			PipedInputStream_UnconnectedReadMonitor ret = (PipedInputStream_UnconnectedReadMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {2, 3, 3, 3};;
	static final int Prop_1_transition_create_oi[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_create_io[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_connect1[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_connect2[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_read[] = {3, 1, 3, 3};;

	volatile boolean PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	PipedInputStream_UnconnectedReadMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(PipedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_create_oi(PipedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_oi) ;
		this.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_create_io(PipedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_create_io) ;
		this.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_connect1(PipedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_connect1) ;
		this.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_connect2(PipedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_connect2) ;
		this.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_read(PipedInputStream i) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_read) ;
		this.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification PipedInputStream_UnconnectedRead has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PipedInputStream_UnconnectedRead.html");
			RVMLogging.out.println(Level.CRITICAL, "An unconnected PipedInputStream performed read() operation.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [PipedInputStream i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_oi
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//create_io
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//connect1
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//connect2
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//read
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class PipedOutputStream_UnconnectedWriteMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			PipedOutputStream_UnconnectedWriteMonitor ret = (PipedOutputStream_UnconnectedWriteMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {2, 3, 3, 3};;
	static final int Prop_1_transition_create_io[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_create_oi[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_connect1[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_connect2[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_write[] = {3, 1, 3, 3};;

	volatile boolean PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	PipedOutputStream_UnconnectedWriteMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(PipedOutputStream o) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_create_io(PipedOutputStream o) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_io) ;
		this.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_create_oi(PipedOutputStream o) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_create_oi) ;
		this.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_connect1(PipedOutputStream o) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_connect1) ;
		this.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_connect2(PipedOutputStream o) {
		{
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_connect2) ;
		this.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_write(PipedOutputStream o) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_write) ;
		this.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification PipedOutputStream_UnconnectedWrite has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PipedOutputStream_UnconnectedWrite.html");
			RVMLogging.out.println(Level.CRITICAL, "An unconnected PipedOutputStream performed write() operation.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_o was suppressed to reduce memory overhead

	//alive_parameters_0 = [PipedOutputStream o]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_io
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//create_oi
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//connect1
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//connect2
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//write
			//alive_o
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
interface IPipedStream_SingleThreadMonitor extends IMonitor, IDisableHolder {
}

class PipedStream_SingleThreadDisableHolder extends DisableHolder implements IPipedStream_SingleThreadMonitor {
	PipedStream_SingleThreadDisableHolder(long tau) {
		super(tau);
	}

	@Override
	public final boolean isTerminated() {
		return false;
	}

	@Override
	public int getLastEvent() {
		return -1;
	}

	@Override
	public int getState() {
		return -1;
	}

}

class PipedStream_SingleThreadMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject, IPipedStream_SingleThreadMonitor {
	protected Object clone() {
		try {
			PipedStream_SingleThreadMonitor ret = (PipedStream_SingleThreadMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_t = null;
	WeakReference Ref_i = null;
	WeakReference Ref_o = null;
	int Prop_1_state;
	static final int Prop_1_transition_create1[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_create2[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_create3[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_create4[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_write[] = {4, 2, 2, 4, 4};;
	static final int Prop_1_transition_read[] = {4, 3, 4, 3, 4};;

	boolean PipedStream_SingleThreadMonitor_Prop_1_Category_fail = false;

	PipedStream_SingleThreadMonitor(long tau, CachedWeakReference RVMRef_i, CachedWeakReference RVMRef_o) {
		this.tau = tau;
		Prop_1_state = 0;

		this.RVMRef_i = RVMRef_i;
		this.RVMRef_o = RVMRef_o;
	}

	@Override
	public final int getState() {
		return Prop_1_state;
	}

	private final long tau;
	private long disable = -1;

	@Override
	public final long getTau() {
		return this.tau;
	}

	@Override
	public final long getDisable() {
		return this.disable;
	}

	@Override
	public final void setDisable(long value) {
		this.disable = value;
	}

	final boolean Prop_1_event_create1(PipedOutputStream o, PipedInputStream i) {
		Thread t = null;
		if(Ref_t != null){
			t = (Thread)Ref_t.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 0;

		Prop_1_state = Prop_1_transition_create1[Prop_1_state];
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = Prop_1_state == 4;
		return true;
	}

	final boolean Prop_1_event_create2(PipedInputStream i, PipedOutputStream o) {
		Thread t = null;
		if(Ref_t != null){
			t = (Thread)Ref_t.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 1;

		Prop_1_state = Prop_1_transition_create2[Prop_1_state];
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = Prop_1_state == 4;
		return true;
	}

	final boolean Prop_1_event_create3(PipedInputStream i, PipedOutputStream o) {
		Thread t = null;
		if(Ref_t != null){
			t = (Thread)Ref_t.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 2;

		Prop_1_state = Prop_1_transition_create3[Prop_1_state];
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = Prop_1_state == 4;
		return true;
	}

	final boolean Prop_1_event_create4(PipedOutputStream o, PipedInputStream i) {
		Thread t = null;
		if(Ref_t != null){
			t = (Thread)Ref_t.get();
		}
		{
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 3;

		Prop_1_state = Prop_1_transition_create4[Prop_1_state];
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = Prop_1_state == 4;
		return true;
	}

	final boolean Prop_1_event_write(PipedOutputStream o, Thread t) {
		PipedInputStream i = null;
		if(Ref_i != null){
			i = (PipedInputStream)Ref_i.get();
		}
		{
		}
		if(Ref_t == null){
			Ref_t = new WeakReference(t);
		}
		if(Ref_o == null){
			Ref_o = new WeakReference(o);
		}
		RVM_lastevent = 4;

		Prop_1_state = Prop_1_transition_write[Prop_1_state];
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = Prop_1_state == 4;
		return true;
	}

	final boolean Prop_1_event_read(PipedInputStream i, Thread t) {
		PipedOutputStream o = null;
		if(Ref_o != null){
			o = (PipedOutputStream)Ref_o.get();
		}
		{
		}
		if(Ref_t == null){
			Ref_t = new WeakReference(t);
		}
		if(Ref_i == null){
			Ref_i = new WeakReference(i);
		}
		RVM_lastevent = 5;

		Prop_1_state = Prop_1_transition_read[Prop_1_state];
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = Prop_1_state == 4;
		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification PipedStream_SingleThread has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PipedStream_SingleThread.html");
			RVMLogging.out.println(Level.CRITICAL, "A single thread attempted to use both a PipedInputStream instance and a PipedOutputStream instance, which may deadlock the thread.");
		}

	}

	final void reset() {
		RVM_lastevent = -1;
		Prop_1_state = 0;
		PipedStream_SingleThreadMonitor_Prop_1_Category_fail = false;
	}

	final CachedWeakReference RVMRef_i;
	final CachedWeakReference RVMRef_o;
	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [PipedInputStream i, PipedOutputStream o]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [PipedInputStream i, Thread t]
	boolean alive_parameters_1 = true;
	//alive_parameters_2 = [PipedOutputStream o, Thread t]
	boolean alive_parameters_2 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_2 = false;
			break;
			case 2:
			alive_parameters_1 = false;
			alive_parameters_2 = false;
			break;
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create1
			//alive_i && alive_o || alive_i && alive_t || alive_o && alive_t
			if(!(alive_parameters_0 || alive_parameters_1 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create2
			//alive_i && alive_o || alive_i && alive_t || alive_o && alive_t
			if(!(alive_parameters_0 || alive_parameters_1 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//create3
			//alive_i && alive_o || alive_i && alive_t || alive_o && alive_t
			if(!(alive_parameters_0 || alive_parameters_1 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//create4
			//alive_i && alive_o || alive_i && alive_t || alive_o && alive_t
			if(!(alive_parameters_0 || alive_parameters_1 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//write
			//alive_i && alive_o || alive_i && alive_t || alive_o && alive_t
			if(!(alive_parameters_0 || alive_parameters_1 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//read
			//alive_i && alive_o || alive_i && alive_t || alive_o && alive_t
			if(!(alive_parameters_0 || alive_parameters_1 || alive_parameters_2)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class PriorityQueue_NonComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			PriorityQueue_NonComparableRawMonitor ret = (PriorityQueue_NonComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_insertnull(Object e) {
		RVM_lastevent = 0;
		{
			if (!(e instanceof Comparable)) {
				RVMLogging.out.println(Level.CRITICAL, "Specification PriorityQueue_NonComparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PriorityQueue_NonComparable.html");
				RVMLogging.out.println(Level.CRITICAL, "PriorityQueue does not permit non-comparable objects.");
			}
		}
		return true;
	}

	final boolean event_insertnull(Collection c) {
		RVM_lastevent = 1;
		{
			for (Object elem : c) {
				if (!(elem instanceof Comparable)) {
					RVMLogging.out.println(Level.CRITICAL, "Specification PriorityQueue_NonComparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PriorityQueue_NonComparable.html");
					RVMLogging.out.println(Level.CRITICAL, "PriorityQueue does not permit non-comparable objects.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//insertnull
			return;
			case 1:
			//insertnull
			return;
		}
		return;
	}

}
class PriorityQueue_NonNullRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			PriorityQueue_NonNullRawMonitor ret = (PriorityQueue_NonNullRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_insertnull(Object e) {
		RVM_lastevent = 0;
		{
			if ( ! (e == null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification PriorityQueue_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PriorityQueue_NonNull.html");
				RVMLogging.out.println(Level.CRITICAL, "PriorityQueue does not permit null.");
			}
		}
		return true;
	}

	final boolean event_insertnull(Collection c) {
		RVM_lastevent = 1;
		{
			for (Object elem : c) {
				if (elem == null) {
					RVMLogging.out.println(Level.CRITICAL, "Specification PriorityQueue_NonNull has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PriorityQueue_NonNull.html");
					RVMLogging.out.println(Level.CRITICAL, "PriorityQueue does not permit null.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//insertnull
			return;
			case 1:
			//insertnull
			return;
		}
		return;
	}

}
class ProcessBuilder_NullKeyOrValueMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ProcessBuilder_NullKeyOrValueMonitor ret = (ProcessBuilder_NullKeyOrValueMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_createMap[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_nullPut[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_nullQuery[] = {3, 2, 2, 3};;

	volatile boolean ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ProcessBuilder_NullKeyOrValueMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_createMap(Map map) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_createMap) ;
		this.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_nullPut(Map map, Object key, Object value) {
		{
			if ( ! (key == null || value == null) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_nullPut) ;
		this.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_nullPut(Map map, Map map2) {
		{
			if ( ! (map2.containsKey(null) || map2.containsValue(null)) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_nullPut) ;
		this.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_nullQuery(Map map, Object o) {
		{
			if ( ! (o == null) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_nullQuery) ;
		this.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification ProcessBuilder_NullKeyOrValue has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ProcessBuilder_NullKeyOrValue.html");
			RVMLogging.out.println(Level.WARNING, "null key or value is not permitted in the map from ProcessBuilder.environment()");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_map was suppressed to reduce memory overhead

	//alive_parameters_0 = [Map map]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//createMap
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//nullPut
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//nullPut
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//nullQuery
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class ProcessBuilder_ThreadSafeMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ProcessBuilder_ThreadSafeMonitor ret = (ProcessBuilder_ThreadSafeMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread owner = null;

	static final int Prop_1_transition_safe_oper[] = {0, 1};;
	static final int Prop_1_transition_unsafe_oper[] = {1, 1};;

	volatile boolean ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	ProcessBuilder_ThreadSafeMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 1) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 1) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 1) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_safe_oper(ProcessBuilder p, Thread t) {
		{
			if ( ! (this.owner == null || this.owner == t) ) {
				return false;
			}
			{
				this.owner = t;
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_safe_oper) ;
		this.ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_unsafe_oper(ProcessBuilder p, Thread t) {
		{
			if ( ! (this.owner != null && this.owner != t) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unsafe_oper) ;
		this.ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ProcessBuilder_ThreadSafe has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ProcessBuilder_ThreadSafe.html");
			RVMLogging.out.println(Level.CRITICAL, "More than two threads attempted to use a ProcessBuilder instance, which may lead to a race condition");
			this.reset();
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_p was suppressed to reduce memory overhead

	//alive_parameters_0 = [ProcessBuilder p]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//safe_oper
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//unsafe_oper
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 2;
	}

}
class Properties_ManipulateAfterLoadMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Properties_ManipulateAfterLoadMonitor ret = (Properties_ManipulateAfterLoadMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_manipulate[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_close[] = {2, 3, 2, 3};;

	volatile boolean Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Properties_ManipulateAfterLoadMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_manipulate(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_manipulate) ;
		this.Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_close(InputStream i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Properties_ManipulateAfterLoad has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Properties_ManipulateAfterLoad.html");
			RVMLogging.out.println(Level.CRITICAL, "read(), available(), reset() or skip() was invoked after Properties.loadFromXML() closes the stream.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [InputStream i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//manipulate
			return;
			case 1:
			//close
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class PushbackInputStream_UnreadAheadLimitMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			PushbackInputStream_UnreadAheadLimitMonitor ret = (PushbackInputStream_UnreadAheadLimitMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	int limit;

	int pos;

	static final int Prop_1_transition_create[] = {1, 2, 2};;
	static final int Prop_1_transition_read1[] = {2, 1, 2};;
	static final int Prop_1_transition_read2[] = {2, 1, 2};;
	static final int Prop_1_transition_safeunread[] = {2, 1, 2};;
	static final int Prop_1_transition_unsafeunread[] = {2, 2, 2};;

	volatile boolean PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	PushbackInputStream_UnreadAheadLimitMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(PushbackInputStream p) {
		{
			this.limit = 1;
			this.pos = 1;
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_create(int size, PushbackInputStream p) {
		{
			this.limit = size;
			this.pos = size;
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_read1(PushbackInputStream p, int r) {
		{
			if (this.pos < this.limit) this.pos++;
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_read1) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_read2(PushbackInputStream p, int n) {
		{
			int avail = this.limit - this.pos;
			if (avail > 0) {
				if (n < avail) avail = n;
				this.pos += avail;
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_read2) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_safeunread(PushbackInputStream p) {
		{
			if ( ! (pos > 0) ) {
				return false;
			}
			{
				--this.pos;
			}
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_safeunread) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_unsafeunread(PushbackInputStream p) {
		{
			if ( ! (pos == 0) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_unsafeunread) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_safeunread(PushbackInputStream p, Object b) {
		{
			if ( ! (pos >= ((byte[]) b).length) ) {
				return false;
			}
			{
				this.pos -= ((byte[]) b).length;
			}
		}

		int nextstate = this.handleEvent(6, Prop_1_transition_safeunread) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_unsafeunread(PushbackInputStream p, Object b) {
		{
			if ( ! (pos < ((byte[]) b).length) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(7, Prop_1_transition_unsafeunread) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_safeunread(PushbackInputStream p, int len) {
		{
			if ( ! (pos >= len) ) {
				return false;
			}
			{
				this.pos -= len;
			}
		}

		int nextstate = this.handleEvent(8, Prop_1_transition_safeunread) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_unsafeunread(PushbackInputStream p, int len) {
		{
			if ( ! (pos < len) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(9, Prop_1_transition_unsafeunread) ;
		this.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification PushbackInputStream_UnreadAheadLimit has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/PushbackInputStream_UnreadAheadLimit.html");
			RVMLogging.out.println(Level.CRITICAL, "unread() cannot be performed because the internal pushback buffer is full.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_p was suppressed to reduce memory overhead

	//alive_parameters_0 = [PushbackInputStream p]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//read1
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//read2
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//safeunread
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//unsafeunread
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 6:
			//safeunread
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 7:
			//unsafeunread
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 8:
			//safeunread
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 9:
			//unsafeunread
			//alive_p
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 10;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class RandomAccessFile_ManipulateAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			RandomAccessFile_ManipulateAfterCloseMonitor ret = (RandomAccessFile_ManipulateAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_manipulate[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_close[] = {1, 1, 3, 3};;

	volatile boolean RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	RandomAccessFile_ManipulateAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_manipulate(RandomAccessFile f) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_manipulate) ;
		this.RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(RandomAccessFile f) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification RandomAccessFile_ManipulateAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/RandomAccessFile_ManipulateAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "A closed random access file cannot perform input or output operations.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_f was suppressed to reduce memory overhead

	//alive_parameters_0 = [RandomAccessFile f]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//manipulate
			//alive_f
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_f
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Random_OverrideNextRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Random_OverrideNextRawMonitor ret = (Random_OverrideNextRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				try {
					Method nextmethod = klass.getDeclaredMethod("next", Integer.class);
				} catch (NoSuchMethodException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Random_OverrideNext has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Random_OverrideNext.html");
					RVMLogging.out.println(Level.CRITICAL, klass.getName() + " does not override int next(int bits).");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class Reader_ManipulateAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Reader_ManipulateAfterCloseMonitor ret = (Reader_ManipulateAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_manipulate[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_close[] = {1, 1, 3, 3};;

	volatile boolean Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Reader_ManipulateAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_manipulate(Reader r) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_manipulate) ;
		this.Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(Reader r) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Reader_ManipulateAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Reader_ManipulateAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "read(), ready(), mark(), reset() or skip() was invoked after close().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_r was suppressed to reduce memory overhead

	//alive_parameters_0 = [Reader r]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//manipulate
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Reader_MarkResetRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Reader_MarkResetRawMonitor ret = (Reader_MarkResetRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_mark(Reader r) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Reader_MarkReset has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Reader_MarkReset.html");
			RVMLogging.out.println(Level.CRITICAL, "PushbackReader, InputStreamReader, FileReader and PipedReader do not support mark() and reset().");
		}
		return true;
	}

	final boolean event_reset(Reader r) {
		RVM_lastevent = 1;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Reader_MarkReset has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Reader_MarkReset.html");
			RVMLogging.out.println(Level.CRITICAL, "PushbackReader, InputStreamReader, FileReader and PipedReader do not support mark() and reset().");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//mark
			return;
			case 1:
			//reset
			return;
		}
		return;
	}

}
class Reader_ReadAheadLimitMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Reader_ReadAheadLimitMonitor ret = (Reader_ReadAheadLimitMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	int limit = 0;

	int rest = 0;

	String LOC = null;

	static final int Prop_1_transition_mark[] = {0, 2, 2};;
	static final int Prop_1_transition_read1[] = {0, 2, 2};;
	static final int Prop_1_transition_readn[] = {0, 2, 2};;
	static final int Prop_1_transition_badreset[] = {1, 1, 2};;
	static final int Prop_1_transition_goodreset[] = {0, 2, 2};;

	volatile boolean Reader_ReadAheadLimitMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Reader_ReadAheadLimitMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_mark(Reader r, int l) {
		{
			this.limit = l;
			this.rest = l;
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_mark) ;
		this.Reader_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_read1(Reader r, int n) {
		{
			if (n != -1) {
				this.rest -= 1;
				if (this.rest < 0) this.LOC = com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode();
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_read1) ;
		this.Reader_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_readn(Reader r, int n) {
		{
			if (n != -1) {
				this.rest -= n;
				if (this.rest < 0) this.LOC = com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode();
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_readn) ;
		this.Reader_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_badreset(Reader r) {
		{
			if ( ! (rest < 0) ) {
				return false;
			}
			{
				this.limit = 0;
				this.rest = 0;
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_badreset) ;
		this.Reader_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_goodreset(Reader r) {
		{
			if ( ! (rest >= 0) ) {
				return false;
			}
			{
				this.rest = this.limit;
			}
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_goodreset) ;
		this.Reader_ReadAheadLimitMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Reader_ReadAheadLimit has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Reader_ReadAheadLimit.html");
			RVMLogging.out.println(Level.CRITICAL, "The position mark has been invalidated.");
			if (this.LOC != null) {
				RVMLogging.out.println(Level.CRITICAL, "read() at line " + this.LOC + " invalidated the mark.");
			}
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Reader_ReadAheadLimitMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_r was suppressed to reduce memory overhead

	//alive_parameters_0 = [Reader r]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//mark
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//read1
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//readn
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//badreset
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//goodreset
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class Reader_UnmarkedResetMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Reader_UnmarkedResetMonitor ret = (Reader_UnmarkedResetMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_mark[] = {1, 1, 2};;
	static final int Prop_1_transition_reset[] = {2, 1, 2};;

	volatile boolean Reader_UnmarkedResetMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Reader_UnmarkedResetMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_mark(Reader r) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_mark) ;
		this.Reader_UnmarkedResetMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_reset(Reader r) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_reset) ;
		this.Reader_UnmarkedResetMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Reader_UnmarkedReset has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Reader_UnmarkedReset.html");
			RVMLogging.out.println(Level.CRITICAL, "BufferedReader and LineNumberReader allow reset() only after mark() has been invoked.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Reader_UnmarkedResetMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_r was suppressed to reduce memory overhead

	//alive_parameters_0 = [Reader r]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//mark
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//reset
			//alive_r
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class ResourceBundleControl_MutateFormatListMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ResourceBundleControl_MutateFormatListMonitor ret = (ResourceBundleControl_MutateFormatListMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {2, 3, 3, 3};;
	static final int Prop_1_transition_mutate[] = {3, 3, 1, 3};;

	volatile boolean ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ResourceBundleControl_MutateFormatListMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(List l) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_mutate(List l) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_mutate) ;
		this.ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ResourceBundleControl_MutateFormatList has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ResourceBundleControl_MutateFormatList.html");
			RVMLogging.out.println(Level.CRITICAL, "The list returned by ResourceBundle.Control.getFormats() or getCandidateLocales() was mutated.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_l was suppressed to reduce memory overhead

	//alive_parameters_0 = [List l]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_l
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//mutate
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Runnable_OverrideRunRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Runnable_OverrideRunRawMonitor ret = (Runnable_OverrideRunRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			org.aspectj.lang.Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				Method m;
				try {
					m = klass.getMethod("run");
				} catch (NoSuchMethodException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Runnable_OverrideRun has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Runnable_OverrideRun.html");
					RVMLogging.out.println(Level.CRITICAL, "A Runnable class should provide/override run() method.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class RuntimePermission_NullActionRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			RuntimePermission_NullActionRawMonitor ret = (RuntimePermission_NullActionRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_runtimeperm(String name, String actions, RuntimePermission r) {
		RVM_lastevent = 0;
		{
			if ( ! (actions != null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification RuntimePermission_NullAction has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/RuntimePermission_NullAction.html");
				RVMLogging.out.println(Level.CRITICAL, "The actions string should be null.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_runtimeperm
			return;
		}
		return;
	}

}
class RuntimePermission_PermNameRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			RuntimePermission_PermNameRawMonitor ret = (RuntimePermission_PermNameRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_runtimeperm(String name, RuntimePermission r) {
		RVM_lastevent = 0;
		{
			int index = name.indexOf("*");
			if (index != -1 && name.length() > 1) {
				if (index != name.length() - 1) {
					RVMLogging.out.println(Level.CRITICAL, "Specification RuntimePermission_PermName has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/RuntimePermission_PermName.html");
					RVMLogging.out.println(Level.CRITICAL, "The permission name for RuntimePermission is invalid");
				} else if (name.charAt(index - 1) != '.') {
					RVMLogging.out.println(Level.CRITICAL, "Specification RuntimePermission_PermName has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/RuntimePermission_PermName.html");
					RVMLogging.out.println(Level.CRITICAL, "The permission name for RuntimePermission is invalid");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_runtimeperm
			return;
		}
		return;
	}

}
class Scanner_ManipulateAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Scanner_ManipulateAfterCloseMonitor ret = (Scanner_ManipulateAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_c = null;
	WeakReference Ref_s = null;

	static final int Prop_1_transition_create[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_close[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_manipulate[] = {4, 4, 4, 1, 4};;

	volatile boolean Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Scanner_ManipulateAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(Closeable c, Scanner s) {
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_close(Scanner s) {
		Closeable c = null;
		if(Ref_c != null){
			c = (Closeable)Ref_c.get();
		}
		{
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_manipulate(Closeable c) {
		Scanner s = null;
		if(Ref_s != null){
			s = (Scanner)Ref_s.get();
		}
		{
		}
		if(Ref_c == null){
			Ref_c = new WeakReference(c);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_manipulate) ;
		this.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Scanner_ManipulateAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Scanner_ManipulateAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "The source stream or reader was used after the Scanner had been closed.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_s was suppressed to reduce memory overhead
	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [Scanner s, Closeable c]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [Closeable c]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_s && alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_c
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//manipulate
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Scanner_SearchAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Scanner_SearchAfterCloseMonitor ret = (Scanner_SearchAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_close[] = {1, 1, 3, 3};;
	static final int Prop_1_transition_search[] = {3, 2, 2, 3};;

	volatile boolean Scanner_SearchAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Scanner_SearchAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_close(Scanner s) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_close) ;
		this.Scanner_SearchAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_search(Scanner s) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_search) ;
		this.Scanner_SearchAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Scanner_SearchAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Scanner_SearchAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "A closed Scanner object attempted to perform search operations.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Scanner_SearchAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [Scanner s]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//close
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//search
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class SecurityManager_PermissionMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			SecurityManager_PermissionMonitor ret = (SecurityManager_PermissionMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_get[] = {1, 1, 2};;
	static final int Prop_1_transition_check[] = {2, 1, 2};;

	volatile boolean SecurityManager_PermissionMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	SecurityManager_PermissionMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_get(SecurityManager manager, Object context) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_get) ;
		this.SecurityManager_PermissionMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_check(SecurityManager manager, Object context) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_check) ;
		this.SecurityManager_PermissionMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification SecurityManager_Permission has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SecurityManager_Permission.html");
			RVMLogging.out.println(Level.CRITICAL, "The context argument to checkPermission must come from getSecurityContext method call.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		SecurityManager_PermissionMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_manager was suppressed to reduce memory overhead
	// RVMRef_context was suppressed to reduce memory overhead

	//alive_parameters_0 = [SecurityManager manager, Object context]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//get
			//alive_manager && alive_context
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//check
			//alive_manager && alive_context
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class Serializable_NoArgConstructorRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Serializable_NoArgConstructorRawMonitor ret = (Serializable_NoArgConstructorRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private String getPackageName(Class cl) {
		String s = cl.getName();
		int i = s.lastIndexOf('[');
		if (i >= 0) s = s.substring(i + 2);
		i = s.lastIndexOf('.');
		return (i >= 0) ? s.substring(0, i) : "";
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			org.aspectj.lang.Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				Class nonserialzable = klass;
				while (Serializable.class.isAssignableFrom(nonserialzable)) {
					nonserialzable = nonserialzable.getSuperclass();
					if (nonserialzable == null) break;
				}
				if (nonserialzable != null) {
					boolean samepackage = klass.getClassLoader() == nonserialzable.getClassLoader() && getPackageName(klass).equals(getPackageName(nonserialzable));
					boolean inaccessible = true;
					try {
						Constructor ctor = nonserialzable.getDeclaredConstructor((Class[]) null);
						int mod = ctor.getModifiers();
						inaccessible = (mod & Modifier.PRIVATE) != 0 || ((mod & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0 && !samepackage);
					} catch (NoSuchMethodException e) {
					}
					if (inaccessible) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Serializable_NoArgConstructor has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Serializable_NoArgConstructor.html");
						RVMLogging.out.println(Level.CRITICAL, "The superclass of " + klass.getName() + " does not have an accessible no-arg constructor.");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class Serializable_UIDRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Serializable_UIDRawMonitor ret = (Serializable_UIDRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			org.aspectj.lang.Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				try {
					Field field = klass.getDeclaredField("serialVersionUID");
					int mod = field.getModifiers();
					boolean isstatic = Modifier.isStatic(mod);
					boolean isfinal = Modifier.isFinal(mod);
					Class fieldtype = field.getType();
					boolean islong = fieldtype.getName() == "long";
					if (!isstatic) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Serializable_UID has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Serializable_UID.html");
						RVMLogging.out.println(Level.CRITICAL, "The serialVersionUID field of " + klass.getName() + " is not a static field.");
					}
					if (!isfinal) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Serializable_UID has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Serializable_UID.html");
						RVMLogging.out.println(Level.CRITICAL, "The serialVersionUID field of " + klass.getName() + " is not a final field.");
					}
					if (!islong) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Serializable_UID has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Serializable_UID.html");
						RVMLogging.out.println(Level.CRITICAL, "The serialVersionUID field of " + klass.getName() + " is not of type long.");
					}
				} catch (NoSuchFieldException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Serializable_UID has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Serializable_UID.html");
					RVMLogging.out.println(Level.CRITICAL, "A serializable class " + klass.getName() + " does not declare a serialVersionUID");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class ServerSocket_BacklogRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_BacklogRawMonitor ret = (ServerSocket_BacklogRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private void check(int backlog, String msg) {
		if (backlog > 0) return;
		RVMLogging.out.println(Level.CRITICAL, msg);
		RVMLogging.out.println(Level.CRITICAL, "The backlog argument " + backlog + " is invalid; it should be greater than 0.");
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct(int backlog) {
		RVM_lastevent = 0;
		{
			this.check(backlog, "Specification ServerSocket_Backlog has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_Backlog.html");
		}
		return true;
	}

	final boolean event_set(int backlog) {
		RVM_lastevent = 1;
		{
			this.check(backlog, "Specification ServerSocket_Backlog has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_Backlog.html");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct
			return;
			case 1:
			//set
			return;
		}
		return;
	}

}
class ServerSocket_LargeReceiveBufferMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_LargeReceiveBufferMonitor ret = (ServerSocket_LargeReceiveBufferMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_bound[] = {3, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_create_unbound[] = {2, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_bind[] = {5, 1, 1, 5, 5, 5};;
	static final int Prop_1_transition_set[] = {5, 4, 2, 4, 5, 5};;

	volatile boolean ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ServerSocket_LargeReceiveBufferMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_bound(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_bound) ;
		this.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unbound(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unbound) ;
		this.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_bind(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_bind) ;
		this.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(ServerSocket sock, int size) {
		{
			if ( ! (size > 65536) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ServerSocket_LargeReceiveBuffer has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_LargeReceiveBuffer.html");
			RVMLogging.out.println(Level.CRITICAL, "A receive window large than 64K bytes must be set before the server socket is bound.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [ServerSocket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_bound
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unbound
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//bind
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class ServerSocket_PerformancePreferencesMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_PerformancePreferencesMonitor ret = (ServerSocket_PerformancePreferencesMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_bound[] = {3, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_create_unbound[] = {2, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_bind[] = {5, 1, 1, 5, 5, 5};;
	static final int Prop_1_transition_set[] = {5, 4, 2, 4, 5, 5};;

	volatile boolean ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ServerSocket_PerformancePreferencesMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_bound(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_bound) ;
		this.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unbound(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unbound) ;
		this.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_bind(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_bind) ;
		this.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ServerSocket_PerformancePreferences has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_PerformancePreferences.html");
			RVMLogging.out.println(Level.CRITICAL, "Invoking ServerSocket.setPerformancePreferences() after the socket has been bound will have no effect.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [ServerSocket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_bound
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unbound
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//bind
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class ServerSocket_PortRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_PortRawMonitor ret = (ServerSocket_PortRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct_port(int port) {
		RVM_lastevent = 0;
		{
			if (0 <= port && port <= 65535) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification ServerSocket_Port has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_Port.html");
			RVMLogging.out.println(Level.CRITICAL, "The specified port " + port + " is out of range; [0 ~ 65535]");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct_port
			return;
		}
		return;
	}

}
class ServerSocket_ReuseAddressMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_ReuseAddressMonitor ret = (ServerSocket_ReuseAddressMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_bound[] = {3, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_create_unbound[] = {2, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_bind[] = {5, 1, 1, 5, 5, 5};;
	static final int Prop_1_transition_set[] = {5, 4, 2, 4, 5, 5};;

	volatile boolean ServerSocket_ReuseAddressMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ServerSocket_ReuseAddressMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_bound(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_bound) ;
		this.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unbound(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unbound) ;
		this.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_bind(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_bind) ;
		this.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ServerSocket_ReuseAddress has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_ReuseAddress.html");
			RVMLogging.out.println(Level.CRITICAL, "The behavior of setting SO_REUSEADDR after a socket is bound is not defined.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ServerSocket_ReuseAddressMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [ServerSocket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_bound
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unbound
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//bind
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class ServerSocket_SetTimeoutBeforeBlockingMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_SetTimeoutBeforeBlockingMonitor ret = (ServerSocket_SetTimeoutBeforeBlockingMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_enter[] = {1, 4, 1, 4, 4};;
	static final int Prop_1_transition_leave[] = {4, 2, 4, 4, 4};;
	static final int Prop_1_transition_set[] = {0, 4, 3, 3, 4};;

	volatile boolean ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	ServerSocket_SetTimeoutBeforeBlockingMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_enter(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_enter) ;
		this.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_leave(ServerSocket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_leave) ;
		this.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(ServerSocket sock, int timeout) {
		{
			if ( ! (timeout != 0) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_set) ;
		this.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ServerSocket_SetTimeoutBeforeBlocking has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_SetTimeoutBeforeBlocking.html");
			RVMLogging.out.println(Level.CRITICAL, "ServerSocket.setSoTimeout() should be set prior to entering the blocking operation.");
			this.reset();
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [ServerSocket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//enter
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//leave
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class ServerSocket_TimeoutRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServerSocket_TimeoutRawMonitor ret = (ServerSocket_TimeoutRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_set(int timeout) {
		RVM_lastevent = 0;
		{
			if (timeout > 0) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification ServerSocket_Timeout has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServerSocket_Timeout.html");
			RVMLogging.out.println(Level.CRITICAL, "An invalid timeout value " + timeout + " was set to a ServerSocket object.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//set
			return;
		}
		return;
	}

}
class ServiceLoaderIterator_RemoveMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServiceLoaderIterator_RemoveMonitor ret = (ServiceLoaderIterator_RemoveMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create[] = {2, 3, 3, 3};;
	static final int Prop_1_transition_remove[] = {3, 3, 1, 3};;

	volatile boolean ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ServiceLoaderIterator_RemoveMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(ServiceLoader s, Iterator i) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_remove(Iterator i) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_remove) ;
		this.ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ServiceLoaderIterator_Remove has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServiceLoaderIterator_Remove.html");
			RVMLogging.out.println(Level.CRITICAL, "The iterator returned by ServiceLoader.iterator() does not support removal.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [Iterator i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//remove
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class ServiceLoader_MultipleConcurrentThreadsMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ServiceLoader_MultipleConcurrentThreadsMonitor ret = (ServiceLoader_MultipleConcurrentThreadsMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread t;

	static final int Prop_1_transition_create[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_gooduse[] = {3, 1, 3, 3};;
	static final int Prop_1_transition_baduse[] = {3, 2, 3, 3};;

	volatile boolean ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ServiceLoader_MultipleConcurrentThreadsMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create(Thread t2, ServiceLoader s) {
		{
			this.t = t2;
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create) ;
		this.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_gooduse(ServiceLoader s, Thread t2) {
		{
			if ( ! (this.t == t2) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_gooduse) ;
		this.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_baduse(ServiceLoader s, Thread t2) {
		{
			if ( ! (this.t != t2) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_baduse) ;
		this.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ServiceLoader_MultipleConcurrentThreads has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ServiceLoader_MultipleConcurrentThreads.html");
			RVMLogging.out.println(Level.CRITICAL, "A ServiceLoader object has been used by multiple threads.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [ServiceLoader s]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//gooduse
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//baduse
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Set_ItselfAsElementRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Set_ItselfAsElementRawMonitor ret = (Set_ItselfAsElementRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_add(Set s, Object elem) {
		RVM_lastevent = 0;
		{
			if ( ! (elem == s) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification Set_ItselfAsElement has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Set_ItselfAsElement.html");
				RVMLogging.out.println(Level.CRITICAL, "A set cannot contain itself as an element.");
			}
		}
		return true;
	}

	final boolean event_addall(Set s, Collection src) {
		RVM_lastevent = 1;
		{
			for (Object elem : src) {
				if (elem == s) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Set_ItselfAsElement has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Set_ItselfAsElement.html");
					RVMLogging.out.println(Level.CRITICAL, "A set cannot contain itself as an element.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//add
			return;
			case 1:
			//addall
			return;
		}
		return;
	}

}
class Short_BadDecodeArgRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Short_BadDecodeArgRawMonitor ret = (Short_BadDecodeArgRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_decode(Short s, String nm) {
		RVM_lastevent = 0;
		{
			if (nm == null || nm.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadDecodeArg.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.decode(String nm)");
			} else {
				for (int j = 0; j < nm.length(); j++) {
					if (Character.isWhitespace(nm.charAt(j))) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.decode(String nm)");
					}
				}
				String sub;
				if (nm.charAt(0) == '-') {
					sub = nm.substring(1);
				} else {
					sub = nm;
				}
				int radix = 0;
				if (sub.startsWith("0x") || sub.startsWith("0X")) {
					sub = sub.substring(2);
					radix = 16;
				} else if (sub.startsWith("#")) {
					sub = sub.substring(1);
					radix = 16;
				} else if (sub.startsWith("0")) {
					sub = sub.substring(1);
					radix = 8;
				} else {
					radix = 10;
				}
				try {
					if (Short.parseShort(sub, radix) < 0) {
						RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadDecodeArg.html");
						RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.decode(String nm)");
					}
				} catch (Exception e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadDecodeArg has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadDecodeArg.html");
					RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.decode(String nm)");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//decode
			return;
		}
		return;
	}

}
class Short_BadParsingArgsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Short_BadParsingArgsRawMonitor ret = (Short_BadParsingArgsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_bad_arg(String s, int radix) {
		RVM_lastevent = 0;
		{
			if (s == null || s.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.parseShort(String s, int radix)");
			} else if (radix < java.lang.Character.MIN_RADIX || radix > java.lang.Character.MAX_RADIX) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.parseShort(String s, int radix)");
			} else {
				for (int j = 0; j < s.length(); j++) {
					if (Character.digit(s.charAt(j), radix) == -1) {
						if (!(j == 0 && s.length() > 1 && s.charAt(0) == '-')) {
							RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadParsingArgs.html");
							RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.parseShort(String s, int radix)");
						}
					}
				}
			}
		}
		return true;
	}

	final boolean event_bad_arg2(String s) {
		RVM_lastevent = 1;
		{
			if (s == null || s.length() == 0) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadParsingArgs.html");
				RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.parseShort(String s)");
			} else {
				for (int j = 0; j < s.length(); j++) {
					if (Character.digit(s.charAt(j), 10) == -1) {
						if (!(j == 0 && s.length() > 1 && s.charAt(0) == '-')) {
							RVMLogging.out.println(Level.CRITICAL, "Specification Short_BadParsingArgs has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_BadParsingArgs.html");
							RVMLogging.out.println(Level.CRITICAL, "Wrong argument to Short.parseShort(String s)");
						}
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//bad_arg
			return;
			case 1:
			//bad_arg2
			return;
		}
		return;
	}

}
class Short_StaticFactoryRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Short_StaticFactoryRawMonitor ret = (Short_StaticFactoryRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(Short l) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Short_StaticFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Short_StaticFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor Short(short value) might be inefficient. Use valueOf(short) if it is appropriate.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class ShutdownHook_LateRegisterMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ShutdownHook_LateRegisterMonitor ret = (ShutdownHook_LateRegisterMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	HashSet<Thread> threadSet = new HashSet<Thread>();

	static final int Prop_1_transition_register[] = {0, 2, 3, 3};;
	static final int Prop_1_transition_unregister[] = {0, 2, 3, 3};;
	static final int Prop_1_transition_start[] = {1, 1, 3, 3};;

	volatile boolean ShutdownHook_LateRegisterMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	ShutdownHook_LateRegisterMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_register(Thread t) {
		{
			threadSet.add(t);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_register) ;
		this.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_unregister(Thread t) {
		{
			threadSet.remove(t);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unregister) ;
		this.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_start(Thread t) {
		{
			if ( ! (threadSet.contains(t)) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_start) ;
		this.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ShutdownHook_LateRegister has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ShutdownHook_LateRegister.html");
			RVMLogging.out.println(Level.CRITICAL, "A shutdown hook was registered/unregister after the shutdown sequence had begun.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ShutdownHook_LateRegisterMonitor_Prop_1_Category_match = false;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//register
			return;
			case 1:
			//unregister
			return;
			case 2:
			//start
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class ShutdownHook_PrematureStartMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ShutdownHook_PrematureStartMonitor ret = (ShutdownHook_PrematureStartMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_good_register[] = {2, 3, 3, 3};;
	static final int Prop_1_transition_bad_register[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_unregister[] = {3, 3, 0, 3};;
	static final int Prop_1_transition_userstart[] = {3, 3, 1, 3};;

	volatile boolean ShutdownHook_PrematureStartMonitor_Prop_1_Category_err = false;

	private final AtomicInteger pairValue;

	ShutdownHook_PrematureStartMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_good_register(Thread t) {
		{
			if ( ! (t.getState() == Thread.State.NEW) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_good_register) ;
		this.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_bad_register(Thread t) {
		{
			if ( ! (t.getState() != Thread.State.NEW) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_bad_register) ;
		this.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_unregister(Thread t) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_unregister) ;
		this.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_userstart(Thread t) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_userstart) ;
		this.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_err (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ShutdownHook_PrematureStart has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ShutdownHook_PrematureStart.html");
			RVMLogging.out.println(Level.CRITICAL, "A virtual-machine shutdown hook has been started by the user code.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ShutdownHook_PrematureStartMonitor_Prop_1_Category_err = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Thread t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//good_register
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//bad_register
			return;
			case 2:
			//unregister
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//userstart
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class ShutdownHook_SystemExitMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ShutdownHook_SystemExitMonitor ret = (ShutdownHook_SystemExitMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	boolean skipEvent = false;

	static final int Prop_1_transition_register[] = {3, 4, 4, 4, 4};;
	static final int Prop_1_transition_unregister[] = {4, 4, 4, 0, 4};;
	static final int Prop_1_transition_start[] = {4, 4, 4, 2, 4};;
	static final int Prop_1_transition_exit[] = {4, 1, 1, 4, 4};;

	volatile boolean ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe = false;

	private final AtomicInteger pairValue;

	ShutdownHook_SystemExitMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_register(Thread t) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_register) ;
		this.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_unregister(Thread t) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unregister) ;
		this.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_start(Thread t) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_start) ;
		this.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_exit(Thread t) {
		{
			this.skipEvent = true;
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_exit) ;
		this.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_unsafe (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ShutdownHook_SystemExit has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ShutdownHook_SystemExit.html");
			RVMLogging.out.println(Level.CRITICAL, "Invoking System.exit() in a shutdown hook was suppressed because it may lead to deadlocks.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Thread t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//register
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//unregister
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//start
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//exit
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class ShutdownHook_UnsafeAWTCallMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ShutdownHook_UnsafeAWTCallMonitor ret = (ShutdownHook_UnsafeAWTCallMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	boolean skipEvent = false;

	static final int Prop_1_transition_register[] = {3, 4, 4, 4, 4};;
	static final int Prop_1_transition_unregister[] = {4, 4, 4, 0, 4};;
	static final int Prop_1_transition_start[] = {4, 4, 4, 2, 4};;
	static final int Prop_1_transition_awtcall[] = {4, 1, 1, 4, 4};;

	volatile boolean ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe = false;

	private final AtomicInteger pairValue;

	ShutdownHook_UnsafeAWTCallMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_register(Thread t) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_register) ;
		this.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_unregister(Thread t) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unregister) ;
		this.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_start(Thread t) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_start) ;
		this.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_awtcall(Thread t) {
		{
			this.skipEvent = true;
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_awtcall) ;
		this.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_unsafe (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ShutdownHook_UnsafeAWTCall has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ShutdownHook_UnsafeAWTCall.html");
			RVMLogging.out.println(Level.CRITICAL, "An operation that potentially leads to deadlocks was performed in a shutdown hook.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Thread t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//register
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//unregister
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//start
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//awtcall
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class ShutdownHook_UnsafeSwingCallMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			ShutdownHook_UnsafeSwingCallMonitor ret = (ShutdownHook_UnsafeSwingCallMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	boolean skipEvent = false;

	static final int Prop_1_transition_register[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_unregister[] = {4, 4, 0, 4, 4};;
	static final int Prop_1_transition_start[] = {4, 4, 1, 4, 4};;
	static final int Prop_1_transition_swingcall1[] = {4, 3, 4, 3, 4};;
	static final int Prop_1_transition_swingcall2[] = {4, 3, 4, 3, 4};;

	volatile boolean ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = false;

	private final AtomicInteger pairValue;

	ShutdownHook_UnsafeSwingCallMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_register(Thread t) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_register) ;
		this.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_unregister(Thread t) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unregister) ;
		this.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_start(Thread t) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_start) ;
		this.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_swingcall1(Thread t) {
		{
			this.skipEvent = true;
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_swingcall1) ;
		this.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_swingcall2(Thread t) {
		{
			this.skipEvent = true;
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_swingcall2) ;
		this.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_unsafe (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification ShutdownHook_UnsafeSwingCall has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/ShutdownHook_UnsafeSwingCall.html");
			RVMLogging.out.println(Level.CRITICAL, "An operation that potentially leads to deadlocks was performed in a shutdown hook.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Thread t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//register
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//unregister
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//start
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//swingcall1
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//swingcall2
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class SocketImpl_CloseOutputMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			SocketImpl_CloseOutputMonitor ret = (SocketImpl_CloseOutputMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_output = null;
	WeakReference Ref_sock = null;

	static final int Prop_1_transition_getoutput[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_close[] = {4, 2, 4, 4, 4};;
	static final int Prop_1_transition_use[] = {4, 4, 3, 3, 4};;

	volatile boolean SocketImpl_CloseOutputMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	SocketImpl_CloseOutputMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getoutput(SocketImpl sock, OutputStream output) {
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getoutput) ;
		this.SocketImpl_CloseOutputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_close(SocketImpl sock) {
		OutputStream output = null;
		if(Ref_output != null){
			output = (OutputStream)Ref_output.get();
		}
		{
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.SocketImpl_CloseOutputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_use(OutputStream output) {
		SocketImpl sock = null;
		if(Ref_sock != null){
			sock = (SocketImpl)Ref_sock.get();
		}
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_use) ;
		this.SocketImpl_CloseOutputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification SocketImpl_CloseOutput has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SocketImpl_CloseOutput.html");
			RVMLogging.out.println(Level.CRITICAL, "The output stream of a closed socket is about to be used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		SocketImpl_CloseOutputMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead
	// RVMRef_output was suppressed to reduce memory overhead

	//alive_parameters_0 = [SocketImpl sock, OutputStream output]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [OutputStream output]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getoutput
			//alive_sock && alive_output
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_output
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//use
			//alive_output
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class SocketPermission_ActionsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			SocketPermission_ActionsRawMonitor ret = (SocketPermission_ActionsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_construct(String actions) {
		RVM_lastevent = 0;
		{
			HashSet<String> possible = new HashSet<String>();
			possible.add("connect");
			possible.add("listen");
			possible.add("accept");
			possible.add("resolve");
			boolean valid = true;
			String[] split = actions.split(",");
			if (split.length == 0) valid = false; else {
				for (String act : split) {
					if (!possible.contains(act)) {
						valid = false;
						break;
					}
				}
			}
			if (!valid) {
				RVMLogging.out.println(Level.CRITICAL, "Specification SocketPermission_Actions has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SocketPermission_Actions.html");
				RVMLogging.out.println(Level.CRITICAL, "The 'actions' parameter '" + actions + "' is invalid.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//construct
			return;
		}
		return;
	}

}
class Socket_CloseInputMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_CloseInputMonitor ret = (Socket_CloseInputMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_input = null;
	WeakReference Ref_sock = null;

	static final int Prop_1_transition_getinput[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_close[] = {4, 2, 4, 4, 4};;
	static final int Prop_1_transition_use[] = {4, 4, 3, 3, 4};;

	volatile boolean Socket_CloseInputMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Socket_CloseInputMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getinput(Socket sock, InputStream input) {
		{
		}
		if(Ref_input == null){
			Ref_input = new WeakReference(input);
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getinput) ;
		this.Socket_CloseInputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_close(Socket sock) {
		InputStream input = null;
		if(Ref_input != null){
			input = (InputStream)Ref_input.get();
		}
		{
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Socket_CloseInputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_use(InputStream input) {
		Socket sock = null;
		if(Ref_sock != null){
			sock = (Socket)Ref_sock.get();
		}
		{
		}
		if(Ref_input == null){
			Ref_input = new WeakReference(input);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_use) ;
		this.Socket_CloseInputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_CloseInput has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_CloseInput.html");
			RVMLogging.out.println(Level.CRITICAL, "The input stream of a closed socket is about to be used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_CloseInputMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead
	// RVMRef_input was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock, InputStream input]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [InputStream input]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getinput
			//alive_sock && alive_input
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_input
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//use
			//alive_input
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Socket_CloseOutputMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_CloseOutputMonitor ret = (Socket_CloseOutputMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_output = null;
	WeakReference Ref_sock = null;

	static final int Prop_1_transition_getoutput[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_close[] = {4, 2, 4, 4, 4};;
	static final int Prop_1_transition_use[] = {4, 4, 3, 3, 4};;

	volatile boolean Socket_CloseOutputMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Socket_CloseOutputMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getoutput(Socket sock, OutputStream output) {
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getoutput) ;
		this.Socket_CloseOutputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_close(Socket sock) {
		OutputStream output = null;
		if(Ref_output != null){
			output = (OutputStream)Ref_output.get();
		}
		{
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Socket_CloseOutputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_use(OutputStream output) {
		Socket sock = null;
		if(Ref_sock != null){
			sock = (Socket)Ref_sock.get();
		}
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_use) ;
		this.Socket_CloseOutputMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_CloseOutput has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_CloseOutput.html");
			RVMLogging.out.println(Level.CRITICAL, "The output stream of a closed socket is about to be used.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_CloseOutputMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead
	// RVMRef_output was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock, OutputStream output]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [OutputStream output]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_0 = false;
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getoutput
			//alive_sock && alive_output
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_output
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//use
			//alive_output
			if(!(alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Socket_InputStreamUnavailableMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_InputStreamUnavailableMonitor ret = (Socket_InputStreamUnavailableMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_connected[] = {3, 4, 4, 4, 4};;
	static final int Prop_1_transition_create_unconnected[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_connect[] = {4, 4, 3, 4, 4};;
	static final int Prop_1_transition_get[] = {4, 4, 4, 3, 4};;
	static final int Prop_1_transition_close[] = {4, 1, 4, 1, 4};;
	static final int Prop_1_transition_shutdown[] = {4, 1, 4, 1, 4};;

	volatile boolean Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Socket_InputStreamUnavailableMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_connected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_connected) ;
		this.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unconnected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unconnected) ;
		this.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_connect(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_connect) ;
		this.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_get(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_get) ;
		this.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_close(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_close) ;
		this.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_shutdown(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_shutdown) ;
		this.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_InputStreamUnavailable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_InputStreamUnavailable.html");
			RVMLogging.out.println(Level.CRITICAL, "An input stream is unavailable if the socket is closed, is not connected, or the socket input has been shutdown.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_connected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unconnected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//connect
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//get
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//close
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//shutdown
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Socket_LargeReceiveBufferMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_LargeReceiveBufferMonitor ret = (Socket_LargeReceiveBufferMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_connected[] = {3, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_create_unconnected[] = {2, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_connect[] = {5, 1, 1, 5, 5, 5};;
	static final int Prop_1_transition_set[] = {5, 4, 2, 4, 5, 5};;

	volatile boolean Socket_LargeReceiveBufferMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Socket_LargeReceiveBufferMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_connected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_connected) ;
		this.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unconnected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unconnected) ;
		this.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_connect(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_connect) ;
		this.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(Socket sock, int size) {
		{
			if ( ! (size > 65536) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_LargeReceiveBuffer has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_LargeReceiveBuffer.html");
			RVMLogging.out.println(Level.CRITICAL, "A receive window large than 64K bytes must be set before the socket is connected.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_LargeReceiveBufferMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_connected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unconnected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//connect
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class Socket_OutputStreamUnavailableMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_OutputStreamUnavailableMonitor ret = (Socket_OutputStreamUnavailableMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_connected[] = {3, 4, 4, 4, 4};;
	static final int Prop_1_transition_create_unconnected[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_connect[] = {4, 4, 3, 4, 4};;
	static final int Prop_1_transition_get[] = {4, 4, 4, 3, 4};;
	static final int Prop_1_transition_close[] = {4, 1, 4, 1, 4};;
	static final int Prop_1_transition_shutdown[] = {4, 1, 4, 1, 4};;

	volatile boolean Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Socket_OutputStreamUnavailableMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_connected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_connected) ;
		this.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unconnected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unconnected) ;
		this.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_connect(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_connect) ;
		this.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_get(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_get) ;
		this.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_close(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_close) ;
		this.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_shutdown(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_shutdown) ;
		this.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_OutputStreamUnavailable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_OutputStreamUnavailable.html");
			RVMLogging.out.println(Level.CRITICAL, "An output stream is unavailable if the socket is closed, is not connected, or the socket output has been shutdown.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_connected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unconnected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//connect
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//get
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//close
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//shutdown
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class Socket_PerformancePreferencesMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_PerformancePreferencesMonitor ret = (Socket_PerformancePreferencesMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_connected[] = {3, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_create_unconnected[] = {2, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_connect[] = {5, 1, 1, 5, 5, 5};;
	static final int Prop_1_transition_set[] = {5, 4, 2, 4, 5, 5};;

	volatile boolean Socket_PerformancePreferencesMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Socket_PerformancePreferencesMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_connected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_connected) ;
		this.Socket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unconnected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unconnected) ;
		this.Socket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_connect(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_connect) ;
		this.Socket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.Socket_PerformancePreferencesMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_PerformancePreferences has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_PerformancePreferences.html");
			RVMLogging.out.println(Level.CRITICAL, "Invoking Socket.setPerformancePreferences() after the socket has been bound will have no effect.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_PerformancePreferencesMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_connected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unconnected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//connect
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class Socket_ReuseAddressMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_ReuseAddressMonitor ret = (Socket_ReuseAddressMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_create_connected[] = {3, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_create_unconnected[] = {2, 5, 5, 5, 5, 5};;
	static final int Prop_1_transition_bind[] = {5, 1, 1, 5, 5, 5};;
	static final int Prop_1_transition_set[] = {5, 4, 2, 4, 5, 5};;

	volatile boolean Socket_ReuseAddressMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Socket_ReuseAddressMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_create_connected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_create_connected) ;
		this.Socket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_create_unconnected(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_create_unconnected) ;
		this.Socket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_bind(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_bind) ;
		this.Socket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_set(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.Socket_ReuseAddressMonitor_Prop_1_Category_match = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_ReuseAddress has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_ReuseAddress.html");
			RVMLogging.out.println(Level.CRITICAL, "The behavior of setting SO_REUSEADDR after a socket is bound is not defined.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_ReuseAddressMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//create_connected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//create_unconnected
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//bind
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 6;
	}

}
class Socket_ReuseSocketMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_ReuseSocketMonitor ret = (Socket_ReuseSocketMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_close[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_bind[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_connect[] = {3, 2, 2, 3};;

	volatile boolean Socket_ReuseSocketMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Socket_ReuseSocketMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_close(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_close) ;
		this.Socket_ReuseSocketMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_bind(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_bind) ;
		this.Socket_ReuseSocketMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_connect(Socket sock) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_connect) ;
		this.Socket_ReuseSocketMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_ReuseSocket has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_ReuseSocket.html");
			RVMLogging.out.println(Level.CRITICAL, "Once a socket has been closed, it is not available for further networking use; a new socket needs to be created.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_ReuseSocketMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//close
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//bind
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//connect
			//alive_sock
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Socket_SetTimeoutBeforeBlockingInputMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_SetTimeoutBeforeBlockingInputMonitor ret = (Socket_SetTimeoutBeforeBlockingInputMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_sock = null;
	WeakReference Ref_input = null;

	static final int Prop_1_transition_getinput[] = {1, 1, 2, 3};;
	static final int Prop_1_transition_enter[] = {3, 2, 3, 3};;
	static final int Prop_1_transition_leave[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_set[] = {3, 1, 3, 3};;

	volatile boolean Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Socket_SetTimeoutBeforeBlockingInputMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getinput(Socket sock, InputStream input) {
		{
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}
		if(Ref_input == null){
			Ref_input = new WeakReference(input);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getinput) ;
		this.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_enter(InputStream input) {
		Socket sock = null;
		if(Ref_sock != null){
			sock = (Socket)Ref_sock.get();
		}
		{
		}
		if(Ref_input == null){
			Ref_input = new WeakReference(input);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_enter) ;
		this.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_leave(InputStream input) {
		Socket sock = null;
		if(Ref_sock != null){
			sock = (Socket)Ref_sock.get();
		}
		{
		}
		if(Ref_input == null){
			Ref_input = new WeakReference(input);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_leave) ;
		this.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_set(Socket sock, int timeout) {
		InputStream input = null;
		if(Ref_input != null){
			input = (InputStream)Ref_input.get();
		}
		{
			if ( ! (timeout != 0) ) {
				return false;
			}
			{
			}
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_SetTimeoutBeforeBlockingInput has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_SetTimeoutBeforeBlockingInput.html");
			RVMLogging.out.println(Level.CRITICAL, "Socket.setSoTimeout() should be set prior to entering the blocking operation.");
			this.reset();
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead
	// RVMRef_input was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [InputStream input]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getinput
			//alive_sock || alive_input
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//enter
			//alive_sock || alive_input
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//leave
			//alive_sock || alive_input
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock || alive_input
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Socket_SetTimeoutBeforeBlockingOutputMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_SetTimeoutBeforeBlockingOutputMonitor ret = (Socket_SetTimeoutBeforeBlockingOutputMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	WeakReference Ref_output = null;
	WeakReference Ref_sock = null;

	static final int Prop_1_transition_getoutput[] = {1, 1, 2, 3};;
	static final int Prop_1_transition_enter[] = {3, 2, 3, 3};;
	static final int Prop_1_transition_leave[] = {3, 3, 1, 3};;
	static final int Prop_1_transition_set[] = {3, 1, 3, 3};;

	volatile boolean Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Socket_SetTimeoutBeforeBlockingOutputMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_getoutput(Socket sock, OutputStream output) {
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_getoutput) ;
		this.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_enter(OutputStream output) {
		Socket sock = null;
		if(Ref_sock != null){
			sock = (Socket)Ref_sock.get();
		}
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_enter) ;
		this.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_leave(OutputStream output) {
		Socket sock = null;
		if(Ref_sock != null){
			sock = (Socket)Ref_sock.get();
		}
		{
		}
		if(Ref_output == null){
			Ref_output = new WeakReference(output);
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_leave) ;
		this.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_set(Socket sock, int timeout) {
		OutputStream output = null;
		if(Ref_output != null){
			output = (OutputStream)Ref_output.get();
		}
		{
			if ( ! (timeout != 0) ) {
				return false;
			}
			{
			}
		}
		if(Ref_sock == null){
			Ref_sock = new WeakReference(sock);
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_set) ;
		this.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_SetTimeoutBeforeBlockingOutput has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_SetTimeoutBeforeBlockingOutput.html");
			RVMLogging.out.println(Level.CRITICAL, "Socket.setSoTimeout() should be set prior to entering the blocking operation.");
			this.reset();
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_sock was suppressed to reduce memory overhead
	// RVMRef_output was suppressed to reduce memory overhead

	//alive_parameters_0 = [Socket sock]
	boolean alive_parameters_0 = true;
	//alive_parameters_1 = [OutputStream output]
	boolean alive_parameters_1 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
			case 1:
			alive_parameters_1 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//getoutput
			//alive_sock || alive_output
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//enter
			//alive_sock || alive_output
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//leave
			//alive_sock || alive_output
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//set
			//alive_sock || alive_output
			if(!(alive_parameters_0 || alive_parameters_1)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 4;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Socket_TimeoutRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_TimeoutRawMonitor ret = (Socket_TimeoutRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_set(int timeout) {
		RVM_lastevent = 0;
		{
			if (timeout > 0) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification Socket_Timeout has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_Timeout.html");
			RVMLogging.out.println(Level.CRITICAL, "An invalid timeout value " + timeout + " was set to a Socket object.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//set
			return;
		}
		return;
	}

}
class Socket_TrafficClassRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Socket_TrafficClassRawMonitor ret = (Socket_TrafficClassRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_settc(Socket socket, int tc) {
		RVM_lastevent = 0;
		{
			boolean outofrange = !(0 <= tc && tc <= 255);
			boolean mbz = false;
			boolean precedence = false;
			InetAddress addr = socket.getLocalAddress();
			if (addr instanceof Inet4Address) {
				mbz = (tc & 1) != 0 ? true : false;
				precedence = (tc >> (4 + 1)) != 0;
			}
			if (outofrange || mbz || precedence) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Socket_TrafficClass has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Socket_TrafficClass.html");
				if (outofrange) {
					RVMLogging.out.println(Level.CRITICAL, "The traffic class value " + tc + " is out of range; [0 ~ 255].");
				} else {
					if (mbz) {
						RVMLogging.out.println(Level.CRITICAL, "The traffic class value sets 1 to MBZ.");
					}
					if (precedence) {
						RVMLogging.out.println(Level.CRITICAL, "The traffic class value sets non-zero precedence.");
					}
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//settc
			return;
		}
		return;
	}

}
class SortedMap_StandardConstructorsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			SortedMap_StandardConstructorsRawMonitor ret = (SortedMap_StandardConstructorsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				try {
					Constructor ctor1 = klass.getDeclaredConstructor((Class[]) null);
					Constructor ctor2 = klass.getDeclaredConstructor(Comparator.class);
					Constructor ctor3 = klass.getDeclaredConstructor(Map.class);
					Constructor ctor4 = klass.getDeclaredConstructor(SortedMap.class);
				} catch (NoSuchMethodException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification SortedMap_StandardConstructors has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SortedMap_StandardConstructors.html");
					RVMLogging.out.println(Level.CRITICAL, klass.getName() + " does not define the 'standard' SortedMap constructors.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class SortedSet_ComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			SortedSet_ComparableRawMonitor ret = (SortedSet_ComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_add(Object e) {
		RVM_lastevent = 0;
		{
			if (!(e instanceof Comparable)) {
				RVMLogging.out.println(Level.CRITICAL, "Specification SortedSet_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SortedSet_Comparable.html");
				RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a SortedSet object.");
			}
		}
		return true;
	}

	final boolean event_addall(Collection c) {
		RVM_lastevent = 1;
		{
			for (Object elem : c) {
				if (!(elem instanceof Comparable)) {
					RVMLogging.out.println(Level.CRITICAL, "Specification SortedSet_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SortedSet_Comparable.html");
					RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a SortedSet object.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//add
			return;
			case 1:
			//addall
			return;
		}
		return;
	}

}
class SortedSet_StandardConstructorsRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			SortedSet_StandardConstructorsRawMonitor ret = (SortedSet_StandardConstructorsRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			if (klass != null) {
				try {
					Constructor ctor1 = klass.getDeclaredConstructor((Class[]) null);
					Constructor ctor2 = klass.getDeclaredConstructor(Comparator.class);
					Constructor ctor3 = klass.getDeclaredConstructor(Collection.class);
					Constructor ctor4 = klass.getDeclaredConstructor(SortedSet.class);
				} catch (NoSuchMethodException e) {
					RVMLogging.out.println(Level.CRITICAL, "Specification SortedSet_StandardConstructors has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/SortedSet_StandardConstructors.html");
					RVMLogging.out.println(Level.CRITICAL, klass.getName() + " does not define the 'standard' SortedSet constructors.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class StreamTokenizer_AccessInvalidFieldMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			StreamTokenizer_AccessInvalidFieldMonitor ret = (StreamTokenizer_AccessInvalidFieldMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_nexttoken_word[] = {3, 3, 4, 3, 4};;
	static final int Prop_1_transition_nexttoken_num[] = {1, 1, 4, 1, 4};;
	static final int Prop_1_transition_nexttoken_eol[] = {0, 0, 4, 0, 4};;
	static final int Prop_1_transition_nexttoken_eof[] = {2, 2, 4, 2, 4};;
	static final int Prop_1_transition_sval[] = {4, 4, 4, 3, 4};;
	static final int Prop_1_transition_nval[] = {4, 1, 4, 4, 4};;

	volatile boolean StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	StreamTokenizer_AccessInvalidFieldMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_nexttoken_word(StreamTokenizer s, int t) {
		{
			if ( ! (t == StreamTokenizer.TT_WORD) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_nexttoken_word) ;
		this.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_nexttoken_num(StreamTokenizer s, int t) {
		{
			if ( ! (t == StreamTokenizer.TT_NUMBER) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_nexttoken_num) ;
		this.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_nexttoken_eol(StreamTokenizer s, int t) {
		{
			if ( ! (t == StreamTokenizer.TT_EOL) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_nexttoken_eol) ;
		this.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_nexttoken_eof(StreamTokenizer s, int t) {
		{
			if ( ! (t == StreamTokenizer.TT_EOF) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_nexttoken_eof) ;
		this.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_sval(StreamTokenizer s) {
		{
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_sval) ;
		this.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final boolean Prop_1_event_nval(StreamTokenizer s) {
		{
		}

		int nextstate = this.handleEvent(5, Prop_1_transition_nval) ;
		this.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = nextstate == 4;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification StreamTokenizer_AccessInvalidField has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/StreamTokenizer_AccessInvalidField.html");
			RVMLogging.out.println(Level.CRITICAL, "The caller attempted to read an invalidated value. " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode());
			this.reset();
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [StreamTokenizer s]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//nexttoken_word
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//nexttoken_num
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//nexttoken_eol
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//nexttoken_eof
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//sval
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 5:
			//nval
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 6;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class StrictMath_ContendedRandomMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			StrictMath_ContendedRandomMonitor ret = (StrictMath_ContendedRandomMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread th = null;

	static final int Prop_1_transition_onethread_use[] = {0, 1};;
	static final int Prop_1_transition_otherthread_use[] = {1, 1};;

	volatile boolean StrictMath_ContendedRandomMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	StrictMath_ContendedRandomMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 1) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 1) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 1) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_onethread_use(Thread t) {
		{
			if ( ! (this.th == null || this.th == t) ) {
				return false;
			}
			{
				this.th = t;
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_onethread_use) ;
		this.StrictMath_ContendedRandomMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_otherthread_use(Thread t) {
		{
			if ( ! (this.th != t) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_otherthread_use) ;
		this.StrictMath_ContendedRandomMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification StrictMath_ContendedRandom has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/StrictMath_ContendedRandom.html");
			RVMLogging.out.println(Level.CRITICAL, "StrictMath.random() is used by multiple threads. If there is contention, we recommend you to use Random.nextDouble().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		StrictMath_ContendedRandomMonitor_Prop_1_Category_fail = false;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//onethread_use
			return;
			case 1:
			//otherthread_use
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 2;
	}

}
class StringBuffer_SingleThreadUsageMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			StringBuffer_SingleThreadUsageMonitor ret = (StringBuffer_SingleThreadUsageMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread th = null;

	boolean flag = false;

	WeakReference Ref_s = null;

	static final int Prop_1_transition_init[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_use[] = {4, 4, 3, 3, 4};;
	static final int Prop_1_transition_endprogram[] = {4, 4, 4, 1, 4};;

	volatile boolean StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	StringBuffer_SingleThreadUsageMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_init(Thread t, StringBuffer s) {
		{
			this.th = t;
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_init) ;
		this.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_use(StringBuffer s, Thread t) {
		{
			if (this.th == null) {
				this.th = t;
			} else if (this.th != t) {
				this.flag = true;
			}
		}
		if(Ref_s == null){
			Ref_s = new WeakReference(s);
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_use) ;
		this.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_endprogram() {
		StringBuffer s = null;
		if(Ref_s != null){
			s = (StringBuffer)Ref_s.get();
		}
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_endprogram) ;
		this.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			if (!this.flag) RVMLogging.out.println(Level.CRITICAL, "Specification StringBuffer_SingleThreadUsage has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/StringBuffer_SingleThreadUsage.html");
			RVMLogging.out.println(Level.CRITICAL, "A StringBuffer instance is used in a single thread. You may replace it with a StringBuilder instance, which will be faster under most implementations.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_s was suppressed to reduce memory overhead

	//alive_parameters_0 = [StringBuffer s]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//init
			//alive_s
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//use
			return;
			case 2:
			//endprogram
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class StringBuilder_ThreadSafeMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			StringBuilder_ThreadSafeMonitor ret = (StringBuilder_ThreadSafeMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	Thread owner = null;

	static final int Prop_1_transition_safe_oper[] = {0, 1};;
	static final int Prop_1_transition_unsafe_oper[] = {1, 1};;

	volatile boolean StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	StringBuilder_ThreadSafeMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 1) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 1) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 1) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_safe_oper(StringBuilder b, Thread t) {
		{
			if ( ! (this.owner == null || this.owner == t) ) {
				return false;
			}
			{
				this.owner = t;
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_safe_oper) ;
		this.StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final boolean Prop_1_event_unsafe_oper(StringBuilder b, Thread t) {
		{
			if ( ! (this.owner != null && this.owner != t) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_unsafe_oper) ;
		this.StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail = nextstate == 1;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification StringBuilder_ThreadSafe has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/StringBuilder_ThreadSafe.html");
			RVMLogging.out.println(Level.CRITICAL, "More than two threads attempted to use a StringBuilder instance, which may lead to a race condition. Use StringBuffer instead.");
			this.reset();
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_b was suppressed to reduce memory overhead

	//alive_parameters_0 = [StringBuilder b]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//safe_oper
			//alive_b
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//unsafe_oper
			//alive_b
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 2;
	}

}
class StringTokenizer_HasMoreElementsMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			StringTokenizer_HasMoreElementsMonitor ret = (StringTokenizer_HasMoreElementsMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_hasnexttrue[] = {1, 1, 3, 3};;
	static final int Prop_1_transition_hasnextfalse[] = {0, 0, 3, 3};;
	static final int Prop_1_transition_next[] = {2, 0, 3, 3};;

	volatile boolean StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation = false;

	private final AtomicInteger pairValue;

	StringTokenizer_HasMoreElementsMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_hasnexttrue(StringTokenizer i, boolean b) {
		{
			if ( ! (b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_hasnexttrue) ;
		this.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_hasnextfalse(StringTokenizer i, boolean b) {
		{
			if ( ! (!b) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_hasnextfalse) ;
		this.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_next(StringTokenizer i) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_next) ;
		this.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_violation (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification StringTokenizer_HasMoreElements has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/StringTokenizer_HasMoreElements.html");
			RVMLogging.out.println(Level.CRITICAL, "StringTokenizer.hasMoreTokens()/hasMoreElements() did not return false before calling nextToken()/nextElement().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation = false;
	}

	// RVMRef_i was suppressed to reduce memory overhead

	//alive_parameters_0 = [StringTokenizer i]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//hasnexttrue
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//hasnextfalse
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//next
			//alive_i
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class String_UseStringBuilderRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			String_UseStringBuilderRawMonitor ret = (String_UseStringBuilderRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_constructor_create(String b) {
		RVM_lastevent = 0;
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification String_UseStringBuilder has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/String_UseStringBuilder.html");
			RVMLogging.out.println(Level.CRITICAL, "Using the constructor String(StringBuilder builder) is inefficient. Use toString() method on the StringBuilder.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//constructor_create
			return;
		}
		return;
	}

}
class System_NullArrayCopyRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			System_NullArrayCopyRawMonitor ret = (System_NullArrayCopyRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_null_arraycopy(Object src, int srcPos, Object dest, int destPos, int length) {
		RVM_lastevent = 0;
		{
			if ( ! (src == null || dest == null) ) {
				return false;
			}
			{
				RVMLogging.out.println(Level.CRITICAL, "Specification System_NullArrayCopy has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/System_NullArrayCopy.html");
				RVMLogging.out.println(Level.CRITICAL, "src or dest should not be null.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//null_arraycopy
			return;
		}
		return;
	}

}
class System_WrongKeyOrValueMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			System_WrongKeyOrValueMonitor ret = (System_WrongKeyOrValueMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_createMap[] = {1, 3, 3, 3};;
	static final int Prop_1_transition_nullPut[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_nullQuery[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_notStringQuery[] = {3, 2, 2, 3};;

	volatile boolean System_WrongKeyOrValueMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	System_WrongKeyOrValueMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_createMap(Map map) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_createMap) ;
		this.System_WrongKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_nullPut(Map map, Object key, Object value) {
		{
			if ( ! (key == null || value == null) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_nullPut) ;
		this.System_WrongKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_nullPut(Map map, Map map2) {
		{
			if ( ! (map2.containsKey(null) || map2.containsValue(null)) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_nullPut) ;
		this.System_WrongKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_nullQuery(Map map, Object o) {
		{
			if ( ! (o == null) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(3, Prop_1_transition_nullQuery) ;
		this.System_WrongKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_notStringQuery(Map map, Object o) {
		{
			if ( ! (!(o instanceof String)) ) {
				return false;
			}
			{
			}
		}

		int nextstate = this.handleEvent(4, Prop_1_transition_notStringQuery) ;
		this.System_WrongKeyOrValueMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification System_WrongKeyOrValue has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/System_WrongKeyOrValue.html");
			RVMLogging.out.println(Level.WARNING, "null key or value is not permitted in the map from System.getenv(). Also key or value which is not of type String is not allowed.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		System_WrongKeyOrValueMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_map was suppressed to reduce memory overhead

	//alive_parameters_0 = [Map map]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//createMap
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//nullPut
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//nullPut
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 3:
			//nullQuery
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 4:
			//notStringQuery
			//alive_map
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 5;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Thread_SetDaemonBeforeStartMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Thread_SetDaemonBeforeStartMonitor ret = (Thread_SetDaemonBeforeStartMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_start[] = {1, 2, 2};;
	static final int Prop_1_transition_setDaemon[] = {0, 2, 2};;

	volatile boolean Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	Thread_SetDaemonBeforeStartMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_start(Thread t) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_start) ;
		this.Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_setDaemon(Thread t) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_setDaemon) ;
		this.Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Thread_SetDaemonBeforeStart has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Thread_SetDaemonBeforeStart.html");
			RVMLogging.out.println(Level.CRITICAL, "setDaemon should not be set after the thread started");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Thread t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//start
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//setDaemon
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class Thread_StartOnceMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Thread_StartOnceMonitor ret = (Thread_StartOnceMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_start[] = {1, 2, 2, 3};;

	volatile boolean Thread_StartOnceMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Thread_StartOnceMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_start(Thread t) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_start) ;
		this.Thread_StartOnceMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification Thread_StartOnce has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Thread_StartOnce.html");
			RVMLogging.out.println(Level.WARNING, "Thread should not be started more than once.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Thread_StartOnceMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Thread t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//start
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 1;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Throwable_InitCauseOnceMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Throwable_InitCauseOnceMonitor ret = (Throwable_InitCauseOnceMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_createWithoutThrowable[] = {1, 4, 4, 4, 4};;
	static final int Prop_1_transition_createWithThrowable[] = {2, 4, 4, 4, 4};;
	static final int Prop_1_transition_initCause[] = {4, 2, 3, 3, 4};;

	volatile boolean Throwable_InitCauseOnceMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Throwable_InitCauseOnceMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 7) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 3) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 3) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_createWithoutThrowable(Throwable t) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_createWithoutThrowable) ;
		this.Throwable_InitCauseOnceMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_createWithThrowable(Throwable t) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_createWithThrowable) ;
		this.Throwable_InitCauseOnceMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final boolean Prop_1_event_initCause(Throwable t) {
		{
		}

		int nextstate = this.handleEvent(2, Prop_1_transition_initCause) ;
		this.Throwable_InitCauseOnceMonitor_Prop_1_Category_match = nextstate == 3;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.WARNING, "Specification Throwable_InitCauseOnce has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Throwable_InitCauseOnce.html");
			RVMLogging.out.println(Level.WARNING, "initCause should not be called more than once.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Throwable_InitCauseOnceMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_t was suppressed to reduce memory overhead

	//alive_parameters_0 = [Throwable t]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//createWithoutThrowable
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//createWithThrowable
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 2:
			//initCause
			//alive_t
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 3;
	}

	public static int getNumberOfStates() {
		return 5;
	}

}
class TreeMap_ComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			TreeMap_ComparableRawMonitor ret = (TreeMap_ComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	private void validate(Object elem, String msg) {
		if (!(elem instanceof Comparable)) {
			RVMLogging.out.println(Level.CRITICAL, msg);
			RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a TreeMap object.");
		}
	}

	private void validateAll(Map src, String msg) {
		for (Map.Entry entry : (Collection<Map.Entry>) src.entrySet()) {
			validate(entry.getKey(), msg);
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_create(Map src) {
		RVM_lastevent = 0;
		{
			validateAll(src, "Specification TreeMap_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/TreeMap_Comparable.html");
		}
		return true;
	}

	final boolean event_put(Object key) {
		RVM_lastevent = 1;
		{
			validate(key, "Specification TreeMap_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/TreeMap_Comparable.html");
		}
		return true;
	}

	final boolean event_putall(Map src) {
		RVM_lastevent = 2;
		{
			validateAll(src, "Specification TreeMap_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/TreeMap_Comparable.html");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//create
			return;
			case 1:
			//put
			return;
			case 2:
			//putall
			return;
		}
		return;
	}

}
class TreeSet_ComparableRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			TreeSet_ComparableRawMonitor ret = (TreeSet_ComparableRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_add(Object e) {
		RVM_lastevent = 0;
		{
			if (!(e instanceof Comparable)) {
				RVMLogging.out.println(Level.CRITICAL, "Specification TreeSet_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/TreeSet_Comparable.html");
				RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a TreeSet object.");
			}
		}
		return true;
	}

	final boolean event_addall(Collection c) {
		RVM_lastevent = 1;
		{
			for (Object elem : c) {
				if (!(elem instanceof Comparable)) {
					RVMLogging.out.println(Level.CRITICAL, "Specification TreeSet_Comparable has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/TreeSet_Comparable.html");
					RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a TreeSet object.");
				}
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//add
			return;
			case 1:
			//addall
			return;
		}
		return;
	}

}
class URLConnection_ConnectMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			URLConnection_ConnectMonitor ret = (URLConnection_ConnectMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_explicit[] = {1, 2, 2, 3};;
	static final int Prop_1_transition_implicit[] = {1, 3, 3, 3};;

	volatile boolean URLConnection_ConnectMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	URLConnection_ConnectMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_explicit(URLConnection c) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_explicit) ;
		this.URLConnection_ConnectMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_implicit(URLConnection c) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_implicit) ;
		this.URLConnection_ConnectMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification URLConnection_Connect has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/URLConnection_Connect.html");
			RVMLogging.out.println(Level.CRITICAL, "URLConnection.connect() has been called multiple twice.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		URLConnection_ConnectMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [URLConnection c]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//explicit
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//implicit
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class URLConnection_OverrideGetPermissionRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			URLConnection_OverrideGetPermissionRawMonitor ret = (URLConnection_OverrideGetPermissionRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_staticinit(org.aspectj.lang.Signature staticsig) {
		RVM_lastevent = 0;
		{
			org.aspectj.lang.Signature initsig = staticsig;
			Class klass = initsig.getDeclaringType();
			Method overriden = null;
			while (klass != null && !klass.getName().equals("java.net.URLConnection")) {
				try {
					for (Method m : klass.getDeclaredMethods()) {
						if (!m.getName().equals("getPermission")) continue;
						if (m.getParameterTypes().length != 0) continue;
						overriden = m;
						break;
					}
					if (overriden != null) break;
				} catch (SecurityException e) {
				}
				klass = klass.getSuperclass();
			}
			if (overriden == null) {
				RVMLogging.out.println(Level.CRITICAL, "Specification URLConnection_OverrideGetPermission has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/URLConnection_OverrideGetPermission.html");
				RVMLogging.out.println(Level.CRITICAL, "A URLConnection class should override the getPermission() method.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//staticinit
			return;
		}
		return;
	}

}
class URLConnection_SetBeforeConnectMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			URLConnection_SetBeforeConnectMonitor ret = (URLConnection_SetBeforeConnectMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_set[] = {0, 2, 2};;
	static final int Prop_1_transition_connect[] = {1, 1, 2};;

	volatile boolean URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = false;

	private final AtomicInteger pairValue;

	URLConnection_SetBeforeConnectMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_set(URLConnection c) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_set) ;
		this.URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_connect(URLConnection c) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_connect) ;
		this.URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_fail (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification URLConnection_SetBeforeConnect has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/URLConnection_SetBeforeConnect.html");
			RVMLogging.out.println(Level.CRITICAL, "Options were specified after the connection was made.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail = false;
	}

	// RVMRef_c was suppressed to reduce memory overhead

	//alive_parameters_0 = [URLConnection c]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//set
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//connect
			//alive_c
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 3;
	}

}
class URLDecoder_DecodeUTF8RawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			URLDecoder_DecodeUTF8RawMonitor ret = (URLDecoder_DecodeUTF8RawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_decode(String enc) {
		RVM_lastevent = 0;
		{
			if (enc.equalsIgnoreCase("utf-8") || enc.equalsIgnoreCase("utf8")) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification URLDecoder_DecodeUTF8 has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/URLDecoder_DecodeUTF8.html");
			RVMLogging.out.println(Level.CRITICAL, "The used encoding '" + enc + "' may introduce incompatibilites.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//decode
			return;
		}
		return;
	}

}
class URLEncoder_EncodeUTF8RawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			URLEncoder_EncodeUTF8RawMonitor ret = (URLEncoder_EncodeUTF8RawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_encode(String enc) {
		RVM_lastevent = 0;
		{
			if (enc.equalsIgnoreCase("utf-8") || enc.equalsIgnoreCase("utf8")) return true;
			RVMLogging.out.println(Level.CRITICAL, "Specification URLEncoder_EncodeUTF8 has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/URLEncoder_EncodeUTF8.html");
			RVMLogging.out.println(Level.CRITICAL, "The used encoding '" + enc + "' may introduce incompatibilites.");
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//encode
			return;
		}
		return;
	}

}
class URL_SetURLStreamHandlerFactoryMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			URL_SetURLStreamHandlerFactoryMonitor ret = (URL_SetURLStreamHandlerFactoryMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_set[] = {1, 2, 2, 3};;

	volatile boolean URL_SetURLStreamHandlerFactoryMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	URL_SetURLStreamHandlerFactoryMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_set() {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_set) ;
		this.URL_SetURLStreamHandlerFactoryMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification URL_SetURLStreamHandlerFactory has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/URL_SetURLStreamHandlerFactory.html");
			RVMLogging.out.println(Level.CRITICAL, "URL.setURLStreamHandlerFactory() can be called at most once in a given Java Virtual Machine.");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		URL_SetURLStreamHandlerFactoryMonitor_Prop_1_Category_match = false;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//set
			return;
		}
		return;
	}

	public static int getNumberOfEvents() {
		return 1;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}
class Vector_InsertIndexRawMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractSynchronizedMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Vector_InsertIndexRawMonitor ret = (Vector_InsertIndexRawMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	@Override
	public final int getState() {
		return -1;
	}

	final boolean event_insert(Vector v, int index) {
		RVM_lastevent = 0;
		{
			if (!(0 <= index && index <= v.size())) {
				RVMLogging.out.println(Level.CRITICAL, "Specification Vector_InsertIndex has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Vector_InsertIndex.html");
				RVMLogging.out.println(Level.CRITICAL, "The index passed to insertElementAt() is invalid.");
			}
		}
		return true;
	}

	final void reset() {
		RVM_lastevent = -1;
	}

	@Override
	protected final void terminateInternal(int idnum) {
		switch(idnum){
		}
		switch(RVM_lastevent) {
			case -1:
			return;
			case 0:
			//insert
			return;
		}
		return;
	}

}
class Writer_ManipulateAfterCloseMonitor extends com.runtimeverification.rvmonitor.java.rt.tablebase.AbstractAtomicMonitor implements Cloneable, com.runtimeverification.rvmonitor.java.rt.RVMObject {
	protected Object clone() {
		try {
			Writer_ManipulateAfterCloseMonitor ret = (Writer_ManipulateAfterCloseMonitor) super.clone();
			return ret;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError(e.toString());
		}
	}

	static final int Prop_1_transition_manipulate[] = {3, 2, 2, 3};;
	static final int Prop_1_transition_close[] = {1, 1, 3, 3};;

	volatile boolean Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;

	private final AtomicInteger pairValue;

	Writer_ManipulateAfterCloseMonitor() {
		this.pairValue = new AtomicInteger(this.calculatePairValue(-1, 0) ) ;

	}

	@Override public final int getState() {
		return this.getState(this.pairValue.get() ) ;
	}
	@Override public final int getLastEvent() {
		return this.getLastEvent(this.pairValue.get() ) ;
	}
	private final int getState(int pairValue) {
		return (pairValue & 3) ;
	}
	private final int getLastEvent(int pairValue) {
		return (pairValue >> 2) ;
	}
	private final int calculatePairValue(int lastEvent, int state) {
		return (((lastEvent + 1) << 2) | state) ;
	}

	private final int handleEvent(int eventId, int[] table) {
		int nextstate;
		while (true) {
			int oldpairvalue = this.pairValue.get() ;
			int oldstate = this.getState(oldpairvalue) ;
			nextstate = table [ oldstate ];
			int nextpairvalue = this.calculatePairValue(eventId, nextstate) ;
			if (this.pairValue.compareAndSet(oldpairvalue, nextpairvalue) ) {
				break;
			}
		}
		return nextstate;
	}

	final boolean Prop_1_event_manipulate(Writer w) {
		{
		}

		int nextstate = this.handleEvent(0, Prop_1_transition_manipulate) ;
		this.Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final boolean Prop_1_event_close(Writer w) {
		{
		}

		int nextstate = this.handleEvent(1, Prop_1_transition_close) ;
		this.Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match = nextstate == 2;

		return true;
	}

	final void Prop_1_handler_match (){
		{
			RVMLogging.out.println(Level.CRITICAL, "Specification Writer_ManipulateAfterClose has been violated on line " + com.runtimeverification.rvmonitor.java.rt.ViolationRecorder.getLineOfCode() + ". Documentation for this property can be found at http://runtimeverification.com/monitor/annotated-java/__properties/html/mop/Writer_ManipulateAfterClose.html");
			RVMLogging.out.println(Level.CRITICAL, "write() or flush() was invoked after close().");
		}

	}

	final void reset() {
		this.pairValue.set(this.calculatePairValue(-1, 0) ) ;

		Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match = false;
	}

	// RVMRef_w was suppressed to reduce memory overhead

	//alive_parameters_0 = [Writer w]
	boolean alive_parameters_0 = true;

	@Override
	protected final void terminateInternal(int idnum) {
		int lastEvent = this.getLastEvent();

		switch(idnum){
			case 0:
			alive_parameters_0 = false;
			break;
		}
		switch(lastEvent) {
			case -1:
			return;
			case 0:
			//manipulate
			//alive_w
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

			case 1:
			//close
			//alive_w
			if(!(alive_parameters_0)){
				RVM_terminated = true;
				return;
			}
			break;

		}
		return;
	}

	public static int getNumberOfEvents() {
		return 2;
	}

	public static int getNumberOfStates() {
		return 4;
	}

}

public final class MultiSpec_1RuntimeMonitor implements com.runtimeverification.rvmonitor.java.rt.RVMObject {
	public static boolean skipEvent = false;
	private static com.runtimeverification.rvmonitor.java.rt.map.RVMMapManager MultiSpec_1MapManager;
	static {
		MultiSpec_1MapManager = new com.runtimeverification.rvmonitor.java.rt.map.RVMMapManager();
		MultiSpec_1MapManager.start();
	}

	// Declarations for the Lock
	static final ReentrantLock MultiSpec_1_RVMLock = new ReentrantLock();
	static final Condition MultiSpec_1_RVMLock_cond = MultiSpec_1_RVMLock.newCondition();

	// Declarations for Timestamps
	private static long PipedStream_SingleThread_timestamp = 1;
	private static long Collections_SynchronizedMap_timestamp = 1;
	private static long ObjectOutput_Close_timestamp = 1;
	private static long Console_FillZeroPassword_timestamp = 1;
	private static long Collections_SynchronizedCollection_timestamp = 1;
	private static long ObjectInput_Close_timestamp = 1;
	private static long NavigableMap_Modification_timestamp = 1;
	private static long NavigableMap_UnsafeIterator_timestamp = 1;
	private static long Map_UnsafeIterator_timestamp = 1;
	private static long PasswordAuthentication_FillZeroPassword_timestamp = 1;
	private static long NavigableSet_Modification_timestamp = 1;
	private static long File_DeleteTempFile_timestamp = 1;
	private static long ObjectStreamClass_Initialize_timestamp = 1;

	private static boolean Appendable_ThreadSafe_activated = false;
	private static boolean ArrayDeque_NonNull_activated = false;
	private static boolean ArrayDeque_UnsafeIterator_activated = false;
	private static boolean Arrays_Comparable_activated = false;
	private static boolean Arrays_DeepHashCode_activated = false;
	private static boolean Arrays_MutuallyComparable_activated = false;
	private static boolean Arrays_SortBeforeBinarySearch_activated = false;
	private static boolean Authenticator_OverrideGetPasswordAuthentication_activated = false;
	private static boolean Boolean_StaticFactory_activated = false;
	private static boolean BufferedInputStream_SynchronizedFill_activated = false;
	private static boolean ByteArrayOutputStream_FlushBeforeRetrieve_activated = false;
	private static boolean Byte_BadDecodeArg_activated = false;
	private static boolean Byte_BadParsingArgs_activated = false;
	private static boolean Byte_StaticFactory_activated = false;
	private static boolean CharSequence_NotInMap_activated = false;
	private static boolean CharSequence_NotInSet_activated = false;
	private static boolean CharSequence_UndefinedHashCode_activated = false;
	private static boolean Character_StaticFactory_activated = false;
	private static boolean Character_ValidateChar_activated = false;
	private static boolean ClassLoader_UnsafeClassDefinition_activated = false;
	private static boolean Closeable_MeaninglessClose_activated = false;
	private static boolean Closeable_MultipleClose_activated = false;
	private static boolean Collection_HashCode_activated = false;
	private static boolean Collection_StandardConstructors_activated = false;
	private static boolean Collection_UnsafeIterator_activated = false;
	private static boolean Collection_UnsynchronizedAddAll_activated = false;
	private static boolean Collections_Comparable_activated = false;
	private static boolean Collections_CopySize_activated = false;
	private static boolean Collections_ImplementComparable_activated = false;
	private static boolean Collections_NewSetFromMap_activated = false;
	private static boolean Collections_SortBeforeBinarySearch_activated = false;
	private static boolean Collections_SynchronizedCollection_activated = false;
	private static boolean Collections_SynchronizedMap_activated = false;
	private static boolean Collections_UnnecessaryNewSetFromMap_activated = false;
	private static boolean Comparable_CompareToNull_activated = false;
	private static boolean Comparable_CompareToNullException_activated = false;
	private static boolean Console_CloseReader_activated = false;
	private static boolean Console_CloseWriter_activated = false;
	private static boolean Console_FillZeroPassword_activated = false;
	private static boolean ContentHandler_GetContent_activated = false;
	private static boolean DatagramPacket_Length_activated = false;
	private static boolean DatagramPacket_SetLength_activated = false;
	private static boolean DatagramSocket_Port_activated = false;
	private static boolean DatagramSocket_SoTimeout_activated = false;
	private static boolean DatagramSocket_TrafficClass_activated = false;
	private static boolean Deque_OfferRatherThanAdd_activated = false;
	private static boolean Dictionary_NullKeyOrValue_activated = false;
	private static boolean Dictionary_Obsolete_activated = false;
	private static boolean Double_StaticFactory_activated = false;
	private static boolean EnumMap_NonNull_activated = false;
	private static boolean EnumSet_NonNull_activated = false;
	private static boolean Enum_NoExtraWhiteSpace_activated = false;
	private static boolean Enum_NoOrdinal_activated = false;
	private static boolean Enum_UserFriendlyName_activated = false;
	private static boolean Enumeration_Obsolete_activated = false;
	private static boolean File_DeleteTempFile_activated = false;
	private static boolean File_LengthOnDirectory_activated = false;
	private static boolean Float_StaticFactory_activated = false;
	private static boolean HttpCookie_Domain_activated = false;
	private static boolean HttpCookie_Name_activated = false;
	private static boolean HttpURLConnection_SetBeforeConnect_activated = false;
	private static boolean IDN_ToAscii_activated = false;
	private static boolean InetAddress_IsReachable_activated = false;
	private static boolean InetSocketAddress_Port_activated = false;
	private static boolean InputStream_ManipulateAfterClose_activated = false;
	private static boolean InputStream_MarkAfterClose_activated = false;
	private static boolean InputStream_MarkReset_activated = false;
	private static boolean InputStream_ReadAheadLimit_activated = false;
	private static boolean InputStream_UnmarkedReset_activated = false;
	private static boolean Integer_BadDecodeArg_activated = false;
	private static boolean Integer_StaticFactory_activated = false;
	private static boolean InvalidPropertiesFormatException_NonSerializable_activated = false;
	private static boolean Iterator_HasNext_activated = false;
	private static boolean Iterator_RemoveOnce_activated = false;
	private static boolean ListIterator_RemoveOnce_activated = false;
	private static boolean ListIterator_Set_activated = false;
	private static boolean ListIterator_hasNextPrevious_activated = false;
	private static boolean List_UnsafeListIterator_activated = false;
	private static boolean List_UnsynchronizedSubList_activated = false;
	private static boolean Long_BadDecodeArg_activated = false;
	private static boolean Long_BadParsingArgs_activated = false;
	private static boolean Long_StaticFactory_activated = false;
	private static boolean Map_CollectionViewAdd_activated = false;
	private static boolean Map_ItselfAsKey_activated = false;
	private static boolean Map_ItselfAsValue_activated = false;
	private static boolean Map_StandardConstructors_activated = false;
	private static boolean Map_UnsafeIterator_activated = false;
	private static boolean Map_UnsynchronizedAddAll_activated = false;
	private static boolean Math_ContendedRandom_activated = false;
	private static boolean MulticastSocket_TTL_activated = false;
	private static boolean NavigableMap_Modification_activated = false;
	private static boolean NavigableMap_UnsafeIterator_activated = false;
	private static boolean NavigableSet_Modification_activated = false;
	private static boolean NetPermission_Actions_activated = false;
	private static boolean NetPermission_Name_activated = false;
	private static boolean ObjectInput_Close_activated = false;
	private static boolean ObjectOutput_Close_activated = false;
	private static boolean ObjectStreamClass_Initialize_activated = false;
	private static boolean Object_MonitorOwner_activated = false;
	private static boolean Object_NoClone_activated = false;
	private static boolean OutputStream_ManipulateAfterClose_activated = false;
	private static boolean PasswordAuthentication_FillZeroPassword_activated = false;
	private static boolean PipedInputStream_UnconnectedRead_activated = false;
	private static boolean PipedOutputStream_UnconnectedWrite_activated = false;
	private static boolean PipedStream_SingleThread_activated = false;
	private static boolean PriorityQueue_NonComparable_activated = false;
	private static boolean PriorityQueue_NonNull_activated = false;
	private static boolean ProcessBuilder_NullKeyOrValue_activated = false;
	private static boolean ProcessBuilder_ThreadSafe_activated = false;
	private static boolean Properties_ManipulateAfterLoad_activated = false;
	private static boolean PushbackInputStream_UnreadAheadLimit_activated = false;
	private static boolean RandomAccessFile_ManipulateAfterClose_activated = false;
	private static boolean Random_OverrideNext_activated = false;
	private static boolean Reader_ManipulateAfterClose_activated = false;
	private static boolean Reader_MarkReset_activated = false;
	private static boolean Reader_ReadAheadLimit_activated = false;
	private static boolean Reader_UnmarkedReset_activated = false;
	private static boolean ResourceBundleControl_MutateFormatList_activated = false;
	private static boolean Runnable_OverrideRun_activated = false;
	private static boolean RuntimePermission_NullAction_activated = false;
	private static boolean RuntimePermission_PermName_activated = false;
	private static boolean Scanner_ManipulateAfterClose_activated = false;
	private static boolean Scanner_SearchAfterClose_activated = false;
	private static boolean SecurityManager_Permission_activated = false;
	private static boolean Serializable_NoArgConstructor_activated = false;
	private static boolean Serializable_UID_activated = false;
	private static boolean ServerSocket_Backlog_activated = false;
	private static boolean ServerSocket_LargeReceiveBuffer_activated = false;
	private static boolean ServerSocket_PerformancePreferences_activated = false;
	private static boolean ServerSocket_Port_activated = false;
	private static boolean ServerSocket_ReuseAddress_activated = false;
	private static boolean ServerSocket_SetTimeoutBeforeBlocking_activated = false;
	private static boolean ServerSocket_Timeout_activated = false;
	private static boolean ServiceLoaderIterator_Remove_activated = false;
	private static boolean ServiceLoader_MultipleConcurrentThreads_activated = false;
	private static boolean Set_ItselfAsElement_activated = false;
	private static boolean Short_BadDecodeArg_activated = false;
	private static boolean Short_BadParsingArgs_activated = false;
	private static boolean Short_StaticFactory_activated = false;
	private static boolean ShutdownHook_LateRegister_activated = false;
	private static boolean ShutdownHook_PrematureStart_activated = false;
	private static boolean ShutdownHook_SystemExit_activated = false;
	private static boolean ShutdownHook_UnsafeAWTCall_activated = false;
	private static boolean ShutdownHook_UnsafeSwingCall_activated = false;
	private static boolean SocketImpl_CloseOutput_activated = false;
	private static boolean SocketPermission_Actions_activated = false;
	private static boolean Socket_CloseInput_activated = false;
	private static boolean Socket_CloseOutput_activated = false;
	private static boolean Socket_InputStreamUnavailable_activated = false;
	private static boolean Socket_LargeReceiveBuffer_activated = false;
	private static boolean Socket_OutputStreamUnavailable_activated = false;
	private static boolean Socket_PerformancePreferences_activated = false;
	private static boolean Socket_ReuseAddress_activated = false;
	private static boolean Socket_ReuseSocket_activated = false;
	private static boolean Socket_SetTimeoutBeforeBlockingInput_activated = false;
	private static boolean Socket_SetTimeoutBeforeBlockingOutput_activated = false;
	private static boolean Socket_Timeout_activated = false;
	private static boolean Socket_TrafficClass_activated = false;
	private static boolean SortedMap_StandardConstructors_activated = false;
	private static boolean SortedSet_Comparable_activated = false;
	private static boolean SortedSet_StandardConstructors_activated = false;
	private static boolean StreamTokenizer_AccessInvalidField_activated = false;
	private static boolean StrictMath_ContendedRandom_activated = false;
	private static boolean StringBuffer_SingleThreadUsage_activated = false;
	private static boolean StringBuilder_ThreadSafe_activated = false;
	private static boolean StringTokenizer_HasMoreElements_activated = false;
	private static boolean String_UseStringBuilder_activated = false;
	private static boolean System_NullArrayCopy_activated = false;
	private static boolean System_WrongKeyOrValue_activated = false;
	private static boolean Thread_SetDaemonBeforeStart_activated = false;
	private static boolean Thread_StartOnce_activated = false;
	private static boolean Throwable_InitCauseOnce_activated = false;
	private static boolean TreeMap_Comparable_activated = false;
	private static boolean TreeSet_Comparable_activated = false;
	private static boolean URLConnection_Connect_activated = false;
	private static boolean URLConnection_OverrideGetPermission_activated = false;
	private static boolean URLConnection_SetBeforeConnect_activated = false;
	private static boolean URLDecoder_DecodeUTF8_activated = false;
	private static boolean URLEncoder_EncodeUTF8_activated = false;
	private static boolean URL_SetURLStreamHandlerFactory_activated = false;
	private static boolean Vector_InsertIndex_activated = false;
	private static boolean Writer_ManipulateAfterClose_activated = false;

	// Declarations for Indexing Trees
	private static Object Appendable_ThreadSafe_a_Map_cachekey_a;
	private static Appendable_ThreadSafeMonitor Appendable_ThreadSafe_a_Map_cachevalue;
	private static final MapOfMonitor<Appendable_ThreadSafeMonitor> Appendable_ThreadSafe_a_Map = new MapOfMonitor<Appendable_ThreadSafeMonitor>(0) ;

	private static final ArrayDeque_NonNullRawMonitor ArrayDeque_NonNull__Map = new ArrayDeque_NonNullRawMonitor() ;

	private static Object ArrayDeque_UnsafeIterator_i_Map_cachekey_i;
	private static ArrayDeque_UnsafeIteratorMonitor_Set ArrayDeque_UnsafeIterator_i_Map_cachevalue;
	private static Object ArrayDeque_UnsafeIterator_q_Map_cachekey_q;
	private static Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set> ArrayDeque_UnsafeIterator_q_Map_cachevalue;
	private static Object ArrayDeque_UnsafeIterator_q_i_Map_cachekey_i;
	private static Object ArrayDeque_UnsafeIterator_q_i_Map_cachekey_q;
	private static ArrayDeque_UnsafeIteratorMonitor ArrayDeque_UnsafeIterator_q_i_Map_cachevalue;
	private static final MapOfSet<ArrayDeque_UnsafeIteratorMonitor_Set> ArrayDeque_UnsafeIterator_i_Map = new MapOfSet<ArrayDeque_UnsafeIteratorMonitor_Set>(1) ;
	private static final MapOfMapSet<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set> ArrayDeque_UnsafeIterator_q_i_Map = new MapOfMapSet<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set>(0) ;

	private static final Arrays_ComparableRawMonitor Arrays_Comparable__Map = new Arrays_ComparableRawMonitor() ;

	private static final Arrays_DeepHashCodeRawMonitor Arrays_DeepHashCode__Map = new Arrays_DeepHashCodeRawMonitor() ;

	private static final Arrays_MutuallyComparableRawMonitor Arrays_MutuallyComparable__Map = new Arrays_MutuallyComparableRawMonitor() ;

	private static Object Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr;
	private static Arrays_SortBeforeBinarySearchMonitor Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
	private static final MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> Arrays_SortBeforeBinarySearch_arr_Map = new MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor>(0) ;

	private static final Authenticator_OverrideGetPasswordAuthenticationRawMonitor Authenticator_OverrideGetPasswordAuthentication__Map = new Authenticator_OverrideGetPasswordAuthenticationRawMonitor() ;

	private static final Boolean_StaticFactoryRawMonitor Boolean_StaticFactory__Map = new Boolean_StaticFactoryRawMonitor() ;

	private static Object BufferedInputStream_SynchronizedFill_i_Map_cachekey_i;
	private static BufferedInputStream_SynchronizedFillMonitor BufferedInputStream_SynchronizedFill_i_Map_cachevalue;
	private static final MapOfMonitor<BufferedInputStream_SynchronizedFillMonitor> BufferedInputStream_SynchronizedFill_i_Map = new MapOfMonitor<BufferedInputStream_SynchronizedFillMonitor>(0) ;

	private static Object ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachekey_b;
	private static Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachevalue;
	private static Object ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachekey_b;
	private static Object ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachekey_o;
	private static ByteArrayOutputStream_FlushBeforeRetrieveMonitor ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachevalue;
	private static Object ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o;
	private static ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map = new MapOfMapSet<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set>(0) ;
	private static final MapOfSet<ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> ByteArrayOutputStream_FlushBeforeRetrieve_o_Map = new MapOfSet<ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set>(1) ;

	private static final Byte_BadDecodeArgRawMonitor Byte_BadDecodeArg__Map = new Byte_BadDecodeArgRawMonitor() ;

	private static final Byte_BadParsingArgsRawMonitor Byte_BadParsingArgs__Map = new Byte_BadParsingArgsRawMonitor() ;

	private static final Byte_StaticFactoryRawMonitor Byte_StaticFactory__Map = new Byte_StaticFactoryRawMonitor() ;

	private static Object CharSequence_NotInMap_map_Map_cachekey_map;
	private static CharSequence_NotInMapRawMonitor CharSequence_NotInMap_map_Map_cachevalue;
	private static final MapOfMonitor<CharSequence_NotInMapRawMonitor> CharSequence_NotInMap_map_Map = new MapOfMonitor<CharSequence_NotInMapRawMonitor>(0) ;

	private static final CharSequence_NotInSetRawMonitor CharSequence_NotInSet__Map = new CharSequence_NotInSetRawMonitor() ;

	private static final CharSequence_UndefinedHashCodeRawMonitor CharSequence_UndefinedHashCode__Map = new CharSequence_UndefinedHashCodeRawMonitor() ;

	private static final Character_StaticFactoryRawMonitor Character_StaticFactory__Map = new Character_StaticFactoryRawMonitor() ;

	private static final Character_ValidateCharRawMonitor Character_ValidateChar__Map = new Character_ValidateCharRawMonitor() ;

	private static final ClassLoader_UnsafeClassDefinitionRawMonitor ClassLoader_UnsafeClassDefinition__Map = new ClassLoader_UnsafeClassDefinitionRawMonitor() ;

	private static final Closeable_MeaninglessCloseRawMonitor Closeable_MeaninglessClose__Map = new Closeable_MeaninglessCloseRawMonitor() ;

	private static Object Closeable_MultipleClose_c_Map_cachekey_c;
	private static Closeable_MultipleCloseMonitor Closeable_MultipleClose_c_Map_cachevalue;
	private static final MapOfMonitor<Closeable_MultipleCloseMonitor> Closeable_MultipleClose_c_Map = new MapOfMonitor<Closeable_MultipleCloseMonitor>(0) ;

	private static final Collection_HashCodeRawMonitor Collection_HashCode__Map = new Collection_HashCodeRawMonitor() ;

	private static final Collection_StandardConstructorsRawMonitor Collection_StandardConstructors__Map = new Collection_StandardConstructorsRawMonitor() ;

	private static Object Collection_UnsafeIterator_c_Map_cachekey_c;
	private static Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set> Collection_UnsafeIterator_c_Map_cachevalue;
	private static Object Collection_UnsafeIterator_c_i_Map_cachekey_c;
	private static Object Collection_UnsafeIterator_c_i_Map_cachekey_i;
	private static Collection_UnsafeIteratorMonitor Collection_UnsafeIterator_c_i_Map_cachevalue;
	private static Object Collection_UnsafeIterator_i_Map_cachekey_i;
	private static Collection_UnsafeIteratorMonitor_Set Collection_UnsafeIterator_i_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set> Collection_UnsafeIterator_c_i_Map = new MapOfMapSet<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set>(0) ;
	private static final MapOfSet<Collection_UnsafeIteratorMonitor_Set> Collection_UnsafeIterator_i_Map = new MapOfSet<Collection_UnsafeIteratorMonitor_Set>(1) ;

	private static Object Collection_UnsynchronizedAddAll_s_Map_cachekey_s;
	private static Collection_UnsynchronizedAddAllMonitor_Set Collection_UnsynchronizedAddAll_s_Map_cachevalue;
	private static Object Collection_UnsynchronizedAddAll_t_s_Map_cachekey_s;
	private static Object Collection_UnsynchronizedAddAll_t_s_Map_cachekey_t;
	private static Collection_UnsynchronizedAddAllMonitor Collection_UnsynchronizedAddAll_t_s_Map_cachevalue;
	private static final MapOfSet<Collection_UnsynchronizedAddAllMonitor_Set> Collection_UnsynchronizedAddAll_s_Map = new MapOfSet<Collection_UnsynchronizedAddAllMonitor_Set>(1) ;
	private static final MapOfMap<MapOfMonitor<Collection_UnsynchronizedAddAllMonitor>> Collection_UnsynchronizedAddAll_t_s_Map = new MapOfMap<MapOfMonitor<Collection_UnsynchronizedAddAllMonitor>>(0) ;

	private static final Collections_ComparableRawMonitor Collections_Comparable__Map = new Collections_ComparableRawMonitor() ;

	private static final Collections_CopySizeRawMonitor Collections_CopySize__Map = new Collections_CopySizeRawMonitor() ;

	private static final Collections_ImplementComparableRawMonitor Collections_ImplementComparable__Map = new Collections_ImplementComparableRawMonitor() ;

	private static Object Collections_NewSetFromMap_map_Map_cachekey_map;
	private static Collections_NewSetFromMapMonitor Collections_NewSetFromMap_map_Map_cachevalue;
	private static final MapOfMonitor<Collections_NewSetFromMapMonitor> Collections_NewSetFromMap_map_Map = new MapOfMonitor<Collections_NewSetFromMapMonitor>(0) ;

	private static Object Collections_SortBeforeBinarySearch_list_Map_cachekey_list;
	private static Collections_SortBeforeBinarySearchMonitor Collections_SortBeforeBinarySearch_list_Map_cachevalue;
	private static final MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> Collections_SortBeforeBinarySearch_list_Map = new MapOfMonitor<Collections_SortBeforeBinarySearchMonitor>(0) ;

	private static Object Collections_SynchronizedCollection_col_Map_cachekey_col;
	private static Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> Collections_SynchronizedCollection_col_Map_cachevalue;
	private static Object Collections_SynchronizedCollection_col_iter_Map_cachekey_col;
	private static Object Collections_SynchronizedCollection_col_iter_Map_cachekey_iter;
	private static ICollections_SynchronizedCollectionMonitor Collections_SynchronizedCollection_col_iter_Map_cachevalue;
	private static Object Collections_SynchronizedCollection_iter_Map_cachekey_iter;
	private static Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> Collections_SynchronizedCollection_iter_Map_cachevalue;
	private static final MapOfSetMonitor<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> Collections_SynchronizedCollection_iter_Map = new MapOfSetMonitor<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor>(1) ;
	private static final MapOfAll<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> Collections_SynchronizedCollection_col_iter_Map = new MapOfAll<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor>(0) ;

	private static Object Collections_SynchronizedMap_col_iter_Map_cachekey_col;
	private static Object Collections_SynchronizedMap_col_iter_Map_cachekey_iter;
	private static Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> Collections_SynchronizedMap_col_iter_Map_cachevalue;
	private static Object Collections_SynchronizedMap_iter_Map_cachekey_iter;
	private static Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> Collections_SynchronizedMap_iter_Map_cachevalue;
	private static Object Collections_SynchronizedMap_syncMap_Map_cachekey_syncMap;
	private static Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> Collections_SynchronizedMap_syncMap_Map_cachevalue;
	private static Object Collections_SynchronizedMap_syncMap_col_Map_cachekey_col;
	private static Object Collections_SynchronizedMap_syncMap_col_Map_cachekey_syncMap;
	private static Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> Collections_SynchronizedMap_syncMap_col_Map_cachevalue;
	private static Object Collections_SynchronizedMap_syncMap_col_iter_Map_cachekey_col;
	private static Object Collections_SynchronizedMap_syncMap_col_iter_Map_cachekey_iter;
	private static Object Collections_SynchronizedMap_syncMap_col_iter_Map_cachekey_syncMap;
	private static ICollections_SynchronizedMapMonitor Collections_SynchronizedMap_syncMap_col_iter_Map_cachevalue;
	private static final MapOfMap<MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>> Collections_SynchronizedMap_col_iter_Map = new MapOfMap<MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>>(1) ;
	private static final MapOfAll<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> Collections_SynchronizedMap_syncMap_col_iter_Map = new MapOfAll<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>(0) ;
	private static final MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> Collections_SynchronizedMap_iter_Map = new MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(2) ;
	private static Object Collections_SynchronizedMap_col__To__syncMap_col_Map_cachekey_col;
	private static Tuple2<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> Collections_SynchronizedMap_col__To__syncMap_col_Map_cachevalue;
	private static final MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> Collections_SynchronizedMap_col__To__syncMap_col_Map = new MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>(1) ;

	private static final Collections_UnnecessaryNewSetFromMapRawMonitor Collections_UnnecessaryNewSetFromMap__Map = new Collections_UnnecessaryNewSetFromMapRawMonitor() ;

	private static final Comparable_CompareToNullRawMonitor Comparable_CompareToNull__Map = new Comparable_CompareToNullRawMonitor() ;

	private static final Comparable_CompareToNullExceptionRawMonitor Comparable_CompareToNullException__Map = new Comparable_CompareToNullExceptionRawMonitor() ;

	private static Object Console_CloseReader_r_Map_cachekey_r;
	private static Console_CloseReaderMonitor Console_CloseReader_r_Map_cachevalue;
	private static final MapOfMonitor<Console_CloseReaderMonitor> Console_CloseReader_r_Map = new MapOfMonitor<Console_CloseReaderMonitor>(0) ;

	private static Object Console_CloseWriter_w_Map_cachekey_w;
	private static Console_CloseWriterMonitor Console_CloseWriter_w_Map_cachevalue;
	private static final MapOfMonitor<Console_CloseWriterMonitor> Console_CloseWriter_w_Map = new MapOfMonitor<Console_CloseWriterMonitor>(0) ;

	private static Object Console_FillZeroPassword_pwd_Map_cachekey_pwd;
	private static Console_FillZeroPasswordMonitor Console_FillZeroPassword_pwd_Map_cachevalue;
	private static final Tuple2<Console_FillZeroPasswordMonitor_Set, Console_FillZeroPasswordMonitor> Console_FillZeroPassword__Map = new Tuple2<Console_FillZeroPasswordMonitor_Set, Console_FillZeroPasswordMonitor>(new Console_FillZeroPasswordMonitor_Set() , null) ;
	private static final MapOfMonitor<Console_FillZeroPasswordMonitor> Console_FillZeroPassword_pwd_Map = new MapOfMonitor<Console_FillZeroPasswordMonitor>(0) ;

	private static final ContentHandler_GetContentRawMonitor ContentHandler_GetContent__Map = new ContentHandler_GetContentRawMonitor() ;

	private static final DatagramPacket_LengthRawMonitor DatagramPacket_Length__Map = new DatagramPacket_LengthRawMonitor() ;

	private static final DatagramPacket_SetLengthRawMonitor DatagramPacket_SetLength__Map = new DatagramPacket_SetLengthRawMonitor() ;

	private static final DatagramSocket_PortRawMonitor DatagramSocket_Port__Map = new DatagramSocket_PortRawMonitor() ;

	private static final DatagramSocket_SoTimeoutRawMonitor DatagramSocket_SoTimeout__Map = new DatagramSocket_SoTimeoutRawMonitor() ;

	private static final DatagramSocket_TrafficClassRawMonitor DatagramSocket_TrafficClass__Map = new DatagramSocket_TrafficClassRawMonitor() ;

	private static Object Deque_OfferRatherThanAdd_q_Map_cachekey_q;
	private static Deque_OfferRatherThanAddMonitor Deque_OfferRatherThanAdd_q_Map_cachevalue;
	private static final MapOfMonitor<Deque_OfferRatherThanAddMonitor> Deque_OfferRatherThanAdd_q_Map = new MapOfMonitor<Deque_OfferRatherThanAddMonitor>(0) ;

	private static final Dictionary_NullKeyOrValueRawMonitor Dictionary_NullKeyOrValue__Map = new Dictionary_NullKeyOrValueRawMonitor() ;

	private static Object Dictionary_Obsolete_d_Map_cachekey_d;
	private static Dictionary_ObsoleteMonitor Dictionary_Obsolete_d_Map_cachevalue;
	private static final MapOfMonitor<Dictionary_ObsoleteMonitor> Dictionary_Obsolete_d_Map = new MapOfMonitor<Dictionary_ObsoleteMonitor>(0) ;

	private static final Double_StaticFactoryRawMonitor Double_StaticFactory__Map = new Double_StaticFactoryRawMonitor() ;

	private static final EnumMap_NonNullRawMonitor EnumMap_NonNull__Map = new EnumMap_NonNullRawMonitor() ;

	private static final EnumSet_NonNullRawMonitor EnumSet_NonNull__Map = new EnumSet_NonNullRawMonitor() ;

	private static final Enum_NoExtraWhiteSpaceRawMonitor Enum_NoExtraWhiteSpace__Map = new Enum_NoExtraWhiteSpaceRawMonitor() ;

	private static final Enum_NoOrdinalRawMonitor Enum_NoOrdinal__Map = new Enum_NoOrdinalRawMonitor() ;

	private static final Enum_UserFriendlyNameRawMonitor Enum_UserFriendlyName__Map = new Enum_UserFriendlyNameRawMonitor() ;

	private static Object Enumeration_Obsolete_e_Map_cachekey_e;
	private static Enumeration_ObsoleteMonitor Enumeration_Obsolete_e_Map_cachevalue;
	private static final MapOfMonitor<Enumeration_ObsoleteMonitor> Enumeration_Obsolete_e_Map = new MapOfMonitor<Enumeration_ObsoleteMonitor>(0) ;

	private static Object File_DeleteTempFile_f_Map_cachekey_f;
	private static File_DeleteTempFileMonitor File_DeleteTempFile_f_Map_cachevalue;
	private static final Tuple2<File_DeleteTempFileMonitor_Set, File_DeleteTempFileMonitor> File_DeleteTempFile__Map = new Tuple2<File_DeleteTempFileMonitor_Set, File_DeleteTempFileMonitor>(new File_DeleteTempFileMonitor_Set() , null) ;
	private static final MapOfMonitor<File_DeleteTempFileMonitor> File_DeleteTempFile_f_Map = new MapOfMonitor<File_DeleteTempFileMonitor>(0) ;

	private static final File_LengthOnDirectoryRawMonitor File_LengthOnDirectory__Map = new File_LengthOnDirectoryRawMonitor() ;

	private static final Float_StaticFactoryRawMonitor Float_StaticFactory__Map = new Float_StaticFactoryRawMonitor() ;

	private static final HttpCookie_DomainRawMonitor HttpCookie_Domain__Map = new HttpCookie_DomainRawMonitor() ;

	private static final HttpCookie_NameRawMonitor HttpCookie_Name__Map = new HttpCookie_NameRawMonitor() ;

	private static Object HttpURLConnection_SetBeforeConnect_c_Map_cachekey_c;
	private static HttpURLConnection_SetBeforeConnectMonitor HttpURLConnection_SetBeforeConnect_c_Map_cachevalue;
	private static final MapOfMonitor<HttpURLConnection_SetBeforeConnectMonitor> HttpURLConnection_SetBeforeConnect_c_Map = new MapOfMonitor<HttpURLConnection_SetBeforeConnectMonitor>(0) ;

	private static final IDN_ToAsciiRawMonitor IDN_ToAscii__Map = new IDN_ToAsciiRawMonitor() ;

	private static final InetAddress_IsReachableRawMonitor InetAddress_IsReachable__Map = new InetAddress_IsReachableRawMonitor() ;

	private static final InetSocketAddress_PortRawMonitor InetSocketAddress_Port__Map = new InetSocketAddress_PortRawMonitor() ;

	private static Object InputStream_ManipulateAfterClose_i_Map_cachekey_i;
	private static InputStream_ManipulateAfterCloseMonitor InputStream_ManipulateAfterClose_i_Map_cachevalue;
	private static final MapOfMonitor<InputStream_ManipulateAfterCloseMonitor> InputStream_ManipulateAfterClose_i_Map = new MapOfMonitor<InputStream_ManipulateAfterCloseMonitor>(0) ;

	private static Object InputStream_MarkAfterClose_i_Map_cachekey_i;
	private static InputStream_MarkAfterCloseMonitor InputStream_MarkAfterClose_i_Map_cachevalue;
	private static final MapOfMonitor<InputStream_MarkAfterCloseMonitor> InputStream_MarkAfterClose_i_Map = new MapOfMonitor<InputStream_MarkAfterCloseMonitor>(0) ;

	private static final InputStream_MarkResetRawMonitor InputStream_MarkReset__Map = new InputStream_MarkResetRawMonitor() ;

	private static Object InputStream_ReadAheadLimit_i_Map_cachekey_i;
	private static InputStream_ReadAheadLimitMonitor InputStream_ReadAheadLimit_i_Map_cachevalue;
	private static final MapOfMonitor<InputStream_ReadAheadLimitMonitor> InputStream_ReadAheadLimit_i_Map = new MapOfMonitor<InputStream_ReadAheadLimitMonitor>(0) ;

	private static Object InputStream_UnmarkedReset_i_Map_cachekey_i;
	private static InputStream_UnmarkedResetMonitor InputStream_UnmarkedReset_i_Map_cachevalue;
	private static final MapOfMonitor<InputStream_UnmarkedResetMonitor> InputStream_UnmarkedReset_i_Map = new MapOfMonitor<InputStream_UnmarkedResetMonitor>(0) ;

	private static final Integer_BadDecodeArgRawMonitor Integer_BadDecodeArg__Map = new Integer_BadDecodeArgRawMonitor() ;

	private static final Integer_StaticFactoryRawMonitor Integer_StaticFactory__Map = new Integer_StaticFactoryRawMonitor() ;

	private static final InvalidPropertiesFormatException_NonSerializableRawMonitor InvalidPropertiesFormatException_NonSerializable__Map = new InvalidPropertiesFormatException_NonSerializableRawMonitor() ;

	private static Object Iterator_HasNext_i_Map_cachekey_i;
	private static Iterator_HasNextMonitor Iterator_HasNext_i_Map_cachevalue;
	private static final MapOfMonitor<Iterator_HasNextMonitor> Iterator_HasNext_i_Map = new MapOfMonitor<Iterator_HasNextMonitor>(0) ;

	private static Object Iterator_RemoveOnce_i_Map_cachekey_i;
	private static Iterator_RemoveOnceMonitor Iterator_RemoveOnce_i_Map_cachevalue;
	private static final MapOfMonitor<Iterator_RemoveOnceMonitor> Iterator_RemoveOnce_i_Map = new MapOfMonitor<Iterator_RemoveOnceMonitor>(0) ;

	private static Object ListIterator_RemoveOnce_i_Map_cachekey_i;
	private static ListIterator_RemoveOnceMonitor ListIterator_RemoveOnce_i_Map_cachevalue;
	private static final MapOfMonitor<ListIterator_RemoveOnceMonitor> ListIterator_RemoveOnce_i_Map = new MapOfMonitor<ListIterator_RemoveOnceMonitor>(0) ;

	private static Object ListIterator_Set_i_Map_cachekey_i;
	private static ListIterator_SetMonitor ListIterator_Set_i_Map_cachevalue;
	private static final MapOfMonitor<ListIterator_SetMonitor> ListIterator_Set_i_Map = new MapOfMonitor<ListIterator_SetMonitor>(0) ;

	private static Object ListIterator_hasNextPrevious_i_Map_cachekey_i;
	private static ListIterator_hasNextPreviousMonitor ListIterator_hasNextPrevious_i_Map_cachevalue;
	private static final MapOfMonitor<ListIterator_hasNextPreviousMonitor> ListIterator_hasNextPrevious_i_Map = new MapOfMonitor<ListIterator_hasNextPreviousMonitor>(0) ;

	private static Object List_UnsafeListIterator_i_Map_cachekey_i;
	private static List_UnsafeListIteratorMonitor_Set List_UnsafeListIterator_i_Map_cachevalue;
	private static Object List_UnsafeListIterator_l_Map_cachekey_l;
	private static Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set> List_UnsafeListIterator_l_Map_cachevalue;
	private static Object List_UnsafeListIterator_l_i_Map_cachekey_i;
	private static Object List_UnsafeListIterator_l_i_Map_cachekey_l;
	private static List_UnsafeListIteratorMonitor List_UnsafeListIterator_l_i_Map_cachevalue;
	private static final MapOfSet<List_UnsafeListIteratorMonitor_Set> List_UnsafeListIterator_i_Map = new MapOfSet<List_UnsafeListIteratorMonitor_Set>(1) ;
	private static final MapOfMapSet<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set> List_UnsafeListIterator_l_i_Map = new MapOfMapSet<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set>(0) ;

	private static Object List_UnsynchronizedSubList_b_Map_cachekey_b;
	private static Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set> List_UnsynchronizedSubList_b_Map_cachevalue;
	private static Object List_UnsynchronizedSubList_b_s_Map_cachekey_b;
	private static Object List_UnsynchronizedSubList_b_s_Map_cachekey_s;
	private static List_UnsynchronizedSubListMonitor List_UnsynchronizedSubList_b_s_Map_cachevalue;
	private static Object List_UnsynchronizedSubList_s_Map_cachekey_s;
	private static List_UnsynchronizedSubListMonitor_Set List_UnsynchronizedSubList_s_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set> List_UnsynchronizedSubList_b_s_Map = new MapOfMapSet<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set>(0) ;
	private static final MapOfSet<List_UnsynchronizedSubListMonitor_Set> List_UnsynchronizedSubList_s_Map = new MapOfSet<List_UnsynchronizedSubListMonitor_Set>(1) ;

	private static final Long_BadDecodeArgRawMonitor Long_BadDecodeArg__Map = new Long_BadDecodeArgRawMonitor() ;

	private static final Long_BadParsingArgsRawMonitor Long_BadParsingArgs__Map = new Long_BadParsingArgsRawMonitor() ;

	private static final Long_StaticFactoryRawMonitor Long_StaticFactory__Map = new Long_StaticFactoryRawMonitor() ;

	private static Object Map_CollectionViewAdd_c_Map_cachekey_c;
	private static Map_CollectionViewAddMonitor_Set Map_CollectionViewAdd_c_Map_cachevalue;
	private static Object Map_CollectionViewAdd_m_c_Map_cachekey_c;
	private static Object Map_CollectionViewAdd_m_c_Map_cachekey_m;
	private static Map_CollectionViewAddMonitor Map_CollectionViewAdd_m_c_Map_cachevalue;
	private static final MapOfMap<MapOfMonitor<Map_CollectionViewAddMonitor>> Map_CollectionViewAdd_m_c_Map = new MapOfMap<MapOfMonitor<Map_CollectionViewAddMonitor>>(0) ;
	private static final MapOfSet<Map_CollectionViewAddMonitor_Set> Map_CollectionViewAdd_c_Map = new MapOfSet<Map_CollectionViewAddMonitor_Set>(1) ;

	private static final Map_ItselfAsKeyRawMonitor Map_ItselfAsKey__Map = new Map_ItselfAsKeyRawMonitor() ;

	private static final Map_ItselfAsValueRawMonitor Map_ItselfAsValue__Map = new Map_ItselfAsValueRawMonitor() ;

	private static final Map_StandardConstructorsRawMonitor Map_StandardConstructors__Map = new Map_StandardConstructorsRawMonitor() ;

	private static Object Map_UnsafeIterator_c_Map_cachekey_c;
	private static Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_c_Map_cachevalue;
	private static Object Map_UnsafeIterator_c_i_Map_cachekey_c;
	private static Object Map_UnsafeIterator_c_i_Map_cachekey_i;
	private static Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_c_i_Map_cachevalue;
	private static Object Map_UnsafeIterator_i_Map_cachekey_i;
	private static Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_i_Map_cachevalue;
	private static Object Map_UnsafeIterator_m_Map_cachekey_m;
	private static Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_m_Map_cachevalue;
	private static Object Map_UnsafeIterator_m_c_Map_cachekey_c;
	private static Object Map_UnsafeIterator_m_c_Map_cachekey_m;
	private static Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> Map_UnsafeIterator_m_c_Map_cachevalue;
	private static Object Map_UnsafeIterator_m_c_i_Map_cachekey_c;
	private static Object Map_UnsafeIterator_m_c_i_Map_cachekey_i;
	private static Object Map_UnsafeIterator_m_c_i_Map_cachekey_m;
	private static IMap_UnsafeIteratorMonitor Map_UnsafeIterator_m_c_i_Map_cachevalue;
	private static final MapOfAll<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_c_i_Map = new MapOfAll<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(1) ;
	private static final MapOfAll<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_m_c_i_Map = new MapOfAll<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(0) ;
	private static final MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> Map_UnsafeIterator_i_Map = new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(2) ;
	private static Object Map_UnsafeIterator_c__To__m_c_Map_cachekey_c;
	private static Tuple2<Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> Map_UnsafeIterator_c__To__m_c_Map_cachevalue;
	private static final MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> Map_UnsafeIterator_c__To__m_c_Map = new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ;

	private static Object Map_UnsynchronizedAddAll_s_Map_cachekey_s;
	private static Map_UnsynchronizedAddAllMonitor_Set Map_UnsynchronizedAddAll_s_Map_cachevalue;
	private static Object Map_UnsynchronizedAddAll_t_s_Map_cachekey_s;
	private static Object Map_UnsynchronizedAddAll_t_s_Map_cachekey_t;
	private static Map_UnsynchronizedAddAllMonitor Map_UnsynchronizedAddAll_t_s_Map_cachevalue;
	private static final MapOfMap<MapOfMonitor<Map_UnsynchronizedAddAllMonitor>> Map_UnsynchronizedAddAll_t_s_Map = new MapOfMap<MapOfMonitor<Map_UnsynchronizedAddAllMonitor>>(0) ;
	private static final MapOfSet<Map_UnsynchronizedAddAllMonitor_Set> Map_UnsynchronizedAddAll_s_Map = new MapOfSet<Map_UnsynchronizedAddAllMonitor_Set>(1) ;

	private static final Math_ContendedRandomMonitor Math_ContendedRandom__Map = new Math_ContendedRandomMonitor() ;

	private static final MulticastSocket_TTLRawMonitor MulticastSocket_TTL__Map = new MulticastSocket_TTLRawMonitor() ;

	private static Object NavigableMap_Modification_c_Map_cachekey_c;
	private static Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_c_Map_cachevalue;
	private static Object NavigableMap_Modification_c_i_Map_cachekey_c;
	private static Object NavigableMap_Modification_c_i_Map_cachekey_i;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_c_i_Map_cachevalue;
	private static Object NavigableMap_Modification_i_Map_cachekey_i;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_i_Map_cachevalue;
	private static Object NavigableMap_Modification_m1_Map_cachekey_m1;
	private static Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m1_Map_cachevalue;
	private static Object NavigableMap_Modification_m1_c_Map_cachekey_c;
	private static Object NavigableMap_Modification_m1_c_Map_cachekey_m1;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m1_c_Map_cachevalue;
	private static Object NavigableMap_Modification_m1_m2_Map_cachekey_m1;
	private static Object NavigableMap_Modification_m1_m2_Map_cachekey_m2;
	private static Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_m1_m2_Map_cachevalue;
	private static Object NavigableMap_Modification_m1_m2_c_Map_cachekey_c;
	private static Object NavigableMap_Modification_m1_m2_c_Map_cachekey_m1;
	private static Object NavigableMap_Modification_m1_m2_c_Map_cachekey_m2;
	private static Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m1_m2_c_Map_cachevalue;
	private static Object NavigableMap_Modification_m1_m2_c_i_Map_cachekey_c;
	private static Object NavigableMap_Modification_m1_m2_c_i_Map_cachekey_i;
	private static Object NavigableMap_Modification_m1_m2_c_i_Map_cachekey_m1;
	private static Object NavigableMap_Modification_m1_m2_c_i_Map_cachekey_m2;
	private static INavigableMap_ModificationMonitor NavigableMap_Modification_m1_m2_c_i_Map_cachevalue;
	private static Object NavigableMap_Modification_m2_Map_cachekey_m2;
	private static Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m2_Map_cachevalue;
	private static Object NavigableMap_Modification_m2_c_Map_cachekey_c;
	private static Object NavigableMap_Modification_m2_c_Map_cachekey_m2;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m2_c_Map_cachevalue;
	private static final MapOfAll<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m2_c_Map = new MapOfAll<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ;
	private static final MapOfAll<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_c_i_Map = new MapOfAll<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ;
	private static final MapOfAll<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_m1_m2_c_i_Map = new MapOfAll<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(0) ;
	private static final MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> NavigableMap_Modification_i_Map = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(3) ;
	private static final MapOfMap<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>> NavigableMap_Modification_m1_c_Map = new MapOfMap<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>>(0) ;
	private static Object NavigableMap_Modification_c__To__m1_m2_c_Map_cachekey_c;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_c__To__m1_m2_c_Map_cachevalue;
	private static Object NavigableMap_Modification_m1__To__m1_m2_Map_cachekey_m1;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_m1__To__m1_m2_Map_cachevalue;
	private static Object NavigableMap_Modification_m2__To__m1_m2_Map_cachekey_m2;
	private static Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_m2__To__m1_m2_Map_cachevalue;
	private static final MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_m1__To__m1_m2_Map = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(0) ;
	private static final MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_c__To__m1_m2_c_Map = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(2) ;
	private static final MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> NavigableMap_Modification_m2__To__m1_m2_Map = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ;

	private static Object NavigableMap_UnsafeIterator_i_Map_cachekey_i;
	private static Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_i_Map_cachevalue;
	private static Object NavigableMap_UnsafeIterator_m_Map_cachekey_m;
	private static Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_m_Map_cachevalue;
	private static Object NavigableMap_UnsafeIterator_m_s_Map_cachekey_m;
	private static Object NavigableMap_UnsafeIterator_m_s_Map_cachekey_s;
	private static Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_m_s_Map_cachevalue;
	private static Object NavigableMap_UnsafeIterator_m_s_i_Map_cachekey_i;
	private static Object NavigableMap_UnsafeIterator_m_s_i_Map_cachekey_m;
	private static Object NavigableMap_UnsafeIterator_m_s_i_Map_cachekey_s;
	private static INavigableMap_UnsafeIteratorMonitor NavigableMap_UnsafeIterator_m_s_i_Map_cachevalue;
	private static Object NavigableMap_UnsafeIterator_s_Map_cachekey_s;
	private static Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_s_Map_cachevalue;
	private static Object NavigableMap_UnsafeIterator_s_i_Map_cachekey_i;
	private static Object NavigableMap_UnsafeIterator_s_i_Map_cachekey_s;
	private static Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_s_i_Map_cachevalue;
	private static final MapOfAll<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_s_i_Map = new MapOfAll<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(1) ;
	private static final MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_m_s_i_Map = new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(0) ;
	private static final MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_i_Map = new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(2) ;
	private static Object NavigableMap_UnsafeIterator_s__To__m_s_Map_cachekey_s;
	private static Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_s__To__m_s_Map_cachevalue;
	private static final MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> NavigableMap_UnsafeIterator_s__To__m_s_Map = new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ;

	private static Object NavigableSet_Modification_i_Map_cachekey_i;
	private static Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_i_Map_cachevalue;
	private static Object NavigableSet_Modification_s1_Map_cachekey_s1;
	private static Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_s1_Map_cachevalue;
	private static Object NavigableSet_Modification_s1_i_Map_cachekey_i;
	private static Object NavigableSet_Modification_s1_i_Map_cachekey_s1;
	private static Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_s1_i_Map_cachevalue;
	private static Object NavigableSet_Modification_s1_s2_Map_cachekey_s1;
	private static Object NavigableSet_Modification_s1_s2_Map_cachekey_s2;
	private static Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> NavigableSet_Modification_s1_s2_Map_cachevalue;
	private static Object NavigableSet_Modification_s1_s2_i_Map_cachekey_i;
	private static Object NavigableSet_Modification_s1_s2_i_Map_cachekey_s1;
	private static Object NavigableSet_Modification_s1_s2_i_Map_cachekey_s2;
	private static INavigableSet_ModificationMonitor NavigableSet_Modification_s1_s2_i_Map_cachevalue;
	private static Object NavigableSet_Modification_s2_Map_cachekey_s2;
	private static Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_s2_Map_cachevalue;
	private static Object NavigableSet_Modification_s2_i_Map_cachekey_i;
	private static Object NavigableSet_Modification_s2_i_Map_cachekey_s2;
	private static Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_s2_i_Map_cachevalue;
	private static final MapOfMap<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>> NavigableSet_Modification_s1_i_Map = new MapOfMap<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>>(0) ;
	private static final MapOfAll<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_s1_s2_i_Map = new MapOfAll<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(0) ;
	private static final MapOfAll<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_s2_i_Map = new MapOfAll<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ;
	private static final MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> NavigableSet_Modification_i_Map = new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(2) ;
	private static Object NavigableSet_Modification_s1__To__s1_s2_Map_cachekey_s1;
	private static Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> NavigableSet_Modification_s1__To__s1_s2_Map_cachevalue;
	private static Object NavigableSet_Modification_s2__To__s1_s2_Map_cachekey_s2;
	private static Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> NavigableSet_Modification_s2__To__s1_s2_Map_cachevalue;
	private static final MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> NavigableSet_Modification_s1__To__s1_s2_Map = new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(0) ;
	private static final MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> NavigableSet_Modification_s2__To__s1_s2_Map = new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ;

	private static final NetPermission_ActionsRawMonitor NetPermission_Actions__Map = new NetPermission_ActionsRawMonitor() ;

	private static final NetPermission_NameRawMonitor NetPermission_Name__Map = new NetPermission_NameRawMonitor() ;

	private static Object ObjectInput_Close_i_Map_cachekey_i;
	private static ObjectInput_CloseMonitor ObjectInput_Close_i_Map_cachevalue;
	private static final MapOfMonitor<ObjectInput_CloseMonitor> ObjectInput_Close_i_Map = new MapOfMonitor<ObjectInput_CloseMonitor>(0) ;
	private static final Tuple2<ObjectInput_CloseMonitor_Set, ObjectInput_CloseMonitor> ObjectInput_Close__Map = new Tuple2<ObjectInput_CloseMonitor_Set, ObjectInput_CloseMonitor>(new ObjectInput_CloseMonitor_Set() , null) ;

	private static Object ObjectOutput_Close_o_Map_cachekey_o;
	private static ObjectOutput_CloseMonitor ObjectOutput_Close_o_Map_cachevalue;
	private static final Tuple2<ObjectOutput_CloseMonitor_Set, ObjectOutput_CloseMonitor> ObjectOutput_Close__Map = new Tuple2<ObjectOutput_CloseMonitor_Set, ObjectOutput_CloseMonitor>(new ObjectOutput_CloseMonitor_Set() , null) ;
	private static final MapOfMonitor<ObjectOutput_CloseMonitor> ObjectOutput_Close_o_Map = new MapOfMonitor<ObjectOutput_CloseMonitor>(0) ;

	private static Object ObjectStreamClass_Initialize_c_Map_cachekey_c;
	private static ObjectStreamClass_InitializeMonitor ObjectStreamClass_Initialize_c_Map_cachevalue;
	private static final Tuple2<ObjectStreamClass_InitializeMonitor_Set, ObjectStreamClass_InitializeMonitor> ObjectStreamClass_Initialize__Map = new Tuple2<ObjectStreamClass_InitializeMonitor_Set, ObjectStreamClass_InitializeMonitor>(new ObjectStreamClass_InitializeMonitor_Set() , null) ;
	private static final MapOfMonitor<ObjectStreamClass_InitializeMonitor> ObjectStreamClass_Initialize_c_Map = new MapOfMonitor<ObjectStreamClass_InitializeMonitor>(0) ;

	private static final Object_MonitorOwnerRawMonitor Object_MonitorOwner__Map = new Object_MonitorOwnerRawMonitor() ;

	private static final Object_NoCloneRawMonitor Object_NoClone__Map = new Object_NoCloneRawMonitor() ;

	private static Object OutputStream_ManipulateAfterClose_o_Map_cachekey_o;
	private static OutputStream_ManipulateAfterCloseMonitor OutputStream_ManipulateAfterClose_o_Map_cachevalue;
	private static final MapOfMonitor<OutputStream_ManipulateAfterCloseMonitor> OutputStream_ManipulateAfterClose_o_Map = new MapOfMonitor<OutputStream_ManipulateAfterCloseMonitor>(0) ;

	private static Object PasswordAuthentication_FillZeroPassword_pwd_Map_cachekey_pwd;
	private static PasswordAuthentication_FillZeroPasswordMonitor PasswordAuthentication_FillZeroPassword_pwd_Map_cachevalue;
	private static final MapOfMonitor<PasswordAuthentication_FillZeroPasswordMonitor> PasswordAuthentication_FillZeroPassword_pwd_Map = new MapOfMonitor<PasswordAuthentication_FillZeroPasswordMonitor>(0) ;
	private static final Tuple2<PasswordAuthentication_FillZeroPasswordMonitor_Set, PasswordAuthentication_FillZeroPasswordMonitor> PasswordAuthentication_FillZeroPassword__Map = new Tuple2<PasswordAuthentication_FillZeroPasswordMonitor_Set, PasswordAuthentication_FillZeroPasswordMonitor>(new PasswordAuthentication_FillZeroPasswordMonitor_Set() , null) ;

	private static Object PipedInputStream_UnconnectedRead_i_Map_cachekey_i;
	private static PipedInputStream_UnconnectedReadMonitor PipedInputStream_UnconnectedRead_i_Map_cachevalue;
	private static final MapOfMonitor<PipedInputStream_UnconnectedReadMonitor> PipedInputStream_UnconnectedRead_i_Map = new MapOfMonitor<PipedInputStream_UnconnectedReadMonitor>(0) ;

	private static Object PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o;
	private static PipedOutputStream_UnconnectedWriteMonitor PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
	private static final MapOfMonitor<PipedOutputStream_UnconnectedWriteMonitor> PipedOutputStream_UnconnectedWrite_o_Map = new MapOfMonitor<PipedOutputStream_UnconnectedWriteMonitor>(0) ;

	private static Object PipedStream_SingleThread_i_o_Map_cachekey_i;
	private static Object PipedStream_SingleThread_i_o_Map_cachekey_o;
	private static Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> PipedStream_SingleThread_i_o_Map_cachevalue;
	private static Object PipedStream_SingleThread_i_o_t_Map_cachekey_i;
	private static Object PipedStream_SingleThread_i_o_t_Map_cachekey_o;
	private static Object PipedStream_SingleThread_i_o_t_Map_cachekey_t;
	private static IPipedStream_SingleThreadMonitor PipedStream_SingleThread_i_o_t_Map_cachevalue;
	private static Object PipedStream_SingleThread_i_t_Map_cachekey_i;
	private static Object PipedStream_SingleThread_i_t_Map_cachekey_t;
	private static Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> PipedStream_SingleThread_i_t_Map_cachevalue;
	private static Object PipedStream_SingleThread_o_t_Map_cachekey_o;
	private static Object PipedStream_SingleThread_o_t_Map_cachekey_t;
	private static Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> PipedStream_SingleThread_o_t_Map_cachevalue;
	private static final MapOfMap<MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>> PipedStream_SingleThread_i_o_t_Map = new MapOfMap<MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>>(0) ;
	private static final MapOfMap<MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>> PipedStream_SingleThread_i_t_Map = new MapOfMap<MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>>(0) ;
	private static final MapOfMap<MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>> PipedStream_SingleThread_o_t_Map = new MapOfMap<MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>>(1) ;
	private static Object PipedStream_SingleThread_i__To__i_o_Map_cachekey_i;
	private static Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> PipedStream_SingleThread_i__To__i_o_Map_cachevalue;
	private static Object PipedStream_SingleThread_o__To__i_o_Map_cachekey_o;
	private static Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> PipedStream_SingleThread_o__To__i_o_Map_cachevalue;
	private static final MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> PipedStream_SingleThread_o__To__i_o_Map = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
	private static final MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> PipedStream_SingleThread_i__To__i_o_Map = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(0) ;

	private static final PriorityQueue_NonComparableRawMonitor PriorityQueue_NonComparable__Map = new PriorityQueue_NonComparableRawMonitor() ;

	private static final PriorityQueue_NonNullRawMonitor PriorityQueue_NonNull__Map = new PriorityQueue_NonNullRawMonitor() ;

	private static Object ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map;
	private static ProcessBuilder_NullKeyOrValueMonitor ProcessBuilder_NullKeyOrValue_map_Map_cachevalue;
	private static final MapOfMonitor<ProcessBuilder_NullKeyOrValueMonitor> ProcessBuilder_NullKeyOrValue_map_Map = new MapOfMonitor<ProcessBuilder_NullKeyOrValueMonitor>(0) ;

	private static Object ProcessBuilder_ThreadSafe_p_Map_cachekey_p;
	private static ProcessBuilder_ThreadSafeMonitor ProcessBuilder_ThreadSafe_p_Map_cachevalue;
	private static final MapOfMonitor<ProcessBuilder_ThreadSafeMonitor> ProcessBuilder_ThreadSafe_p_Map = new MapOfMonitor<ProcessBuilder_ThreadSafeMonitor>(0) ;

	private static Object Properties_ManipulateAfterLoad_i_Map_cachekey_i;
	private static Properties_ManipulateAfterLoadMonitor Properties_ManipulateAfterLoad_i_Map_cachevalue;
	private static final MapOfMonitor<Properties_ManipulateAfterLoadMonitor> Properties_ManipulateAfterLoad_i_Map = new MapOfMonitor<Properties_ManipulateAfterLoadMonitor>(0) ;

	private static Object PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p;
	private static PushbackInputStream_UnreadAheadLimitMonitor PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
	private static final MapOfMonitor<PushbackInputStream_UnreadAheadLimitMonitor> PushbackInputStream_UnreadAheadLimit_p_Map = new MapOfMonitor<PushbackInputStream_UnreadAheadLimitMonitor>(0) ;

	private static Object RandomAccessFile_ManipulateAfterClose_f_Map_cachekey_f;
	private static RandomAccessFile_ManipulateAfterCloseMonitor RandomAccessFile_ManipulateAfterClose_f_Map_cachevalue;
	private static final MapOfMonitor<RandomAccessFile_ManipulateAfterCloseMonitor> RandomAccessFile_ManipulateAfterClose_f_Map = new MapOfMonitor<RandomAccessFile_ManipulateAfterCloseMonitor>(0) ;

	private static final Random_OverrideNextRawMonitor Random_OverrideNext__Map = new Random_OverrideNextRawMonitor() ;

	private static Object Reader_ManipulateAfterClose_r_Map_cachekey_r;
	private static Reader_ManipulateAfterCloseMonitor Reader_ManipulateAfterClose_r_Map_cachevalue;
	private static final MapOfMonitor<Reader_ManipulateAfterCloseMonitor> Reader_ManipulateAfterClose_r_Map = new MapOfMonitor<Reader_ManipulateAfterCloseMonitor>(0) ;

	private static final Reader_MarkResetRawMonitor Reader_MarkReset__Map = new Reader_MarkResetRawMonitor() ;

	private static Object Reader_ReadAheadLimit_r_Map_cachekey_r;
	private static Reader_ReadAheadLimitMonitor Reader_ReadAheadLimit_r_Map_cachevalue;
	private static final MapOfMonitor<Reader_ReadAheadLimitMonitor> Reader_ReadAheadLimit_r_Map = new MapOfMonitor<Reader_ReadAheadLimitMonitor>(0) ;

	private static Object Reader_UnmarkedReset_r_Map_cachekey_r;
	private static Reader_UnmarkedResetMonitor Reader_UnmarkedReset_r_Map_cachevalue;
	private static final MapOfMonitor<Reader_UnmarkedResetMonitor> Reader_UnmarkedReset_r_Map = new MapOfMonitor<Reader_UnmarkedResetMonitor>(0) ;

	private static Object ResourceBundleControl_MutateFormatList_l_Map_cachekey_l;
	private static ResourceBundleControl_MutateFormatListMonitor ResourceBundleControl_MutateFormatList_l_Map_cachevalue;
	private static final MapOfMonitor<ResourceBundleControl_MutateFormatListMonitor> ResourceBundleControl_MutateFormatList_l_Map = new MapOfMonitor<ResourceBundleControl_MutateFormatListMonitor>(0) ;

	private static final Runnable_OverrideRunRawMonitor Runnable_OverrideRun__Map = new Runnable_OverrideRunRawMonitor() ;

	private static final RuntimePermission_NullActionRawMonitor RuntimePermission_NullAction__Map = new RuntimePermission_NullActionRawMonitor() ;

	private static final RuntimePermission_PermNameRawMonitor RuntimePermission_PermName__Map = new RuntimePermission_PermNameRawMonitor() ;

	private static Object Scanner_ManipulateAfterClose_c_Map_cachekey_c;
	private static Scanner_ManipulateAfterCloseMonitor_Set Scanner_ManipulateAfterClose_c_Map_cachevalue;
	private static Object Scanner_ManipulateAfterClose_s_Map_cachekey_s;
	private static Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set> Scanner_ManipulateAfterClose_s_Map_cachevalue;
	private static Object Scanner_ManipulateAfterClose_s_c_Map_cachekey_c;
	private static Object Scanner_ManipulateAfterClose_s_c_Map_cachekey_s;
	private static Scanner_ManipulateAfterCloseMonitor Scanner_ManipulateAfterClose_s_c_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set> Scanner_ManipulateAfterClose_s_c_Map = new MapOfMapSet<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set>(0) ;
	private static final MapOfSet<Scanner_ManipulateAfterCloseMonitor_Set> Scanner_ManipulateAfterClose_c_Map = new MapOfSet<Scanner_ManipulateAfterCloseMonitor_Set>(1) ;

	private static Object Scanner_SearchAfterClose_s_Map_cachekey_s;
	private static Scanner_SearchAfterCloseMonitor Scanner_SearchAfterClose_s_Map_cachevalue;
	private static final MapOfMonitor<Scanner_SearchAfterCloseMonitor> Scanner_SearchAfterClose_s_Map = new MapOfMonitor<Scanner_SearchAfterCloseMonitor>(0) ;

	private static Object SecurityManager_Permission_manager_context_Map_cachekey_context;
	private static Object SecurityManager_Permission_manager_context_Map_cachekey_manager;
	private static SecurityManager_PermissionMonitor SecurityManager_Permission_manager_context_Map_cachevalue;
	private static final MapOfMap<MapOfMonitor<SecurityManager_PermissionMonitor>> SecurityManager_Permission_manager_context_Map = new MapOfMap<MapOfMonitor<SecurityManager_PermissionMonitor>>(0) ;

	private static final Serializable_NoArgConstructorRawMonitor Serializable_NoArgConstructor__Map = new Serializable_NoArgConstructorRawMonitor() ;

	private static final Serializable_UIDRawMonitor Serializable_UID__Map = new Serializable_UIDRawMonitor() ;

	private static final ServerSocket_BacklogRawMonitor ServerSocket_Backlog__Map = new ServerSocket_BacklogRawMonitor() ;

	private static Object ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock;
	private static ServerSocket_LargeReceiveBufferMonitor ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue;
	private static final MapOfMonitor<ServerSocket_LargeReceiveBufferMonitor> ServerSocket_LargeReceiveBuffer_sock_Map = new MapOfMonitor<ServerSocket_LargeReceiveBufferMonitor>(0) ;

	private static Object ServerSocket_PerformancePreferences_sock_Map_cachekey_sock;
	private static ServerSocket_PerformancePreferencesMonitor ServerSocket_PerformancePreferences_sock_Map_cachevalue;
	private static final MapOfMonitor<ServerSocket_PerformancePreferencesMonitor> ServerSocket_PerformancePreferences_sock_Map = new MapOfMonitor<ServerSocket_PerformancePreferencesMonitor>(0) ;

	private static final ServerSocket_PortRawMonitor ServerSocket_Port__Map = new ServerSocket_PortRawMonitor() ;

	private static Object ServerSocket_ReuseAddress_sock_Map_cachekey_sock;
	private static ServerSocket_ReuseAddressMonitor ServerSocket_ReuseAddress_sock_Map_cachevalue;
	private static final MapOfMonitor<ServerSocket_ReuseAddressMonitor> ServerSocket_ReuseAddress_sock_Map = new MapOfMonitor<ServerSocket_ReuseAddressMonitor>(0) ;

	private static Object ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock;
	private static ServerSocket_SetTimeoutBeforeBlockingMonitor ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue;
	private static final MapOfMonitor<ServerSocket_SetTimeoutBeforeBlockingMonitor> ServerSocket_SetTimeoutBeforeBlocking_sock_Map = new MapOfMonitor<ServerSocket_SetTimeoutBeforeBlockingMonitor>(0) ;

	private static final ServerSocket_TimeoutRawMonitor ServerSocket_Timeout__Map = new ServerSocket_TimeoutRawMonitor() ;

	private static Object ServiceLoaderIterator_Remove_i_Map_cachekey_i;
	private static ServiceLoaderIterator_RemoveMonitor ServiceLoaderIterator_Remove_i_Map_cachevalue;
	private static final MapOfMonitor<ServiceLoaderIterator_RemoveMonitor> ServiceLoaderIterator_Remove_i_Map = new MapOfMonitor<ServiceLoaderIterator_RemoveMonitor>(0) ;

	private static Object ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s;
	private static ServiceLoader_MultipleConcurrentThreadsMonitor ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue;
	private static final MapOfMonitor<ServiceLoader_MultipleConcurrentThreadsMonitor> ServiceLoader_MultipleConcurrentThreads_s_Map = new MapOfMonitor<ServiceLoader_MultipleConcurrentThreadsMonitor>(0) ;

	private static final Set_ItselfAsElementRawMonitor Set_ItselfAsElement__Map = new Set_ItselfAsElementRawMonitor() ;

	private static final Short_BadDecodeArgRawMonitor Short_BadDecodeArg__Map = new Short_BadDecodeArgRawMonitor() ;

	private static final Short_BadParsingArgsRawMonitor Short_BadParsingArgs__Map = new Short_BadParsingArgsRawMonitor() ;

	private static final Short_StaticFactoryRawMonitor Short_StaticFactory__Map = new Short_StaticFactoryRawMonitor() ;

	private static final ShutdownHook_LateRegisterMonitor ShutdownHook_LateRegister__Map = new ShutdownHook_LateRegisterMonitor() ;

	private static Object ShutdownHook_PrematureStart_t_Map_cachekey_t;
	private static ShutdownHook_PrematureStartMonitor ShutdownHook_PrematureStart_t_Map_cachevalue;
	private static final MapOfMonitor<ShutdownHook_PrematureStartMonitor> ShutdownHook_PrematureStart_t_Map = new MapOfMonitor<ShutdownHook_PrematureStartMonitor>(0) ;

	private static Object ShutdownHook_SystemExit_t_Map_cachekey_t;
	private static ShutdownHook_SystemExitMonitor ShutdownHook_SystemExit_t_Map_cachevalue;
	private static final MapOfMonitor<ShutdownHook_SystemExitMonitor> ShutdownHook_SystemExit_t_Map = new MapOfMonitor<ShutdownHook_SystemExitMonitor>(0) ;

	private static Object ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t;
	private static ShutdownHook_UnsafeAWTCallMonitor ShutdownHook_UnsafeAWTCall_t_Map_cachevalue;
	private static final MapOfMonitor<ShutdownHook_UnsafeAWTCallMonitor> ShutdownHook_UnsafeAWTCall_t_Map = new MapOfMonitor<ShutdownHook_UnsafeAWTCallMonitor>(0) ;

	private static Object ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t;
	private static ShutdownHook_UnsafeSwingCallMonitor ShutdownHook_UnsafeSwingCall_t_Map_cachevalue;
	private static final MapOfMonitor<ShutdownHook_UnsafeSwingCallMonitor> ShutdownHook_UnsafeSwingCall_t_Map = new MapOfMonitor<ShutdownHook_UnsafeSwingCallMonitor>(0) ;

	private static Object SocketImpl_CloseOutput_output_Map_cachekey_output;
	private static SocketImpl_CloseOutputMonitor_Set SocketImpl_CloseOutput_output_Map_cachevalue;
	private static Object SocketImpl_CloseOutput_sock_Map_cachekey_sock;
	private static Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set> SocketImpl_CloseOutput_sock_Map_cachevalue;
	private static Object SocketImpl_CloseOutput_sock_output_Map_cachekey_output;
	private static Object SocketImpl_CloseOutput_sock_output_Map_cachekey_sock;
	private static SocketImpl_CloseOutputMonitor SocketImpl_CloseOutput_sock_output_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set> SocketImpl_CloseOutput_sock_output_Map = new MapOfMapSet<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set>(0) ;
	private static final MapOfSet<SocketImpl_CloseOutputMonitor_Set> SocketImpl_CloseOutput_output_Map = new MapOfSet<SocketImpl_CloseOutputMonitor_Set>(1) ;

	private static final SocketPermission_ActionsRawMonitor SocketPermission_Actions__Map = new SocketPermission_ActionsRawMonitor() ;

	private static Object Socket_CloseInput_input_Map_cachekey_input;
	private static Socket_CloseInputMonitor_Set Socket_CloseInput_input_Map_cachevalue;
	private static Object Socket_CloseInput_sock_Map_cachekey_sock;
	private static Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set> Socket_CloseInput_sock_Map_cachevalue;
	private static Object Socket_CloseInput_sock_input_Map_cachekey_input;
	private static Object Socket_CloseInput_sock_input_Map_cachekey_sock;
	private static Socket_CloseInputMonitor Socket_CloseInput_sock_input_Map_cachevalue;
	private static final MapOfSet<Socket_CloseInputMonitor_Set> Socket_CloseInput_input_Map = new MapOfSet<Socket_CloseInputMonitor_Set>(1) ;
	private static final MapOfMapSet<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set> Socket_CloseInput_sock_input_Map = new MapOfMapSet<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set>(0) ;

	private static Object Socket_CloseOutput_output_Map_cachekey_output;
	private static Socket_CloseOutputMonitor_Set Socket_CloseOutput_output_Map_cachevalue;
	private static Object Socket_CloseOutput_sock_Map_cachekey_sock;
	private static Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set> Socket_CloseOutput_sock_Map_cachevalue;
	private static Object Socket_CloseOutput_sock_output_Map_cachekey_output;
	private static Object Socket_CloseOutput_sock_output_Map_cachekey_sock;
	private static Socket_CloseOutputMonitor Socket_CloseOutput_sock_output_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set> Socket_CloseOutput_sock_output_Map = new MapOfMapSet<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set>(0) ;
	private static final MapOfSet<Socket_CloseOutputMonitor_Set> Socket_CloseOutput_output_Map = new MapOfSet<Socket_CloseOutputMonitor_Set>(1) ;

	private static Object Socket_InputStreamUnavailable_sock_Map_cachekey_sock;
	private static Socket_InputStreamUnavailableMonitor Socket_InputStreamUnavailable_sock_Map_cachevalue;
	private static final MapOfMonitor<Socket_InputStreamUnavailableMonitor> Socket_InputStreamUnavailable_sock_Map = new MapOfMonitor<Socket_InputStreamUnavailableMonitor>(0) ;

	private static Object Socket_LargeReceiveBuffer_sock_Map_cachekey_sock;
	private static Socket_LargeReceiveBufferMonitor Socket_LargeReceiveBuffer_sock_Map_cachevalue;
	private static final MapOfMonitor<Socket_LargeReceiveBufferMonitor> Socket_LargeReceiveBuffer_sock_Map = new MapOfMonitor<Socket_LargeReceiveBufferMonitor>(0) ;

	private static Object Socket_OutputStreamUnavailable_sock_Map_cachekey_sock;
	private static Socket_OutputStreamUnavailableMonitor Socket_OutputStreamUnavailable_sock_Map_cachevalue;
	private static final MapOfMonitor<Socket_OutputStreamUnavailableMonitor> Socket_OutputStreamUnavailable_sock_Map = new MapOfMonitor<Socket_OutputStreamUnavailableMonitor>(0) ;

	private static Object Socket_PerformancePreferences_sock_Map_cachekey_sock;
	private static Socket_PerformancePreferencesMonitor Socket_PerformancePreferences_sock_Map_cachevalue;
	private static final MapOfMonitor<Socket_PerformancePreferencesMonitor> Socket_PerformancePreferences_sock_Map = new MapOfMonitor<Socket_PerformancePreferencesMonitor>(0) ;

	private static Object Socket_ReuseAddress_sock_Map_cachekey_sock;
	private static Socket_ReuseAddressMonitor Socket_ReuseAddress_sock_Map_cachevalue;
	private static final MapOfMonitor<Socket_ReuseAddressMonitor> Socket_ReuseAddress_sock_Map = new MapOfMonitor<Socket_ReuseAddressMonitor>(0) ;

	private static Object Socket_ReuseSocket_sock_Map_cachekey_sock;
	private static Socket_ReuseSocketMonitor Socket_ReuseSocket_sock_Map_cachevalue;
	private static final MapOfMonitor<Socket_ReuseSocketMonitor> Socket_ReuseSocket_sock_Map = new MapOfMonitor<Socket_ReuseSocketMonitor>(0) ;

	private static Object Socket_SetTimeoutBeforeBlockingInput_input_Map_cachekey_input;
	private static Socket_SetTimeoutBeforeBlockingInputMonitor_Set Socket_SetTimeoutBeforeBlockingInput_input_Map_cachevalue;
	private static Object Socket_SetTimeoutBeforeBlockingInput_sock_Map_cachekey_sock;
	private static Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set> Socket_SetTimeoutBeforeBlockingInput_sock_Map_cachevalue;
	private static Object Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachekey_input;
	private static Object Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachekey_sock;
	private static Socket_SetTimeoutBeforeBlockingInputMonitor Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachevalue;
	private static final MapOfSet<Socket_SetTimeoutBeforeBlockingInputMonitor_Set> Socket_SetTimeoutBeforeBlockingInput_input_Map = new MapOfSet<Socket_SetTimeoutBeforeBlockingInputMonitor_Set>(1) ;
	private static final MapOfMapSet<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set> Socket_SetTimeoutBeforeBlockingInput_sock_input_Map = new MapOfMapSet<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set>(0) ;

	private static Object Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachekey_output;
	private static Socket_SetTimeoutBeforeBlockingOutputMonitor_Set Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachevalue;
	private static Object Socket_SetTimeoutBeforeBlockingOutput_sock_Map_cachekey_sock;
	private static Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> Socket_SetTimeoutBeforeBlockingOutput_sock_Map_cachevalue;
	private static Object Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachekey_output;
	private static Object Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachekey_sock;
	private static Socket_SetTimeoutBeforeBlockingOutputMonitor Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachevalue;
	private static final MapOfMapSet<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map = new MapOfMapSet<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set>(0) ;
	private static final MapOfSet<Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> Socket_SetTimeoutBeforeBlockingOutput_output_Map = new MapOfSet<Socket_SetTimeoutBeforeBlockingOutputMonitor_Set>(1) ;

	private static final Socket_TimeoutRawMonitor Socket_Timeout__Map = new Socket_TimeoutRawMonitor() ;

	private static final Socket_TrafficClassRawMonitor Socket_TrafficClass__Map = new Socket_TrafficClassRawMonitor() ;

	private static final SortedMap_StandardConstructorsRawMonitor SortedMap_StandardConstructors__Map = new SortedMap_StandardConstructorsRawMonitor() ;

	private static final SortedSet_ComparableRawMonitor SortedSet_Comparable__Map = new SortedSet_ComparableRawMonitor() ;

	private static final SortedSet_StandardConstructorsRawMonitor SortedSet_StandardConstructors__Map = new SortedSet_StandardConstructorsRawMonitor() ;

	private static Object StreamTokenizer_AccessInvalidField_s_Map_cachekey_s;
	private static StreamTokenizer_AccessInvalidFieldMonitor StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
	private static final MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> StreamTokenizer_AccessInvalidField_s_Map = new MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor>(0) ;

	private static final StrictMath_ContendedRandomMonitor StrictMath_ContendedRandom__Map = new StrictMath_ContendedRandomMonitor() ;

	private static Object StringBuffer_SingleThreadUsage_s_Map_cachekey_s;
	private static StringBuffer_SingleThreadUsageMonitor StringBuffer_SingleThreadUsage_s_Map_cachevalue;
	private static final MapOfMonitor<StringBuffer_SingleThreadUsageMonitor> StringBuffer_SingleThreadUsage_s_Map = new MapOfMonitor<StringBuffer_SingleThreadUsageMonitor>(0) ;
	private static final StringBuffer_SingleThreadUsageMonitor_Set StringBuffer_SingleThreadUsage__Map = new StringBuffer_SingleThreadUsageMonitor_Set() ;

	private static Object StringBuilder_ThreadSafe_b_Map_cachekey_b;
	private static StringBuilder_ThreadSafeMonitor StringBuilder_ThreadSafe_b_Map_cachevalue;
	private static final MapOfMonitor<StringBuilder_ThreadSafeMonitor> StringBuilder_ThreadSafe_b_Map = new MapOfMonitor<StringBuilder_ThreadSafeMonitor>(0) ;

	private static Object StringTokenizer_HasMoreElements_i_Map_cachekey_i;
	private static StringTokenizer_HasMoreElementsMonitor StringTokenizer_HasMoreElements_i_Map_cachevalue;
	private static final MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> StringTokenizer_HasMoreElements_i_Map = new MapOfMonitor<StringTokenizer_HasMoreElementsMonitor>(0) ;

	private static final String_UseStringBuilderRawMonitor String_UseStringBuilder__Map = new String_UseStringBuilderRawMonitor() ;

	private static final System_NullArrayCopyRawMonitor System_NullArrayCopy__Map = new System_NullArrayCopyRawMonitor() ;

	private static Object System_WrongKeyOrValue_map_Map_cachekey_map;
	private static System_WrongKeyOrValueMonitor System_WrongKeyOrValue_map_Map_cachevalue;
	private static final MapOfMonitor<System_WrongKeyOrValueMonitor> System_WrongKeyOrValue_map_Map = new MapOfMonitor<System_WrongKeyOrValueMonitor>(0) ;

	private static Object Thread_SetDaemonBeforeStart_t_Map_cachekey_t;
	private static Thread_SetDaemonBeforeStartMonitor Thread_SetDaemonBeforeStart_t_Map_cachevalue;
	private static final MapOfMonitor<Thread_SetDaemonBeforeStartMonitor> Thread_SetDaemonBeforeStart_t_Map = new MapOfMonitor<Thread_SetDaemonBeforeStartMonitor>(0) ;

	private static Object Thread_StartOnce_t_Map_cachekey_t;
	private static Thread_StartOnceMonitor Thread_StartOnce_t_Map_cachevalue;
	private static final MapOfMonitor<Thread_StartOnceMonitor> Thread_StartOnce_t_Map = new MapOfMonitor<Thread_StartOnceMonitor>(0) ;

	private static Object Throwable_InitCauseOnce_t_Map_cachekey_t;
	private static Throwable_InitCauseOnceMonitor Throwable_InitCauseOnce_t_Map_cachevalue;
	private static final MapOfMonitor<Throwable_InitCauseOnceMonitor> Throwable_InitCauseOnce_t_Map = new MapOfMonitor<Throwable_InitCauseOnceMonitor>(0) ;

	private static final TreeMap_ComparableRawMonitor TreeMap_Comparable__Map = new TreeMap_ComparableRawMonitor() ;

	private static final TreeSet_ComparableRawMonitor TreeSet_Comparable__Map = new TreeSet_ComparableRawMonitor() ;

	private static Object URLConnection_Connect_c_Map_cachekey_c;
	private static URLConnection_ConnectMonitor URLConnection_Connect_c_Map_cachevalue;
	private static final MapOfMonitor<URLConnection_ConnectMonitor> URLConnection_Connect_c_Map = new MapOfMonitor<URLConnection_ConnectMonitor>(0) ;

	private static final URLConnection_OverrideGetPermissionRawMonitor URLConnection_OverrideGetPermission__Map = new URLConnection_OverrideGetPermissionRawMonitor() ;

	private static Object URLConnection_SetBeforeConnect_c_Map_cachekey_c;
	private static URLConnection_SetBeforeConnectMonitor URLConnection_SetBeforeConnect_c_Map_cachevalue;
	private static final MapOfMonitor<URLConnection_SetBeforeConnectMonitor> URLConnection_SetBeforeConnect_c_Map = new MapOfMonitor<URLConnection_SetBeforeConnectMonitor>(0) ;

	private static final URLDecoder_DecodeUTF8RawMonitor URLDecoder_DecodeUTF8__Map = new URLDecoder_DecodeUTF8RawMonitor() ;

	private static final URLEncoder_EncodeUTF8RawMonitor URLEncoder_EncodeUTF8__Map = new URLEncoder_EncodeUTF8RawMonitor() ;

	private static final URL_SetURLStreamHandlerFactoryMonitor URL_SetURLStreamHandlerFactory__Map = new URL_SetURLStreamHandlerFactoryMonitor() ;

	private static final Vector_InsertIndexRawMonitor Vector_InsertIndex__Map = new Vector_InsertIndexRawMonitor() ;

	private static Object Writer_ManipulateAfterClose_w_Map_cachekey_w;
	private static Writer_ManipulateAfterCloseMonitor Writer_ManipulateAfterClose_w_Map_cachevalue;
	private static final MapOfMonitor<Writer_ManipulateAfterCloseMonitor> Writer_ManipulateAfterClose_w_Map = new MapOfMonitor<Writer_ManipulateAfterCloseMonitor>(0) ;

	public static int cleanUp() {
		int collected = 0;
		// indexing trees
		collected += Appendable_ThreadSafe_a_Map.cleanUpUnnecessaryMappings();
		collected += ArrayDeque_UnsafeIterator_i_Map.cleanUpUnnecessaryMappings();
		collected += ArrayDeque_UnsafeIterator_q_i_Map.cleanUpUnnecessaryMappings();
		collected += Arrays_SortBeforeBinarySearch_arr_Map.cleanUpUnnecessaryMappings();
		collected += BufferedInputStream_SynchronizedFill_i_Map.cleanUpUnnecessaryMappings();
		collected += ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.cleanUpUnnecessaryMappings();
		collected += ByteArrayOutputStream_FlushBeforeRetrieve_o_Map.cleanUpUnnecessaryMappings();
		collected += CharSequence_NotInMap_map_Map.cleanUpUnnecessaryMappings();
		collected += Closeable_MultipleClose_c_Map.cleanUpUnnecessaryMappings();
		collected += Collection_UnsafeIterator_c_i_Map.cleanUpUnnecessaryMappings();
		collected += Collection_UnsafeIterator_i_Map.cleanUpUnnecessaryMappings();
		collected += Collection_UnsynchronizedAddAll_s_Map.cleanUpUnnecessaryMappings();
		collected += Collection_UnsynchronizedAddAll_t_s_Map.cleanUpUnnecessaryMappings();
		collected += Collections_NewSetFromMap_map_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SortBeforeBinarySearch_list_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SynchronizedCollection_iter_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SynchronizedCollection_col_iter_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SynchronizedMap_col_iter_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SynchronizedMap_syncMap_col_iter_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SynchronizedMap_iter_Map.cleanUpUnnecessaryMappings();
		collected += Collections_SynchronizedMap_col__To__syncMap_col_Map.cleanUpUnnecessaryMappings();
		collected += Console_CloseReader_r_Map.cleanUpUnnecessaryMappings();
		collected += Console_CloseWriter_w_Map.cleanUpUnnecessaryMappings();
		collected += Console_FillZeroPassword_pwd_Map.cleanUpUnnecessaryMappings();
		collected += Deque_OfferRatherThanAdd_q_Map.cleanUpUnnecessaryMappings();
		collected += Dictionary_Obsolete_d_Map.cleanUpUnnecessaryMappings();
		collected += Enumeration_Obsolete_e_Map.cleanUpUnnecessaryMappings();
		collected += File_DeleteTempFile_f_Map.cleanUpUnnecessaryMappings();
		collected += HttpURLConnection_SetBeforeConnect_c_Map.cleanUpUnnecessaryMappings();
		collected += InputStream_ManipulateAfterClose_i_Map.cleanUpUnnecessaryMappings();
		collected += InputStream_MarkAfterClose_i_Map.cleanUpUnnecessaryMappings();
		collected += InputStream_ReadAheadLimit_i_Map.cleanUpUnnecessaryMappings();
		collected += InputStream_UnmarkedReset_i_Map.cleanUpUnnecessaryMappings();
		collected += Iterator_HasNext_i_Map.cleanUpUnnecessaryMappings();
		collected += Iterator_RemoveOnce_i_Map.cleanUpUnnecessaryMappings();
		collected += ListIterator_RemoveOnce_i_Map.cleanUpUnnecessaryMappings();
		collected += ListIterator_Set_i_Map.cleanUpUnnecessaryMappings();
		collected += ListIterator_hasNextPrevious_i_Map.cleanUpUnnecessaryMappings();
		collected += List_UnsafeListIterator_i_Map.cleanUpUnnecessaryMappings();
		collected += List_UnsafeListIterator_l_i_Map.cleanUpUnnecessaryMappings();
		collected += List_UnsynchronizedSubList_b_s_Map.cleanUpUnnecessaryMappings();
		collected += List_UnsynchronizedSubList_s_Map.cleanUpUnnecessaryMappings();
		collected += Map_CollectionViewAdd_m_c_Map.cleanUpUnnecessaryMappings();
		collected += Map_CollectionViewAdd_c_Map.cleanUpUnnecessaryMappings();
		collected += Map_UnsafeIterator_c_i_Map.cleanUpUnnecessaryMappings();
		collected += Map_UnsafeIterator_m_c_i_Map.cleanUpUnnecessaryMappings();
		collected += Map_UnsafeIterator_i_Map.cleanUpUnnecessaryMappings();
		collected += Map_UnsafeIterator_c__To__m_c_Map.cleanUpUnnecessaryMappings();
		collected += Map_UnsynchronizedAddAll_t_s_Map.cleanUpUnnecessaryMappings();
		collected += Map_UnsynchronizedAddAll_s_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_m2_c_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_c_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_m1_m2_c_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_m1_c_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_m1__To__m1_m2_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_c__To__m1_m2_c_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_Modification_m2__To__m1_m2_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_UnsafeIterator_s_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_UnsafeIterator_m_s_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_UnsafeIterator_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableMap_UnsafeIterator_s__To__m_s_Map.cleanUpUnnecessaryMappings();
		collected += NavigableSet_Modification_s1_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableSet_Modification_s1_s2_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableSet_Modification_s2_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableSet_Modification_i_Map.cleanUpUnnecessaryMappings();
		collected += NavigableSet_Modification_s1__To__s1_s2_Map.cleanUpUnnecessaryMappings();
		collected += NavigableSet_Modification_s2__To__s1_s2_Map.cleanUpUnnecessaryMappings();
		collected += ObjectInput_Close_i_Map.cleanUpUnnecessaryMappings();
		collected += ObjectOutput_Close_o_Map.cleanUpUnnecessaryMappings();
		collected += ObjectStreamClass_Initialize_c_Map.cleanUpUnnecessaryMappings();
		collected += OutputStream_ManipulateAfterClose_o_Map.cleanUpUnnecessaryMappings();
		collected += PasswordAuthentication_FillZeroPassword_pwd_Map.cleanUpUnnecessaryMappings();
		collected += PipedInputStream_UnconnectedRead_i_Map.cleanUpUnnecessaryMappings();
		collected += PipedOutputStream_UnconnectedWrite_o_Map.cleanUpUnnecessaryMappings();
		collected += PipedStream_SingleThread_i_o_t_Map.cleanUpUnnecessaryMappings();
		collected += PipedStream_SingleThread_i_t_Map.cleanUpUnnecessaryMappings();
		collected += PipedStream_SingleThread_o_t_Map.cleanUpUnnecessaryMappings();
		collected += PipedStream_SingleThread_o__To__i_o_Map.cleanUpUnnecessaryMappings();
		collected += PipedStream_SingleThread_i__To__i_o_Map.cleanUpUnnecessaryMappings();
		collected += ProcessBuilder_NullKeyOrValue_map_Map.cleanUpUnnecessaryMappings();
		collected += ProcessBuilder_ThreadSafe_p_Map.cleanUpUnnecessaryMappings();
		collected += Properties_ManipulateAfterLoad_i_Map.cleanUpUnnecessaryMappings();
		collected += PushbackInputStream_UnreadAheadLimit_p_Map.cleanUpUnnecessaryMappings();
		collected += RandomAccessFile_ManipulateAfterClose_f_Map.cleanUpUnnecessaryMappings();
		collected += Reader_ManipulateAfterClose_r_Map.cleanUpUnnecessaryMappings();
		collected += Reader_ReadAheadLimit_r_Map.cleanUpUnnecessaryMappings();
		collected += Reader_UnmarkedReset_r_Map.cleanUpUnnecessaryMappings();
		collected += ResourceBundleControl_MutateFormatList_l_Map.cleanUpUnnecessaryMappings();
		collected += Scanner_ManipulateAfterClose_s_c_Map.cleanUpUnnecessaryMappings();
		collected += Scanner_ManipulateAfterClose_c_Map.cleanUpUnnecessaryMappings();
		collected += Scanner_SearchAfterClose_s_Map.cleanUpUnnecessaryMappings();
		collected += SecurityManager_Permission_manager_context_Map.cleanUpUnnecessaryMappings();
		collected += ServerSocket_LargeReceiveBuffer_sock_Map.cleanUpUnnecessaryMappings();
		collected += ServerSocket_PerformancePreferences_sock_Map.cleanUpUnnecessaryMappings();
		collected += ServerSocket_ReuseAddress_sock_Map.cleanUpUnnecessaryMappings();
		collected += ServerSocket_SetTimeoutBeforeBlocking_sock_Map.cleanUpUnnecessaryMappings();
		collected += ServiceLoaderIterator_Remove_i_Map.cleanUpUnnecessaryMappings();
		collected += ServiceLoader_MultipleConcurrentThreads_s_Map.cleanUpUnnecessaryMappings();
		collected += ShutdownHook_PrematureStart_t_Map.cleanUpUnnecessaryMappings();
		collected += ShutdownHook_SystemExit_t_Map.cleanUpUnnecessaryMappings();
		collected += ShutdownHook_UnsafeAWTCall_t_Map.cleanUpUnnecessaryMappings();
		collected += ShutdownHook_UnsafeSwingCall_t_Map.cleanUpUnnecessaryMappings();
		collected += SocketImpl_CloseOutput_sock_output_Map.cleanUpUnnecessaryMappings();
		collected += SocketImpl_CloseOutput_output_Map.cleanUpUnnecessaryMappings();
		collected += Socket_CloseInput_input_Map.cleanUpUnnecessaryMappings();
		collected += Socket_CloseInput_sock_input_Map.cleanUpUnnecessaryMappings();
		collected += Socket_CloseOutput_sock_output_Map.cleanUpUnnecessaryMappings();
		collected += Socket_CloseOutput_output_Map.cleanUpUnnecessaryMappings();
		collected += Socket_InputStreamUnavailable_sock_Map.cleanUpUnnecessaryMappings();
		collected += Socket_LargeReceiveBuffer_sock_Map.cleanUpUnnecessaryMappings();
		collected += Socket_OutputStreamUnavailable_sock_Map.cleanUpUnnecessaryMappings();
		collected += Socket_PerformancePreferences_sock_Map.cleanUpUnnecessaryMappings();
		collected += Socket_ReuseAddress_sock_Map.cleanUpUnnecessaryMappings();
		collected += Socket_ReuseSocket_sock_Map.cleanUpUnnecessaryMappings();
		collected += Socket_SetTimeoutBeforeBlockingInput_input_Map.cleanUpUnnecessaryMappings();
		collected += Socket_SetTimeoutBeforeBlockingInput_sock_input_Map.cleanUpUnnecessaryMappings();
		collected += Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map.cleanUpUnnecessaryMappings();
		collected += Socket_SetTimeoutBeforeBlockingOutput_output_Map.cleanUpUnnecessaryMappings();
		collected += StreamTokenizer_AccessInvalidField_s_Map.cleanUpUnnecessaryMappings();
		collected += StringBuffer_SingleThreadUsage_s_Map.cleanUpUnnecessaryMappings();
		collected += StringBuilder_ThreadSafe_b_Map.cleanUpUnnecessaryMappings();
		collected += StringTokenizer_HasMoreElements_i_Map.cleanUpUnnecessaryMappings();
		collected += System_WrongKeyOrValue_map_Map.cleanUpUnnecessaryMappings();
		collected += Thread_SetDaemonBeforeStart_t_Map.cleanUpUnnecessaryMappings();
		collected += Thread_StartOnce_t_Map.cleanUpUnnecessaryMappings();
		collected += Throwable_InitCauseOnce_t_Map.cleanUpUnnecessaryMappings();
		collected += URLConnection_Connect_c_Map.cleanUpUnnecessaryMappings();
		collected += URLConnection_SetBeforeConnect_c_Map.cleanUpUnnecessaryMappings();
		collected += Writer_ManipulateAfterClose_w_Map.cleanUpUnnecessaryMappings();
		return collected;
	}

	// Removing terminated monitors from partitioned sets
	static {
		TerminatedMonitorCleaner.start() ;
	}
	// Setting the behavior of the runtime library according to the compile-time option
	static {
		RuntimeOption.enableFineGrainedLock(false) ;
	}

	public static final void PipedInputStream_UnconnectedRead_createEvent(PipedInputStream i) {
		PipedInputStream_UnconnectedRead_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<PipedInputStream_UnconnectedReadMonitor> matchedLastMap = null;
		PipedInputStream_UnconnectedReadMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == PipedInputStream_UnconnectedRead_i_Map_cachekey_i) ) {
			matchedEntry = PipedInputStream_UnconnectedRead_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PipedInputStream_UnconnectedReadMonitor> itmdMap = PipedInputStream_UnconnectedRead_i_Map;
				matchedLastMap = itmdMap;
				PipedInputStream_UnconnectedReadMonitor node_i = PipedInputStream_UnconnectedRead_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			PipedInputStream_UnconnectedReadMonitor created = new PipedInputStream_UnconnectedReadMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final PipedInputStream_UnconnectedReadMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(i);
		if(matchedEntryfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			PipedInputStream_UnconnectedRead_i_Map_cachekey_i = i;
			PipedInputStream_UnconnectedRead_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedInputStream_UnconnectedRead_create_oiEvent(PipedInputStream i) {
		PipedInputStream_UnconnectedRead_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<PipedInputStream_UnconnectedReadMonitor> matchedLastMap = null;
		PipedInputStream_UnconnectedReadMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == PipedInputStream_UnconnectedRead_i_Map_cachekey_i) ) {
			matchedEntry = PipedInputStream_UnconnectedRead_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PipedInputStream_UnconnectedReadMonitor> itmdMap = PipedInputStream_UnconnectedRead_i_Map;
				matchedLastMap = itmdMap;
				PipedInputStream_UnconnectedReadMonitor node_i = PipedInputStream_UnconnectedRead_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			PipedInputStream_UnconnectedReadMonitor created = new PipedInputStream_UnconnectedReadMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final PipedInputStream_UnconnectedReadMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_oi(i);
		if(matchedEntryfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			PipedInputStream_UnconnectedRead_i_Map_cachekey_i = i;
			PipedInputStream_UnconnectedRead_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedInputStream_UnconnectedRead_create_ioEvent(PipedInputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedInputStream_UnconnectedRead_activated) {
			PipedInputStream_UnconnectedReadMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == PipedInputStream_UnconnectedRead_i_Map_cachekey_i) ) {
				matchedEntry = PipedInputStream_UnconnectedRead_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedInputStream_UnconnectedReadMonitor node_i = PipedInputStream_UnconnectedRead_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedInputStream_UnconnectedReadMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_create_io(i);
				if(matchedEntryfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedInputStream_UnconnectedRead_i_Map_cachekey_i = i;
					PipedInputStream_UnconnectedRead_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedInputStream_UnconnectedRead_connect1Event(PipedInputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedInputStream_UnconnectedRead_activated) {
			PipedInputStream_UnconnectedReadMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == PipedInputStream_UnconnectedRead_i_Map_cachekey_i) ) {
				matchedEntry = PipedInputStream_UnconnectedRead_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedInputStream_UnconnectedReadMonitor node_i = PipedInputStream_UnconnectedRead_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedInputStream_UnconnectedReadMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect1(i);
				if(matchedEntryfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedInputStream_UnconnectedRead_i_Map_cachekey_i = i;
					PipedInputStream_UnconnectedRead_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedInputStream_UnconnectedRead_connect2Event(PipedInputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedInputStream_UnconnectedRead_activated) {
			PipedInputStream_UnconnectedReadMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == PipedInputStream_UnconnectedRead_i_Map_cachekey_i) ) {
				matchedEntry = PipedInputStream_UnconnectedRead_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedInputStream_UnconnectedReadMonitor node_i = PipedInputStream_UnconnectedRead_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedInputStream_UnconnectedReadMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect2(i);
				if(matchedEntryfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedInputStream_UnconnectedRead_i_Map_cachekey_i = i;
					PipedInputStream_UnconnectedRead_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedInputStream_UnconnectedRead_readEvent(PipedInputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedInputStream_UnconnectedRead_activated) {
			PipedInputStream_UnconnectedReadMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == PipedInputStream_UnconnectedRead_i_Map_cachekey_i) ) {
				matchedEntry = PipedInputStream_UnconnectedRead_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedInputStream_UnconnectedReadMonitor node_i = PipedInputStream_UnconnectedRead_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedInputStream_UnconnectedReadMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_read(i);
				if(matchedEntryfinalMonitor.PipedInputStream_UnconnectedReadMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedInputStream_UnconnectedRead_i_Map_cachekey_i = i;
					PipedInputStream_UnconnectedRead_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectOutput_Close_createEvent(ObjectOutput o) {
		ObjectOutput_Close_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_o = null;
		MapOfMonitor<ObjectOutput_CloseMonitor> matchedLastMap = null;
		ObjectOutput_CloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((o == ObjectOutput_Close_o_Map_cachekey_o) ) {
			matchedEntry = ObjectOutput_Close_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ObjectOutput_CloseMonitor> itmdMap = ObjectOutput_Close_o_Map;
				matchedLastMap = itmdMap;
				ObjectOutput_CloseMonitor node_o = ObjectOutput_Close_o_Map.getNodeEquivalent(wr_o) ;
				matchedEntry = node_o;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				ObjectOutput_CloseMonitor sourceLeaf = null;
				{
					// FindCode
					ObjectOutput_CloseMonitor itmdLeaf = ObjectOutput_Close__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <o>
					if (definable) {
						// FindCode
						ObjectOutput_CloseMonitor node_o = ObjectOutput_Close_o_Map.getNodeEquivalent(wr_o) ;
						if ((node_o != null) ) {
							if (((node_o.getDisable() > sourceLeaf.getTau() ) || ((node_o.getTau() > 0) && (node_o.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						ObjectOutput_CloseMonitor created = (ObjectOutput_CloseMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_o, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							ObjectOutput_CloseMonitor_Set targetSet = ObjectOutput_Close__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				ObjectOutput_CloseMonitor created = new ObjectOutput_CloseMonitor(ObjectOutput_Close_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_o, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					ObjectOutput_CloseMonitor_Set targetSet = ObjectOutput_Close__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(ObjectOutput_Close_timestamp++) ;
		}
		// D(X) main:8--9
		final ObjectOutput_CloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(o);
		if(matchedEntryfinalMonitor.ObjectOutput_CloseMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			ObjectOutput_Close_o_Map_cachekey_o = o;
			ObjectOutput_Close_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectOutput_Close_closeEvent(ObjectOutput o) {
		ObjectOutput_Close_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_o = null;
		MapOfMonitor<ObjectOutput_CloseMonitor> matchedLastMap = null;
		ObjectOutput_CloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((o == ObjectOutput_Close_o_Map_cachekey_o) ) {
			matchedEntry = ObjectOutput_Close_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ObjectOutput_CloseMonitor> itmdMap = ObjectOutput_Close_o_Map;
				matchedLastMap = itmdMap;
				ObjectOutput_CloseMonitor node_o = ObjectOutput_Close_o_Map.getNodeEquivalent(wr_o) ;
				matchedEntry = node_o;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				ObjectOutput_CloseMonitor sourceLeaf = null;
				{
					// FindCode
					ObjectOutput_CloseMonitor itmdLeaf = ObjectOutput_Close__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <o>
					if (definable) {
						// FindCode
						ObjectOutput_CloseMonitor node_o = ObjectOutput_Close_o_Map.getNodeEquivalent(wr_o) ;
						if ((node_o != null) ) {
							if (((node_o.getDisable() > sourceLeaf.getTau() ) || ((node_o.getTau() > 0) && (node_o.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						ObjectOutput_CloseMonitor created = (ObjectOutput_CloseMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_o, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							ObjectOutput_CloseMonitor_Set targetSet = ObjectOutput_Close__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				ObjectOutput_CloseMonitor created = new ObjectOutput_CloseMonitor(ObjectOutput_Close_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_o, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					ObjectOutput_CloseMonitor_Set targetSet = ObjectOutput_Close__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(ObjectOutput_Close_timestamp++) ;
		}
		// D(X) main:8--9
		final ObjectOutput_CloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(o);
		if(matchedEntryfinalMonitor.ObjectOutput_CloseMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			ObjectOutput_Close_o_Map_cachekey_o = o;
			ObjectOutput_Close_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectOutput_Close_endProgEvent() {
		ObjectOutput_Close_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Tuple2<ObjectOutput_CloseMonitor_Set, ObjectOutput_CloseMonitor> matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ObjectOutput_Close__Map;
		}
		// D(X) main:1
		ObjectOutput_CloseMonitor matchedLeaf = matchedEntry.getValue2() ;
		if ((matchedLeaf == null) ) {
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				ObjectOutput_CloseMonitor created = new ObjectOutput_CloseMonitor(ObjectOutput_Close_timestamp++) ;
				matchedEntry.setValue2(created) ;
				ObjectOutput_CloseMonitor_Set enclosingSet = matchedEntry.getValue1() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			ObjectOutput_CloseMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
			disableUpdatedLeaf.setDisable(ObjectOutput_Close_timestamp++) ;
		}
		// D(X) main:8--9
		ObjectOutput_CloseMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
		stateTransitionedSet.event_endProg();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ManipulateAfterClose_manipulateEvent(Reader r) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Reader_ManipulateAfterClose_activated) {
			Reader_ManipulateAfterCloseMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((r == Reader_ManipulateAfterClose_r_Map_cachekey_r) ) {
				matchedEntry = Reader_ManipulateAfterClose_r_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Reader_ManipulateAfterCloseMonitor node_r = Reader_ManipulateAfterClose_r_Map.getNodeWithStrongRef(r) ;
				matchedEntry = node_r;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Reader_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_manipulate(r);
				if(matchedEntryfinalMonitor.Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Reader_ManipulateAfterClose_r_Map_cachekey_r = r;
					Reader_ManipulateAfterClose_r_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ManipulateAfterClose_closeEvent(Reader r) {
		Reader_ManipulateAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_ManipulateAfterCloseMonitor> matchedLastMap = null;
		Reader_ManipulateAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_ManipulateAfterClose_r_Map_cachekey_r) ) {
			matchedEntry = Reader_ManipulateAfterClose_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_ManipulateAfterCloseMonitor> itmdMap = Reader_ManipulateAfterClose_r_Map;
				matchedLastMap = itmdMap;
				Reader_ManipulateAfterCloseMonitor node_r = Reader_ManipulateAfterClose_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_ManipulateAfterCloseMonitor created = new Reader_ManipulateAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(r);
		if(matchedEntryfinalMonitor.Reader_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Reader_ManipulateAfterClose_r_Map_cachekey_r = r;
			Reader_ManipulateAfterClose_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_UnmarkedReset_markEvent(Reader r) {
		Reader_UnmarkedReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_UnmarkedResetMonitor> matchedLastMap = null;
		Reader_UnmarkedResetMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_UnmarkedReset_r_Map_cachekey_r) ) {
			matchedEntry = Reader_UnmarkedReset_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_UnmarkedResetMonitor> itmdMap = Reader_UnmarkedReset_r_Map;
				matchedLastMap = itmdMap;
				Reader_UnmarkedResetMonitor node_r = Reader_UnmarkedReset_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_UnmarkedResetMonitor created = new Reader_UnmarkedResetMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_UnmarkedResetMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_mark(r);
		if(matchedEntryfinalMonitor.Reader_UnmarkedResetMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Reader_UnmarkedReset_r_Map_cachekey_r = r;
			Reader_UnmarkedReset_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_UnmarkedReset_resetEvent(Reader r) {
		Reader_UnmarkedReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_UnmarkedResetMonitor> matchedLastMap = null;
		Reader_UnmarkedResetMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_UnmarkedReset_r_Map_cachekey_r) ) {
			matchedEntry = Reader_UnmarkedReset_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_UnmarkedResetMonitor> itmdMap = Reader_UnmarkedReset_r_Map;
				matchedLastMap = itmdMap;
				Reader_UnmarkedResetMonitor node_r = Reader_UnmarkedReset_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_UnmarkedResetMonitor created = new Reader_UnmarkedResetMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_UnmarkedResetMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_reset(r);
		if(matchedEntryfinalMonitor.Reader_UnmarkedResetMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Reader_UnmarkedReset_r_Map_cachekey_r = r;
			Reader_UnmarkedReset_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_MarkAfterClose_markEvent(InputStream i) {
		InputStream_MarkAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<InputStream_MarkAfterCloseMonitor> matchedLastMap = null;
		InputStream_MarkAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == InputStream_MarkAfterClose_i_Map_cachekey_i) ) {
			matchedEntry = InputStream_MarkAfterClose_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<InputStream_MarkAfterCloseMonitor> itmdMap = InputStream_MarkAfterClose_i_Map;
				matchedLastMap = itmdMap;
				InputStream_MarkAfterCloseMonitor node_i = InputStream_MarkAfterClose_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			InputStream_MarkAfterCloseMonitor created = new InputStream_MarkAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final InputStream_MarkAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_mark(i);
		if(matchedEntryfinalMonitor.InputStream_MarkAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			InputStream_MarkAfterClose_i_Map_cachekey_i = i;
			InputStream_MarkAfterClose_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_MarkAfterClose_closeEvent(InputStream i) {
		InputStream_MarkAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<InputStream_MarkAfterCloseMonitor> matchedLastMap = null;
		InputStream_MarkAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == InputStream_MarkAfterClose_i_Map_cachekey_i) ) {
			matchedEntry = InputStream_MarkAfterClose_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<InputStream_MarkAfterCloseMonitor> itmdMap = InputStream_MarkAfterClose_i_Map;
				matchedLastMap = itmdMap;
				InputStream_MarkAfterCloseMonitor node_i = InputStream_MarkAfterClose_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			InputStream_MarkAfterCloseMonitor created = new InputStream_MarkAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final InputStream_MarkAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(i);
		if(matchedEntryfinalMonitor.InputStream_MarkAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			InputStream_MarkAfterClose_i_Map_cachekey_i = i;
			InputStream_MarkAfterClose_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void File_DeleteTempFile_createEvent(File f) {
		File_DeleteTempFile_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_f = null;
		MapOfMonitor<File_DeleteTempFileMonitor> matchedLastMap = null;
		File_DeleteTempFileMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((f == File_DeleteTempFile_f_Map_cachekey_f) ) {
			matchedEntry = File_DeleteTempFile_f_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_f = new CachedWeakReference(f) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<File_DeleteTempFileMonitor> itmdMap = File_DeleteTempFile_f_Map;
				matchedLastMap = itmdMap;
				File_DeleteTempFileMonitor node_f = File_DeleteTempFile_f_Map.getNodeEquivalent(wr_f) ;
				matchedEntry = node_f;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_f == null) ) {
				wr_f = new CachedWeakReference(f) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				File_DeleteTempFileMonitor sourceLeaf = null;
				{
					// FindCode
					File_DeleteTempFileMonitor itmdLeaf = File_DeleteTempFile__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <f>
					if (definable) {
						// FindCode
						File_DeleteTempFileMonitor node_f = File_DeleteTempFile_f_Map.getNodeEquivalent(wr_f) ;
						if ((node_f != null) ) {
							if (((node_f.getDisable() > sourceLeaf.getTau() ) || ((node_f.getTau() > 0) && (node_f.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						File_DeleteTempFileMonitor created = (File_DeleteTempFileMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_f, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							File_DeleteTempFileMonitor_Set targetSet = File_DeleteTempFile__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				File_DeleteTempFileMonitor created = new File_DeleteTempFileMonitor(File_DeleteTempFile_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_f, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					File_DeleteTempFileMonitor_Set targetSet = File_DeleteTempFile__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(File_DeleteTempFile_timestamp++) ;
		}
		// D(X) main:8--9
		final File_DeleteTempFileMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(f);
		if(matchedEntryfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			File_DeleteTempFile_f_Map_cachekey_f = f;
			File_DeleteTempFile_f_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void File_DeleteTempFile_explicitEvent(File f) {
		File_DeleteTempFile_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_f = null;
		MapOfMonitor<File_DeleteTempFileMonitor> matchedLastMap = null;
		File_DeleteTempFileMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((f == File_DeleteTempFile_f_Map_cachekey_f) ) {
			matchedEntry = File_DeleteTempFile_f_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_f = new CachedWeakReference(f) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<File_DeleteTempFileMonitor> itmdMap = File_DeleteTempFile_f_Map;
				matchedLastMap = itmdMap;
				File_DeleteTempFileMonitor node_f = File_DeleteTempFile_f_Map.getNodeEquivalent(wr_f) ;
				matchedEntry = node_f;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_f == null) ) {
				wr_f = new CachedWeakReference(f) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				File_DeleteTempFileMonitor sourceLeaf = null;
				{
					// FindCode
					File_DeleteTempFileMonitor itmdLeaf = File_DeleteTempFile__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <f>
					if (definable) {
						// FindCode
						File_DeleteTempFileMonitor node_f = File_DeleteTempFile_f_Map.getNodeEquivalent(wr_f) ;
						if ((node_f != null) ) {
							if (((node_f.getDisable() > sourceLeaf.getTau() ) || ((node_f.getTau() > 0) && (node_f.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						File_DeleteTempFileMonitor created = (File_DeleteTempFileMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_f, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							File_DeleteTempFileMonitor_Set targetSet = File_DeleteTempFile__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				File_DeleteTempFileMonitor created = new File_DeleteTempFileMonitor(File_DeleteTempFile_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_f, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					File_DeleteTempFileMonitor_Set targetSet = File_DeleteTempFile__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(File_DeleteTempFile_timestamp++) ;
		}
		// D(X) main:8--9
		final File_DeleteTempFileMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_explicit(f);
		if(matchedEntryfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			File_DeleteTempFile_f_Map_cachekey_f = f;
			File_DeleteTempFile_f_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void File_DeleteTempFile_implicitEvent(File f) {
		File_DeleteTempFile_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_f = null;
		MapOfMonitor<File_DeleteTempFileMonitor> matchedLastMap = null;
		File_DeleteTempFileMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((f == File_DeleteTempFile_f_Map_cachekey_f) ) {
			matchedEntry = File_DeleteTempFile_f_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_f = new CachedWeakReference(f) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<File_DeleteTempFileMonitor> itmdMap = File_DeleteTempFile_f_Map;
				matchedLastMap = itmdMap;
				File_DeleteTempFileMonitor node_f = File_DeleteTempFile_f_Map.getNodeEquivalent(wr_f) ;
				matchedEntry = node_f;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_f == null) ) {
				wr_f = new CachedWeakReference(f) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				File_DeleteTempFileMonitor sourceLeaf = null;
				{
					// FindCode
					File_DeleteTempFileMonitor itmdLeaf = File_DeleteTempFile__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <f>
					if (definable) {
						// FindCode
						File_DeleteTempFileMonitor node_f = File_DeleteTempFile_f_Map.getNodeEquivalent(wr_f) ;
						if ((node_f != null) ) {
							if (((node_f.getDisable() > sourceLeaf.getTau() ) || ((node_f.getTau() > 0) && (node_f.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						File_DeleteTempFileMonitor created = (File_DeleteTempFileMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_f, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							File_DeleteTempFileMonitor_Set targetSet = File_DeleteTempFile__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				File_DeleteTempFileMonitor created = new File_DeleteTempFileMonitor(File_DeleteTempFile_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_f, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					File_DeleteTempFileMonitor_Set targetSet = File_DeleteTempFile__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(File_DeleteTempFile_timestamp++) ;
		}
		// D(X) main:8--9
		final File_DeleteTempFileMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_implicit(f);
		if(matchedEntryfinalMonitor.File_DeleteTempFileMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			File_DeleteTempFile_f_Map_cachekey_f = f;
			File_DeleteTempFile_f_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void File_DeleteTempFile_endProgEvent() {
		File_DeleteTempFile_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Tuple2<File_DeleteTempFileMonitor_Set, File_DeleteTempFileMonitor> matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = File_DeleteTempFile__Map;
		}
		// D(X) main:1
		File_DeleteTempFileMonitor matchedLeaf = matchedEntry.getValue2() ;
		if ((matchedLeaf == null) ) {
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				File_DeleteTempFileMonitor created = new File_DeleteTempFileMonitor(File_DeleteTempFile_timestamp++) ;
				matchedEntry.setValue2(created) ;
				File_DeleteTempFileMonitor_Set enclosingSet = matchedEntry.getValue1() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			File_DeleteTempFileMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
			disableUpdatedLeaf.setDisable(File_DeleteTempFile_timestamp++) ;
		}
		// D(X) main:8--9
		File_DeleteTempFileMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
		stateTransitionedSet.event_endProg();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectInput_Close_createEvent(ObjectInput i) {
		ObjectInput_Close_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ObjectInput_CloseMonitor> matchedLastMap = null;
		ObjectInput_CloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ObjectInput_Close_i_Map_cachekey_i) ) {
			matchedEntry = ObjectInput_Close_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ObjectInput_CloseMonitor> itmdMap = ObjectInput_Close_i_Map;
				matchedLastMap = itmdMap;
				ObjectInput_CloseMonitor node_i = ObjectInput_Close_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				ObjectInput_CloseMonitor sourceLeaf = null;
				{
					// FindCode
					ObjectInput_CloseMonitor itmdLeaf = ObjectInput_Close__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <i>
					if (definable) {
						// FindCode
						ObjectInput_CloseMonitor node_i = ObjectInput_Close_i_Map.getNodeEquivalent(wr_i) ;
						if ((node_i != null) ) {
							if (((node_i.getDisable() > sourceLeaf.getTau() ) || ((node_i.getTau() > 0) && (node_i.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						ObjectInput_CloseMonitor created = (ObjectInput_CloseMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_i, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							ObjectInput_CloseMonitor_Set targetSet = ObjectInput_Close__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				ObjectInput_CloseMonitor created = new ObjectInput_CloseMonitor(ObjectInput_Close_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_i, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					ObjectInput_CloseMonitor_Set targetSet = ObjectInput_Close__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(ObjectInput_Close_timestamp++) ;
		}
		// D(X) main:8--9
		final ObjectInput_CloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(i);
		if(matchedEntryfinalMonitor.ObjectInput_CloseMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			ObjectInput_Close_i_Map_cachekey_i = i;
			ObjectInput_Close_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectInput_Close_closeEvent(ObjectInput i) {
		ObjectInput_Close_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ObjectInput_CloseMonitor> matchedLastMap = null;
		ObjectInput_CloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ObjectInput_Close_i_Map_cachekey_i) ) {
			matchedEntry = ObjectInput_Close_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ObjectInput_CloseMonitor> itmdMap = ObjectInput_Close_i_Map;
				matchedLastMap = itmdMap;
				ObjectInput_CloseMonitor node_i = ObjectInput_Close_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				ObjectInput_CloseMonitor sourceLeaf = null;
				{
					// FindCode
					ObjectInput_CloseMonitor itmdLeaf = ObjectInput_Close__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <i>
					if (definable) {
						// FindCode
						ObjectInput_CloseMonitor node_i = ObjectInput_Close_i_Map.getNodeEquivalent(wr_i) ;
						if ((node_i != null) ) {
							if (((node_i.getDisable() > sourceLeaf.getTau() ) || ((node_i.getTau() > 0) && (node_i.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						ObjectInput_CloseMonitor created = (ObjectInput_CloseMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_i, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							ObjectInput_CloseMonitor_Set targetSet = ObjectInput_Close__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				ObjectInput_CloseMonitor created = new ObjectInput_CloseMonitor(ObjectInput_Close_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_i, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					ObjectInput_CloseMonitor_Set targetSet = ObjectInput_Close__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(ObjectInput_Close_timestamp++) ;
		}
		// D(X) main:8--9
		final ObjectInput_CloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(i);
		if(matchedEntryfinalMonitor.ObjectInput_CloseMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			ObjectInput_Close_i_Map_cachekey_i = i;
			ObjectInput_Close_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectInput_Close_endProgEvent() {
		ObjectInput_Close_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Tuple2<ObjectInput_CloseMonitor_Set, ObjectInput_CloseMonitor> matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ObjectInput_Close__Map;
		}
		// D(X) main:1
		ObjectInput_CloseMonitor matchedLeaf = matchedEntry.getValue2() ;
		if ((matchedLeaf == null) ) {
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				ObjectInput_CloseMonitor created = new ObjectInput_CloseMonitor(ObjectInput_Close_timestamp++) ;
				matchedEntry.setValue2(created) ;
				ObjectInput_CloseMonitor_Set enclosingSet = matchedEntry.getValue1() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			ObjectInput_CloseMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
			disableUpdatedLeaf.setDisable(ObjectInput_Close_timestamp++) ;
		}
		// D(X) main:8--9
		ObjectInput_CloseMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
		stateTransitionedSet.event_endProg();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ReadAheadLimit_markEvent(InputStream i, int l) {
		InputStream_ReadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<InputStream_ReadAheadLimitMonitor> matchedLastMap = null;
		InputStream_ReadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == InputStream_ReadAheadLimit_i_Map_cachekey_i) ) {
			matchedEntry = InputStream_ReadAheadLimit_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<InputStream_ReadAheadLimitMonitor> itmdMap = InputStream_ReadAheadLimit_i_Map;
				matchedLastMap = itmdMap;
				InputStream_ReadAheadLimitMonitor node_i = InputStream_ReadAheadLimit_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			InputStream_ReadAheadLimitMonitor created = new InputStream_ReadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final InputStream_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_mark(i, l);
		if(matchedEntryfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			InputStream_ReadAheadLimit_i_Map_cachekey_i = i;
			InputStream_ReadAheadLimit_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ReadAheadLimit_read1Event(InputStream i, int n) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (InputStream_ReadAheadLimit_activated) {
			InputStream_ReadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == InputStream_ReadAheadLimit_i_Map_cachekey_i) ) {
				matchedEntry = InputStream_ReadAheadLimit_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				InputStream_ReadAheadLimitMonitor node_i = InputStream_ReadAheadLimit_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final InputStream_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_read1(i, n);
				if(matchedEntryfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					InputStream_ReadAheadLimit_i_Map_cachekey_i = i;
					InputStream_ReadAheadLimit_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ReadAheadLimit_readnEvent(InputStream i, int n) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (InputStream_ReadAheadLimit_activated) {
			InputStream_ReadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == InputStream_ReadAheadLimit_i_Map_cachekey_i) ) {
				matchedEntry = InputStream_ReadAheadLimit_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				InputStream_ReadAheadLimitMonitor node_i = InputStream_ReadAheadLimit_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final InputStream_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_readn(i, n);
				if(matchedEntryfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					InputStream_ReadAheadLimit_i_Map_cachekey_i = i;
					InputStream_ReadAheadLimit_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ReadAheadLimit_badresetEvent(InputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (InputStream_ReadAheadLimit_activated) {
			InputStream_ReadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == InputStream_ReadAheadLimit_i_Map_cachekey_i) ) {
				matchedEntry = InputStream_ReadAheadLimit_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				InputStream_ReadAheadLimitMonitor node_i = InputStream_ReadAheadLimit_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final InputStream_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_badreset(i);
				if(matchedEntryfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					InputStream_ReadAheadLimit_i_Map_cachekey_i = i;
					InputStream_ReadAheadLimit_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ReadAheadLimit_goodresetEvent(InputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (InputStream_ReadAheadLimit_activated) {
			InputStream_ReadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == InputStream_ReadAheadLimit_i_Map_cachekey_i) ) {
				matchedEntry = InputStream_ReadAheadLimit_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				InputStream_ReadAheadLimitMonitor node_i = InputStream_ReadAheadLimit_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final InputStream_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_goodreset(i);
				if(matchedEntryfinalMonitor.InputStream_ReadAheadLimitMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					InputStream_ReadAheadLimit_i_Map_cachekey_i = i;
					InputStream_ReadAheadLimit_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void RandomAccessFile_ManipulateAfterClose_manipulateEvent(RandomAccessFile f) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (RandomAccessFile_ManipulateAfterClose_activated) {
			RandomAccessFile_ManipulateAfterCloseMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((f == RandomAccessFile_ManipulateAfterClose_f_Map_cachekey_f) ) {
				matchedEntry = RandomAccessFile_ManipulateAfterClose_f_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				RandomAccessFile_ManipulateAfterCloseMonitor node_f = RandomAccessFile_ManipulateAfterClose_f_Map.getNodeWithStrongRef(f) ;
				matchedEntry = node_f;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final RandomAccessFile_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_manipulate(f);
				if(matchedEntryfinalMonitor.RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					RandomAccessFile_ManipulateAfterClose_f_Map_cachekey_f = f;
					RandomAccessFile_ManipulateAfterClose_f_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void RandomAccessFile_ManipulateAfterClose_closeEvent(RandomAccessFile f) {
		RandomAccessFile_ManipulateAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_f = null;
		MapOfMonitor<RandomAccessFile_ManipulateAfterCloseMonitor> matchedLastMap = null;
		RandomAccessFile_ManipulateAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((f == RandomAccessFile_ManipulateAfterClose_f_Map_cachekey_f) ) {
			matchedEntry = RandomAccessFile_ManipulateAfterClose_f_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_f = new CachedWeakReference(f) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<RandomAccessFile_ManipulateAfterCloseMonitor> itmdMap = RandomAccessFile_ManipulateAfterClose_f_Map;
				matchedLastMap = itmdMap;
				RandomAccessFile_ManipulateAfterCloseMonitor node_f = RandomAccessFile_ManipulateAfterClose_f_Map.getNodeEquivalent(wr_f) ;
				matchedEntry = node_f;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_f == null) ) {
				wr_f = new CachedWeakReference(f) ;
			}
			// D(X) main:4
			RandomAccessFile_ManipulateAfterCloseMonitor created = new RandomAccessFile_ManipulateAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_f, created) ;
		}
		// D(X) main:8--9
		final RandomAccessFile_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(f);
		if(matchedEntryfinalMonitor.RandomAccessFile_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			RandomAccessFile_ManipulateAfterClose_f_Map_cachekey_f = f;
			RandomAccessFile_ManipulateAfterClose_f_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_FillZeroPassword_readEvent(Object pwd) {
		Console_FillZeroPassword_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_pwd = null;
		MapOfMonitor<Console_FillZeroPasswordMonitor> matchedLastMap = null;
		Console_FillZeroPasswordMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((pwd == Console_FillZeroPassword_pwd_Map_cachekey_pwd) ) {
			matchedEntry = Console_FillZeroPassword_pwd_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_pwd = new CachedWeakReference(pwd) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Console_FillZeroPasswordMonitor> itmdMap = Console_FillZeroPassword_pwd_Map;
				matchedLastMap = itmdMap;
				Console_FillZeroPasswordMonitor node_pwd = Console_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
				matchedEntry = node_pwd;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_pwd == null) ) {
				wr_pwd = new CachedWeakReference(pwd) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				Console_FillZeroPasswordMonitor sourceLeaf = null;
				{
					// FindCode
					Console_FillZeroPasswordMonitor itmdLeaf = Console_FillZeroPassword__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <pwd>
					if (definable) {
						// FindCode
						Console_FillZeroPasswordMonitor node_pwd = Console_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
						if ((node_pwd != null) ) {
							if (((node_pwd.getDisable() > sourceLeaf.getTau() ) || ((node_pwd.getTau() > 0) && (node_pwd.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						Console_FillZeroPasswordMonitor created = (Console_FillZeroPasswordMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_pwd, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							Console_FillZeroPasswordMonitor_Set targetSet = Console_FillZeroPassword__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				Console_FillZeroPasswordMonitor created = new Console_FillZeroPasswordMonitor(Console_FillZeroPassword_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_pwd, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					Console_FillZeroPasswordMonitor_Set targetSet = Console_FillZeroPassword__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(Console_FillZeroPassword_timestamp++) ;
		}
		// D(X) main:8--9
		final Console_FillZeroPasswordMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_read(pwd);
		if(matchedEntryfinalMonitor.Console_FillZeroPasswordMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			Console_FillZeroPassword_pwd_Map_cachekey_pwd = pwd;
			Console_FillZeroPassword_pwd_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_FillZeroPassword_obliterateEvent(Object pwd) {
		Console_FillZeroPassword_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_pwd = null;
		MapOfMonitor<Console_FillZeroPasswordMonitor> matchedLastMap = null;
		Console_FillZeroPasswordMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((pwd == Console_FillZeroPassword_pwd_Map_cachekey_pwd) ) {
			matchedEntry = Console_FillZeroPassword_pwd_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_pwd = new CachedWeakReference(pwd) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Console_FillZeroPasswordMonitor> itmdMap = Console_FillZeroPassword_pwd_Map;
				matchedLastMap = itmdMap;
				Console_FillZeroPasswordMonitor node_pwd = Console_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
				matchedEntry = node_pwd;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_pwd == null) ) {
				wr_pwd = new CachedWeakReference(pwd) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				Console_FillZeroPasswordMonitor sourceLeaf = null;
				{
					// FindCode
					Console_FillZeroPasswordMonitor itmdLeaf = Console_FillZeroPassword__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <pwd>
					if (definable) {
						// FindCode
						Console_FillZeroPasswordMonitor node_pwd = Console_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
						if ((node_pwd != null) ) {
							if (((node_pwd.getDisable() > sourceLeaf.getTau() ) || ((node_pwd.getTau() > 0) && (node_pwd.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						Console_FillZeroPasswordMonitor created = (Console_FillZeroPasswordMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_pwd, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							Console_FillZeroPasswordMonitor_Set targetSet = Console_FillZeroPassword__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				Console_FillZeroPasswordMonitor created = new Console_FillZeroPasswordMonitor(Console_FillZeroPassword_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_pwd, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					Console_FillZeroPasswordMonitor_Set targetSet = Console_FillZeroPassword__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(Console_FillZeroPassword_timestamp++) ;
		}
		// D(X) main:8--9
		final Console_FillZeroPasswordMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_obliterate(pwd);
		if(matchedEntryfinalMonitor.Console_FillZeroPasswordMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			Console_FillZeroPassword_pwd_Map_cachekey_pwd = pwd;
			Console_FillZeroPassword_pwd_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_FillZeroPassword_endProgEvent() {
		Console_FillZeroPassword_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Tuple2<Console_FillZeroPasswordMonitor_Set, Console_FillZeroPasswordMonitor> matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Console_FillZeroPassword__Map;
		}
		// D(X) main:1
		Console_FillZeroPasswordMonitor matchedLeaf = matchedEntry.getValue2() ;
		if ((matchedLeaf == null) ) {
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				Console_FillZeroPasswordMonitor created = new Console_FillZeroPasswordMonitor(Console_FillZeroPassword_timestamp++) ;
				matchedEntry.setValue2(created) ;
				Console_FillZeroPasswordMonitor_Set enclosingSet = matchedEntry.getValue1() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			Console_FillZeroPasswordMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
			disableUpdatedLeaf.setDisable(Console_FillZeroPassword_timestamp++) ;
		}
		// D(X) main:8--9
		Console_FillZeroPasswordMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
		stateTransitionedSet.event_endProg();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ManipulateAfterClose_manipulateEvent(InputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (InputStream_ManipulateAfterClose_activated) {
			InputStream_ManipulateAfterCloseMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == InputStream_ManipulateAfterClose_i_Map_cachekey_i) ) {
				matchedEntry = InputStream_ManipulateAfterClose_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				InputStream_ManipulateAfterCloseMonitor node_i = InputStream_ManipulateAfterClose_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final InputStream_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_manipulate(i);
				if(matchedEntryfinalMonitor.InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					InputStream_ManipulateAfterClose_i_Map_cachekey_i = i;
					InputStream_ManipulateAfterClose_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_ManipulateAfterClose_closeEvent(InputStream i) {
		InputStream_ManipulateAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<InputStream_ManipulateAfterCloseMonitor> matchedLastMap = null;
		InputStream_ManipulateAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == InputStream_ManipulateAfterClose_i_Map_cachekey_i) ) {
			matchedEntry = InputStream_ManipulateAfterClose_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<InputStream_ManipulateAfterCloseMonitor> itmdMap = InputStream_ManipulateAfterClose_i_Map;
				matchedLastMap = itmdMap;
				InputStream_ManipulateAfterCloseMonitor node_i = InputStream_ManipulateAfterClose_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			InputStream_ManipulateAfterCloseMonitor created = new InputStream_ManipulateAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final InputStream_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(i);
		if(matchedEntryfinalMonitor.InputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			InputStream_ManipulateAfterClose_i_Map_cachekey_i = i;
			InputStream_ManipulateAfterClose_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Closeable_MultipleClose_closeEvent(Closeable c) {
		Closeable_MultipleClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<Closeable_MultipleCloseMonitor> matchedLastMap = null;
		Closeable_MultipleCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == Closeable_MultipleClose_c_Map_cachekey_c) ) {
			matchedEntry = Closeable_MultipleClose_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Closeable_MultipleCloseMonitor> itmdMap = Closeable_MultipleClose_c_Map;
				matchedLastMap = itmdMap;
				Closeable_MultipleCloseMonitor node_c = Closeable_MultipleClose_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			Closeable_MultipleCloseMonitor created = new Closeable_MultipleCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final Closeable_MultipleCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(c);
		if(matchedEntryfinalMonitor.Closeable_MultipleCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Closeable_MultipleClose_c_Map_cachekey_c = c;
			Closeable_MultipleClose_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void File_LengthOnDirectory_bad_lengthEvent(File f) {
		File_LengthOnDirectory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		File_LengthOnDirectoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = File_LengthOnDirectory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			File_LengthOnDirectoryRawMonitor created = new File_LengthOnDirectoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_length(f);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Serializable_UID_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Serializable_UID_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Serializable_UIDRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Serializable_UID__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Serializable_UIDRawMonitor created = new Serializable_UIDRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_MarkReset_markEvent(Reader r) {
		Reader_MarkReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Reader_MarkResetRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Reader_MarkReset__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Reader_MarkResetRawMonitor created = new Reader_MarkResetRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_mark(r);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_MarkReset_resetEvent(Reader r) {
		Reader_MarkReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Reader_MarkResetRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Reader_MarkReset__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Reader_MarkResetRawMonitor created = new Reader_MarkResetRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_reset(r);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Serializable_NoArgConstructor_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Serializable_NoArgConstructor_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Serializable_NoArgConstructorRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Serializable_NoArgConstructor__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Serializable_NoArgConstructorRawMonitor created = new Serializable_NoArgConstructorRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_UnmarkedReset_markEvent(InputStream i) {
		InputStream_UnmarkedReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<InputStream_UnmarkedResetMonitor> matchedLastMap = null;
		InputStream_UnmarkedResetMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == InputStream_UnmarkedReset_i_Map_cachekey_i) ) {
			matchedEntry = InputStream_UnmarkedReset_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<InputStream_UnmarkedResetMonitor> itmdMap = InputStream_UnmarkedReset_i_Map;
				matchedLastMap = itmdMap;
				InputStream_UnmarkedResetMonitor node_i = InputStream_UnmarkedReset_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			InputStream_UnmarkedResetMonitor created = new InputStream_UnmarkedResetMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final InputStream_UnmarkedResetMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_mark(i);
		if(matchedEntryfinalMonitor.InputStream_UnmarkedResetMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			InputStream_UnmarkedReset_i_Map_cachekey_i = i;
			InputStream_UnmarkedReset_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_UnmarkedReset_resetEvent(InputStream i) {
		InputStream_UnmarkedReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<InputStream_UnmarkedResetMonitor> matchedLastMap = null;
		InputStream_UnmarkedResetMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == InputStream_UnmarkedReset_i_Map_cachekey_i) ) {
			matchedEntry = InputStream_UnmarkedReset_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<InputStream_UnmarkedResetMonitor> itmdMap = InputStream_UnmarkedReset_i_Map;
				matchedLastMap = itmdMap;
				InputStream_UnmarkedResetMonitor node_i = InputStream_UnmarkedReset_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			InputStream_UnmarkedResetMonitor created = new InputStream_UnmarkedResetMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final InputStream_UnmarkedResetMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_reset(i);
		if(matchedEntryfinalMonitor.InputStream_UnmarkedResetMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			InputStream_UnmarkedReset_i_Map_cachekey_i = i;
			InputStream_UnmarkedReset_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Closeable_MeaninglessClose_closeEvent() {
		Closeable_MeaninglessClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Closeable_MeaninglessCloseRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Closeable_MeaninglessClose__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Closeable_MeaninglessCloseRawMonitor created = new Closeable_MeaninglessCloseRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_close();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void OutputStream_ManipulateAfterClose_manipulateEvent(OutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (OutputStream_ManipulateAfterClose_activated) {
			OutputStream_ManipulateAfterCloseMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((o == OutputStream_ManipulateAfterClose_o_Map_cachekey_o) ) {
				matchedEntry = OutputStream_ManipulateAfterClose_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				OutputStream_ManipulateAfterCloseMonitor node_o = OutputStream_ManipulateAfterClose_o_Map.getNodeWithStrongRef(o) ;
				matchedEntry = node_o;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final OutputStream_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_manipulate(o);
				if(matchedEntryfinalMonitor.OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					OutputStream_ManipulateAfterClose_o_Map_cachekey_o = o;
					OutputStream_ManipulateAfterClose_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void OutputStream_ManipulateAfterClose_closeEvent(OutputStream o) {
		OutputStream_ManipulateAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_o = null;
		MapOfMonitor<OutputStream_ManipulateAfterCloseMonitor> matchedLastMap = null;
		OutputStream_ManipulateAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((o == OutputStream_ManipulateAfterClose_o_Map_cachekey_o) ) {
			matchedEntry = OutputStream_ManipulateAfterClose_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<OutputStream_ManipulateAfterCloseMonitor> itmdMap = OutputStream_ManipulateAfterClose_o_Map;
				matchedLastMap = itmdMap;
				OutputStream_ManipulateAfterCloseMonitor node_o = OutputStream_ManipulateAfterClose_o_Map.getNodeEquivalent(wr_o) ;
				matchedEntry = node_o;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			// D(X) main:4
			OutputStream_ManipulateAfterCloseMonitor created = new OutputStream_ManipulateAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_o, created) ;
		}
		// D(X) main:8--9
		final OutputStream_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(o);
		if(matchedEntryfinalMonitor.OutputStream_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			OutputStream_ManipulateAfterClose_o_Map_cachekey_o = o;
			OutputStream_ManipulateAfterClose_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InputStream_MarkReset_mark_or_resetEvent() {
		InputStream_MarkReset_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		InputStream_MarkResetRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = InputStream_MarkReset__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			InputStream_MarkResetRawMonitor created = new InputStream_MarkResetRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_mark_or_reset();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_CloseWriter_getwriterEvent(Writer w) {
		Console_CloseWriter_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_w = null;
		MapOfMonitor<Console_CloseWriterMonitor> matchedLastMap = null;
		Console_CloseWriterMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((w == Console_CloseWriter_w_Map_cachekey_w) ) {
			matchedEntry = Console_CloseWriter_w_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_w = new CachedWeakReference(w) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Console_CloseWriterMonitor> itmdMap = Console_CloseWriter_w_Map;
				matchedLastMap = itmdMap;
				Console_CloseWriterMonitor node_w = Console_CloseWriter_w_Map.getNodeEquivalent(wr_w) ;
				matchedEntry = node_w;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_w == null) ) {
				wr_w = new CachedWeakReference(w) ;
			}
			// D(X) main:4
			Console_CloseWriterMonitor created = new Console_CloseWriterMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_w, created) ;
		}
		// D(X) main:8--9
		final Console_CloseWriterMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getwriter(w);
		if(matchedEntryfinalMonitor.Console_CloseWriterMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Console_CloseWriter_w_Map_cachekey_w = w;
			Console_CloseWriter_w_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_CloseWriter_closeEvent(Writer w) {
		Console_CloseWriter_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_w = null;
		MapOfMonitor<Console_CloseWriterMonitor> matchedLastMap = null;
		Console_CloseWriterMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((w == Console_CloseWriter_w_Map_cachekey_w) ) {
			matchedEntry = Console_CloseWriter_w_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_w = new CachedWeakReference(w) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Console_CloseWriterMonitor> itmdMap = Console_CloseWriter_w_Map;
				matchedLastMap = itmdMap;
				Console_CloseWriterMonitor node_w = Console_CloseWriter_w_Map.getNodeEquivalent(wr_w) ;
				matchedEntry = node_w;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_w == null) ) {
				wr_w = new CachedWeakReference(w) ;
			}
			// D(X) main:4
			Console_CloseWriterMonitor created = new Console_CloseWriterMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_w, created) ;
		}
		// D(X) main:8--9
		final Console_CloseWriterMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(w);
		if(matchedEntryfinalMonitor.Console_CloseWriterMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Console_CloseWriter_w_Map_cachekey_w = w;
			Console_CloseWriter_w_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectStreamClass_Initialize_createEvent(ObjectStreamClass c) {
		ObjectStreamClass_Initialize_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<ObjectStreamClass_InitializeMonitor> matchedLastMap = null;
		ObjectStreamClass_InitializeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == ObjectStreamClass_Initialize_c_Map_cachekey_c) ) {
			matchedEntry = ObjectStreamClass_Initialize_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ObjectStreamClass_InitializeMonitor> itmdMap = ObjectStreamClass_Initialize_c_Map;
				matchedLastMap = itmdMap;
				ObjectStreamClass_InitializeMonitor node_c = ObjectStreamClass_Initialize_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				ObjectStreamClass_InitializeMonitor sourceLeaf = null;
				{
					// FindCode
					ObjectStreamClass_InitializeMonitor itmdLeaf = ObjectStreamClass_Initialize__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <c>
					if (definable) {
						// FindCode
						ObjectStreamClass_InitializeMonitor node_c = ObjectStreamClass_Initialize_c_Map.getNodeEquivalent(wr_c) ;
						if ((node_c != null) ) {
							if (((node_c.getDisable() > sourceLeaf.getTau() ) || ((node_c.getTau() > 0) && (node_c.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						ObjectStreamClass_InitializeMonitor created = (ObjectStreamClass_InitializeMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_c, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							ObjectStreamClass_InitializeMonitor_Set targetSet = ObjectStreamClass_Initialize__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				ObjectStreamClass_InitializeMonitor created = new ObjectStreamClass_InitializeMonitor(ObjectStreamClass_Initialize_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_c, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					ObjectStreamClass_InitializeMonitor_Set targetSet = ObjectStreamClass_Initialize__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(ObjectStreamClass_Initialize_timestamp++) ;
		}
		// D(X) main:8--9
		final ObjectStreamClass_InitializeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(c);
		if(matchedEntryfinalMonitor.ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			ObjectStreamClass_Initialize_c_Map_cachekey_c = c;
			ObjectStreamClass_Initialize_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectStreamClass_Initialize_initEvent(ObjectStreamClass c) {
		ObjectStreamClass_Initialize_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<ObjectStreamClass_InitializeMonitor> matchedLastMap = null;
		ObjectStreamClass_InitializeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == ObjectStreamClass_Initialize_c_Map_cachekey_c) ) {
			matchedEntry = ObjectStreamClass_Initialize_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ObjectStreamClass_InitializeMonitor> itmdMap = ObjectStreamClass_Initialize_c_Map;
				matchedLastMap = itmdMap;
				ObjectStreamClass_InitializeMonitor node_c = ObjectStreamClass_Initialize_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				ObjectStreamClass_InitializeMonitor sourceLeaf = null;
				{
					// FindCode
					ObjectStreamClass_InitializeMonitor itmdLeaf = ObjectStreamClass_Initialize__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <c>
					if (definable) {
						// FindCode
						ObjectStreamClass_InitializeMonitor node_c = ObjectStreamClass_Initialize_c_Map.getNodeEquivalent(wr_c) ;
						if ((node_c != null) ) {
							if (((node_c.getDisable() > sourceLeaf.getTau() ) || ((node_c.getTau() > 0) && (node_c.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						ObjectStreamClass_InitializeMonitor created = (ObjectStreamClass_InitializeMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_c, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							ObjectStreamClass_InitializeMonitor_Set targetSet = ObjectStreamClass_Initialize__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				ObjectStreamClass_InitializeMonitor created = new ObjectStreamClass_InitializeMonitor(ObjectStreamClass_Initialize_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_c, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					ObjectStreamClass_InitializeMonitor_Set targetSet = ObjectStreamClass_Initialize__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(ObjectStreamClass_Initialize_timestamp++) ;
		}
		// D(X) main:8--9
		final ObjectStreamClass_InitializeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_init(c);
		if(matchedEntryfinalMonitor.ObjectStreamClass_InitializeMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			ObjectStreamClass_Initialize_c_Map_cachekey_c = c;
			ObjectStreamClass_Initialize_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ObjectStreamClass_Initialize_endProgEvent() {
		ObjectStreamClass_Initialize_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Tuple2<ObjectStreamClass_InitializeMonitor_Set, ObjectStreamClass_InitializeMonitor> matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ObjectStreamClass_Initialize__Map;
		}
		// D(X) main:1
		ObjectStreamClass_InitializeMonitor matchedLeaf = matchedEntry.getValue2() ;
		if ((matchedLeaf == null) ) {
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				ObjectStreamClass_InitializeMonitor created = new ObjectStreamClass_InitializeMonitor(ObjectStreamClass_Initialize_timestamp++) ;
				matchedEntry.setValue2(created) ;
				ObjectStreamClass_InitializeMonitor_Set enclosingSet = matchedEntry.getValue1() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			ObjectStreamClass_InitializeMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
			disableUpdatedLeaf.setDisable(ObjectStreamClass_Initialize_timestamp++) ;
		}
		// D(X) main:8--9
		ObjectStreamClass_InitializeMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
		stateTransitionedSet.event_endProg();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedOutputStream_UnconnectedWrite_createEvent(PipedOutputStream o) {
		PipedOutputStream_UnconnectedWrite_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_o = null;
		MapOfMonitor<PipedOutputStream_UnconnectedWriteMonitor> matchedLastMap = null;
		PipedOutputStream_UnconnectedWriteMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((o == PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o) ) {
			matchedEntry = PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PipedOutputStream_UnconnectedWriteMonitor> itmdMap = PipedOutputStream_UnconnectedWrite_o_Map;
				matchedLastMap = itmdMap;
				PipedOutputStream_UnconnectedWriteMonitor node_o = PipedOutputStream_UnconnectedWrite_o_Map.getNodeEquivalent(wr_o) ;
				matchedEntry = node_o;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			// D(X) main:4
			PipedOutputStream_UnconnectedWriteMonitor created = new PipedOutputStream_UnconnectedWriteMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_o, created) ;
		}
		// D(X) main:8--9
		final PipedOutputStream_UnconnectedWriteMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(o);
		if(matchedEntryfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o = o;
			PipedOutputStream_UnconnectedWrite_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedOutputStream_UnconnectedWrite_create_ioEvent(PipedOutputStream o) {
		PipedOutputStream_UnconnectedWrite_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_o = null;
		MapOfMonitor<PipedOutputStream_UnconnectedWriteMonitor> matchedLastMap = null;
		PipedOutputStream_UnconnectedWriteMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((o == PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o) ) {
			matchedEntry = PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PipedOutputStream_UnconnectedWriteMonitor> itmdMap = PipedOutputStream_UnconnectedWrite_o_Map;
				matchedLastMap = itmdMap;
				PipedOutputStream_UnconnectedWriteMonitor node_o = PipedOutputStream_UnconnectedWrite_o_Map.getNodeEquivalent(wr_o) ;
				matchedEntry = node_o;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			// D(X) main:4
			PipedOutputStream_UnconnectedWriteMonitor created = new PipedOutputStream_UnconnectedWriteMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_o, created) ;
		}
		// D(X) main:8--9
		final PipedOutputStream_UnconnectedWriteMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_io(o);
		if(matchedEntryfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o = o;
			PipedOutputStream_UnconnectedWrite_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedOutputStream_UnconnectedWrite_create_oiEvent(PipedOutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedOutputStream_UnconnectedWrite_activated) {
			PipedOutputStream_UnconnectedWriteMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((o == PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o) ) {
				matchedEntry = PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedOutputStream_UnconnectedWriteMonitor node_o = PipedOutputStream_UnconnectedWrite_o_Map.getNodeWithStrongRef(o) ;
				matchedEntry = node_o;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedOutputStream_UnconnectedWriteMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_create_oi(o);
				if(matchedEntryfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o = o;
					PipedOutputStream_UnconnectedWrite_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedOutputStream_UnconnectedWrite_connect1Event(PipedOutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedOutputStream_UnconnectedWrite_activated) {
			PipedOutputStream_UnconnectedWriteMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((o == PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o) ) {
				matchedEntry = PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedOutputStream_UnconnectedWriteMonitor node_o = PipedOutputStream_UnconnectedWrite_o_Map.getNodeWithStrongRef(o) ;
				matchedEntry = node_o;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedOutputStream_UnconnectedWriteMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect1(o);
				if(matchedEntryfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o = o;
					PipedOutputStream_UnconnectedWrite_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedOutputStream_UnconnectedWrite_connect2Event(PipedOutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedOutputStream_UnconnectedWrite_activated) {
			PipedOutputStream_UnconnectedWriteMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((o == PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o) ) {
				matchedEntry = PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedOutputStream_UnconnectedWriteMonitor node_o = PipedOutputStream_UnconnectedWrite_o_Map.getNodeWithStrongRef(o) ;
				matchedEntry = node_o;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedOutputStream_UnconnectedWriteMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect2(o);
				if(matchedEntryfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o = o;
					PipedOutputStream_UnconnectedWrite_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedOutputStream_UnconnectedWrite_writeEvent(PipedOutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedOutputStream_UnconnectedWrite_activated) {
			PipedOutputStream_UnconnectedWriteMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((o == PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o) ) {
				matchedEntry = PipedOutputStream_UnconnectedWrite_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PipedOutputStream_UnconnectedWriteMonitor node_o = PipedOutputStream_UnconnectedWrite_o_Map.getNodeWithStrongRef(o) ;
				matchedEntry = node_o;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PipedOutputStream_UnconnectedWriteMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_write(o);
				if(matchedEntryfinalMonitor.PipedOutputStream_UnconnectedWriteMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PipedOutputStream_UnconnectedWrite_o_Map_cachekey_o = o;
					PipedOutputStream_UnconnectedWrite_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_createEvent(PushbackInputStream p) {
		PushbackInputStream_UnreadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_p = null;
		MapOfMonitor<PushbackInputStream_UnreadAheadLimitMonitor> matchedLastMap = null;
		PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
			matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_p = new CachedWeakReference(p) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PushbackInputStream_UnreadAheadLimitMonitor> itmdMap = PushbackInputStream_UnreadAheadLimit_p_Map;
				matchedLastMap = itmdMap;
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeEquivalent(wr_p) ;
				matchedEntry = node_p;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_p == null) ) {
				wr_p = new CachedWeakReference(p) ;
			}
			// D(X) main:4
			PushbackInputStream_UnreadAheadLimitMonitor created = new PushbackInputStream_UnreadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_p, created) ;
		}
		// D(X) main:8--9
		final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(p);
		if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
			PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_createEvent(int size, PushbackInputStream p) {
		PushbackInputStream_UnreadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_p = null;
		MapOfMonitor<PushbackInputStream_UnreadAheadLimitMonitor> matchedLastMap = null;
		PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
			matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_p = new CachedWeakReference(p) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PushbackInputStream_UnreadAheadLimitMonitor> itmdMap = PushbackInputStream_UnreadAheadLimit_p_Map;
				matchedLastMap = itmdMap;
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeEquivalent(wr_p) ;
				matchedEntry = node_p;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_p == null) ) {
				wr_p = new CachedWeakReference(p) ;
			}
			// D(X) main:4
			PushbackInputStream_UnreadAheadLimitMonitor created = new PushbackInputStream_UnreadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_p, created) ;
		}
		// D(X) main:8--9
		final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(size, p);
		if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
			PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_read1Event(PushbackInputStream p, int r) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_read1(p, r);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_read2Event(PushbackInputStream p, int n) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_read2(p, n);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_safeunreadEvent(PushbackInputStream p) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_safeunread(p);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_unsafeunreadEvent(PushbackInputStream p) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_unsafeunread(p);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_safeunreadEvent(PushbackInputStream p, Object b) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_safeunread(p, b);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_unsafeunreadEvent(PushbackInputStream p, Object b) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_unsafeunread(p, b);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_safeunreadEvent(PushbackInputStream p, int len) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_safeunread(p, len);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PushbackInputStream_UnreadAheadLimit_unsafeunreadEvent(PushbackInputStream p, int len) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PushbackInputStream_UnreadAheadLimit_activated) {
			PushbackInputStream_UnreadAheadLimitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((p == PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p) ) {
				matchedEntry = PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				PushbackInputStream_UnreadAheadLimitMonitor node_p = PushbackInputStream_UnreadAheadLimit_p_Map.getNodeWithStrongRef(p) ;
				matchedEntry = node_p;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final PushbackInputStream_UnreadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_unsafeunread(p, len);
				if(matchedEntryfinalMonitor.PushbackInputStream_UnreadAheadLimitMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					PushbackInputStream_UnreadAheadLimit_p_Map_cachekey_p = p;
					PushbackInputStream_UnreadAheadLimit_p_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StreamTokenizer_AccessInvalidField_nexttoken_wordEvent(StreamTokenizer s, int t) {
		StreamTokenizer_AccessInvalidField_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> matchedLastMap = null;
		StreamTokenizer_AccessInvalidFieldMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StreamTokenizer_AccessInvalidField_s_Map_cachekey_s) ) {
			matchedEntry = StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> itmdMap = StreamTokenizer_AccessInvalidField_s_Map;
				matchedLastMap = itmdMap;
				StreamTokenizer_AccessInvalidFieldMonitor node_s = StreamTokenizer_AccessInvalidField_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StreamTokenizer_AccessInvalidFieldMonitor created = new StreamTokenizer_AccessInvalidFieldMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final StreamTokenizer_AccessInvalidFieldMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_nexttoken_word(s, t);
		if(matchedEntryfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StreamTokenizer_AccessInvalidField_s_Map_cachekey_s = s;
			StreamTokenizer_AccessInvalidField_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StreamTokenizer_AccessInvalidField_nexttoken_numEvent(StreamTokenizer s, int t) {
		StreamTokenizer_AccessInvalidField_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> matchedLastMap = null;
		StreamTokenizer_AccessInvalidFieldMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StreamTokenizer_AccessInvalidField_s_Map_cachekey_s) ) {
			matchedEntry = StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> itmdMap = StreamTokenizer_AccessInvalidField_s_Map;
				matchedLastMap = itmdMap;
				StreamTokenizer_AccessInvalidFieldMonitor node_s = StreamTokenizer_AccessInvalidField_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StreamTokenizer_AccessInvalidFieldMonitor created = new StreamTokenizer_AccessInvalidFieldMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final StreamTokenizer_AccessInvalidFieldMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_nexttoken_num(s, t);
		if(matchedEntryfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StreamTokenizer_AccessInvalidField_s_Map_cachekey_s = s;
			StreamTokenizer_AccessInvalidField_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StreamTokenizer_AccessInvalidField_nexttoken_eolEvent(StreamTokenizer s, int t) {
		StreamTokenizer_AccessInvalidField_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> matchedLastMap = null;
		StreamTokenizer_AccessInvalidFieldMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StreamTokenizer_AccessInvalidField_s_Map_cachekey_s) ) {
			matchedEntry = StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> itmdMap = StreamTokenizer_AccessInvalidField_s_Map;
				matchedLastMap = itmdMap;
				StreamTokenizer_AccessInvalidFieldMonitor node_s = StreamTokenizer_AccessInvalidField_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StreamTokenizer_AccessInvalidFieldMonitor created = new StreamTokenizer_AccessInvalidFieldMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final StreamTokenizer_AccessInvalidFieldMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_nexttoken_eol(s, t);
		if(matchedEntryfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StreamTokenizer_AccessInvalidField_s_Map_cachekey_s = s;
			StreamTokenizer_AccessInvalidField_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StreamTokenizer_AccessInvalidField_nexttoken_eofEvent(StreamTokenizer s, int t) {
		StreamTokenizer_AccessInvalidField_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> matchedLastMap = null;
		StreamTokenizer_AccessInvalidFieldMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StreamTokenizer_AccessInvalidField_s_Map_cachekey_s) ) {
			matchedEntry = StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> itmdMap = StreamTokenizer_AccessInvalidField_s_Map;
				matchedLastMap = itmdMap;
				StreamTokenizer_AccessInvalidFieldMonitor node_s = StreamTokenizer_AccessInvalidField_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StreamTokenizer_AccessInvalidFieldMonitor created = new StreamTokenizer_AccessInvalidFieldMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final StreamTokenizer_AccessInvalidFieldMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_nexttoken_eof(s, t);
		if(matchedEntryfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StreamTokenizer_AccessInvalidField_s_Map_cachekey_s = s;
			StreamTokenizer_AccessInvalidField_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StreamTokenizer_AccessInvalidField_svalEvent(StreamTokenizer s) {
		StreamTokenizer_AccessInvalidField_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> matchedLastMap = null;
		StreamTokenizer_AccessInvalidFieldMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StreamTokenizer_AccessInvalidField_s_Map_cachekey_s) ) {
			matchedEntry = StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> itmdMap = StreamTokenizer_AccessInvalidField_s_Map;
				matchedLastMap = itmdMap;
				StreamTokenizer_AccessInvalidFieldMonitor node_s = StreamTokenizer_AccessInvalidField_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StreamTokenizer_AccessInvalidFieldMonitor created = new StreamTokenizer_AccessInvalidFieldMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final StreamTokenizer_AccessInvalidFieldMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sval(s);
		if(matchedEntryfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StreamTokenizer_AccessInvalidField_s_Map_cachekey_s = s;
			StreamTokenizer_AccessInvalidField_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StreamTokenizer_AccessInvalidField_nvalEvent(StreamTokenizer s) {
		StreamTokenizer_AccessInvalidField_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> matchedLastMap = null;
		StreamTokenizer_AccessInvalidFieldMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StreamTokenizer_AccessInvalidField_s_Map_cachekey_s) ) {
			matchedEntry = StreamTokenizer_AccessInvalidField_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StreamTokenizer_AccessInvalidFieldMonitor> itmdMap = StreamTokenizer_AccessInvalidField_s_Map;
				matchedLastMap = itmdMap;
				StreamTokenizer_AccessInvalidFieldMonitor node_s = StreamTokenizer_AccessInvalidField_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StreamTokenizer_AccessInvalidFieldMonitor created = new StreamTokenizer_AccessInvalidFieldMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final StreamTokenizer_AccessInvalidFieldMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_nval(s);
		if(matchedEntryfinalMonitor.StreamTokenizer_AccessInvalidFieldMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StreamTokenizer_AccessInvalidField_s_Map_cachekey_s = s;
			StreamTokenizer_AccessInvalidField_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedStream_SingleThread_create1Event(PipedOutputStream o, PipedInputStream i) {
		PipedStream_SingleThread_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		CachedWeakReference wr_o = null;
		Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((i == PipedStream_SingleThread_i_o_Map_cachekey_i) && (o == PipedStream_SingleThread_i_o_Map_cachekey_o) ) ) {
			matchedEntry = PipedStream_SingleThread_i_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
					PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
				}
				Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
				if ((node_i_o == null) ) {
					node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
					node_i.putNode(wr_o, node_i_o) ;
					node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
					node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
				}
				matchedEntry = node_i_o;
			}
		}
		// D(X) main:1
		PipedStream_SingleThreadMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				PipedStream_SingleThreadMonitor created = new PipedStream_SingleThreadMonitor(PipedStream_SingleThread_timestamp++, wr_i, wr_o) ;
				matchedEntry.setValue3(created) ;
				PipedStream_SingleThreadMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <i-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i__To__i_o_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_i__To__i_o_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_i.getValue1() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <o-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o__To__i_o_Map.getNodeEquivalent(wr_o) ;
					if ((node_o == null) ) {
						node_o = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_o__To__i_o_Map.putNode(wr_o, node_o) ;
						node_o.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_o.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			PipedStream_SingleThreadMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(PipedStream_SingleThread_timestamp++) ;
		}
		// D(X) main:8--9
		PipedStream_SingleThreadMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_create1(o, i);

		if ((cachehit == false) ) {
			PipedStream_SingleThread_i_o_Map_cachekey_i = i;
			PipedStream_SingleThread_i_o_Map_cachekey_o = o;
			PipedStream_SingleThread_i_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedStream_SingleThread_create2Event(PipedInputStream i, PipedOutputStream o) {
		PipedStream_SingleThread_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		CachedWeakReference wr_o = null;
		Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((i == PipedStream_SingleThread_i_o_Map_cachekey_i) && (o == PipedStream_SingleThread_i_o_Map_cachekey_o) ) ) {
			matchedEntry = PipedStream_SingleThread_i_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
					PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
				}
				Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
				if ((node_i_o == null) ) {
					node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
					node_i.putNode(wr_o, node_i_o) ;
					node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
					node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
				}
				matchedEntry = node_i_o;
			}
		}
		// D(X) main:1
		PipedStream_SingleThreadMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				PipedStream_SingleThreadMonitor created = new PipedStream_SingleThreadMonitor(PipedStream_SingleThread_timestamp++, wr_i, wr_o) ;
				matchedEntry.setValue3(created) ;
				PipedStream_SingleThreadMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <i-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i__To__i_o_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_i__To__i_o_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_i.getValue1() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <o-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o__To__i_o_Map.getNodeEquivalent(wr_o) ;
					if ((node_o == null) ) {
						node_o = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_o__To__i_o_Map.putNode(wr_o, node_o) ;
						node_o.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_o.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			PipedStream_SingleThreadMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(PipedStream_SingleThread_timestamp++) ;
		}
		// D(X) main:8--9
		PipedStream_SingleThreadMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_create2(i, o);

		if ((cachehit == false) ) {
			PipedStream_SingleThread_i_o_Map_cachekey_i = i;
			PipedStream_SingleThread_i_o_Map_cachekey_o = o;
			PipedStream_SingleThread_i_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedStream_SingleThread_create3Event(PipedInputStream i, PipedOutputStream o) {
		PipedStream_SingleThread_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		CachedWeakReference wr_o = null;
		Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((i == PipedStream_SingleThread_i_o_Map_cachekey_i) && (o == PipedStream_SingleThread_i_o_Map_cachekey_o) ) ) {
			matchedEntry = PipedStream_SingleThread_i_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
					PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
				}
				Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
				if ((node_i_o == null) ) {
					node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
					node_i.putNode(wr_o, node_i_o) ;
					node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
					node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
				}
				matchedEntry = node_i_o;
			}
		}
		// D(X) main:1
		PipedStream_SingleThreadMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				PipedStream_SingleThreadMonitor created = new PipedStream_SingleThreadMonitor(PipedStream_SingleThread_timestamp++, wr_i, wr_o) ;
				matchedEntry.setValue3(created) ;
				PipedStream_SingleThreadMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <i-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i__To__i_o_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_i__To__i_o_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_i.getValue1() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <o-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o__To__i_o_Map.getNodeEquivalent(wr_o) ;
					if ((node_o == null) ) {
						node_o = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_o__To__i_o_Map.putNode(wr_o, node_o) ;
						node_o.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_o.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			PipedStream_SingleThreadMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(PipedStream_SingleThread_timestamp++) ;
		}
		// D(X) main:8--9
		PipedStream_SingleThreadMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_create3(i, o);

		if ((cachehit == false) ) {
			PipedStream_SingleThread_i_o_Map_cachekey_i = i;
			PipedStream_SingleThread_i_o_Map_cachekey_o = o;
			PipedStream_SingleThread_i_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedStream_SingleThread_create4Event(PipedOutputStream o, PipedInputStream i) {
		PipedStream_SingleThread_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		CachedWeakReference wr_o = null;
		Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((i == PipedStream_SingleThread_i_o_Map_cachekey_i) && (o == PipedStream_SingleThread_i_o_Map_cachekey_o) ) ) {
			matchedEntry = PipedStream_SingleThread_i_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
					PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
				}
				Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
				if ((node_i_o == null) ) {
					node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
					node_i.putNode(wr_o, node_i_o) ;
					node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
					node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
				}
				matchedEntry = node_i_o;
			}
		}
		// D(X) main:1
		PipedStream_SingleThreadMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				PipedStream_SingleThreadMonitor created = new PipedStream_SingleThreadMonitor(PipedStream_SingleThread_timestamp++, wr_i, wr_o) ;
				matchedEntry.setValue3(created) ;
				PipedStream_SingleThreadMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <i-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i__To__i_o_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_i__To__i_o_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_i.getValue1() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <o-i, o>
				{
					// InsertMonitor
					Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o__To__i_o_Map.getNodeEquivalent(wr_o) ;
					if ((node_o == null) ) {
						node_o = new Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
						PipedStream_SingleThread_o__To__i_o_Map.putNode(wr_o, node_o) ;
						node_o.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					PipedStream_SingleThreadMonitor_Set targetSet = node_o.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			PipedStream_SingleThreadMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(PipedStream_SingleThread_timestamp++) ;
		}
		// D(X) main:8--9
		PipedStream_SingleThreadMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_create4(o, i);

		if ((cachehit == false) ) {
			PipedStream_SingleThread_i_o_Map_cachekey_i = i;
			PipedStream_SingleThread_i_o_Map_cachekey_o = o;
			PipedStream_SingleThread_i_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedStream_SingleThread_writeEvent(PipedOutputStream o, Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedStream_SingleThread_activated) {
			CachedWeakReference wr_t = null;
			CachedWeakReference wr_o = null;
			Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((o == PipedStream_SingleThread_o_t_Map_cachekey_o) && (t == PipedStream_SingleThread_o_t_Map_cachekey_t) ) ) {
				matchedEntry = PipedStream_SingleThread_o_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_o = new CachedWeakReference(o) ;
				wr_t = new CachedWeakReference(t) ;
				{
					// FindOrCreateEntry
					MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o_t_Map.getNodeEquivalent(wr_o) ;
					if ((node_o == null) ) {
						node_o = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>(1) ;
						PipedStream_SingleThread_o_t_Map.putNode(wr_o, node_o) ;
					}
					Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o_t = node_o.getNodeEquivalent(wr_t) ;
					if ((node_o_t == null) ) {
						node_o_t = new Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>() ;
						node_o.putNode(wr_t, node_o_t) ;
						node_o_t.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					matchedEntry = node_o_t;
				}
			}
			// D(X) main:1
			IPipedStream_SingleThreadMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_o == null) ) {
					wr_o = new CachedWeakReference(o) ;
				}
				if ((wr_t == null) ) {
					wr_t = new CachedWeakReference(t) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <o>
					PipedStream_SingleThreadMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o__To__i_o_Map.getNodeEquivalent(wr_o) ;
						if ((node_o != null) ) {
							PipedStream_SingleThreadMonitor_Set itmdSet = node_o.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							PipedStream_SingleThreadMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_i.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_i = sourceMonitor.RVMRef_i;
								MapOfMonitor<IPipedStream_SingleThreadMonitor> destLastMap = null;
								IPipedStream_SingleThreadMonitor destLeaf = null;
								{
									// FindOrCreate
									MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
									if ((node_i == null) ) {
										node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
										PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
									}
									Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
									if ((node_i_o == null) ) {
										node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
										node_i.putNode(wr_o, node_i_o) ;
										node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
										node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
									}
									MapOfMonitor<IPipedStream_SingleThreadMonitor> itmdMap = node_i_o.getValue1() ;
									destLastMap = itmdMap;
									IPipedStream_SingleThreadMonitor node_i_o_t = node_i_o.getValue1() .getNodeEquivalent(wr_t) ;
									destLeaf = node_i_o_t;
								}
								if (((destLeaf == null) || destLeaf instanceof PipedStream_SingleThreadDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <i, o, t>
									if (definable) {
										// FindCode
										MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
											if ((node_i_o != null) ) {
												IPipedStream_SingleThreadMonitor node_i_o_t = node_i_o.getValue1() .getNodeEquivalent(wr_t) ;
												if ((node_i_o_t != null) ) {
													if (((node_i_o_t.getDisable() > sourceMonitor.getTau() ) || ((node_i_o_t.getTau() > 0) && (node_i_o_t.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <i, t>
									if (definable) {
										// FindCode
										MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_t_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i_t = node_i.getNodeEquivalent(wr_t) ;
											if ((node_i_t != null) ) {
												IPipedStream_SingleThreadMonitor itmdLeaf = node_i_t.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <o, t>
									if (definable) {
										// FindCode
										MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o_t_Map.getNodeEquivalent(wr_o) ;
										if ((node_o != null) ) {
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o_t = node_o.getNodeEquivalent(wr_t) ;
											if ((node_o_t != null) ) {
												IPipedStream_SingleThreadMonitor itmdLeaf = node_o_t.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										PipedStream_SingleThreadMonitor created = (PipedStream_SingleThreadMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_t, created) ;
										// D(X) defineTo:7 for <i, o>
										{
											// InsertMonitor
											MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
												PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
											}
											Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
											if ((node_i_o == null) ) {
												node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
												node_i.putNode(wr_o, node_i_o) ;
												node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
												node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
											}
											PipedStream_SingleThreadMonitor_Set targetSet = node_i_o.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <i, t>
										{
											// InsertMonitor
											MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_t_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>(1) ;
												PipedStream_SingleThread_i_t_Map.putNode(wr_i, node_i) ;
											}
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i_t = node_i.getNodeEquivalent(wr_t) ;
											if ((node_i_t == null) ) {
												node_i_t = new Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>() ;
												node_i.putNode(wr_t, node_i_t) ;
												node_i_t.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
											}
											PipedStream_SingleThreadMonitor_Set targetSet = node_i_t.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <o, t>
										{
											// InsertMonitor
											MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o_t_Map.getNodeEquivalent(wr_o) ;
											if ((node_o == null) ) {
												node_o = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>(1) ;
												PipedStream_SingleThread_o_t_Map.putNode(wr_o, node_o) ;
											}
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o_t = node_o.getNodeEquivalent(wr_t) ;
											if ((node_o_t == null) ) {
												node_o_t = new Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>() ;
												node_o.putNode(wr_t, node_o_t) ;
												node_o_t.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
											}
											PipedStream_SingleThreadMonitor_Set targetSet = node_o_t.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				IPipedStream_SingleThreadMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					PipedStream_SingleThreadDisableHolder holder = new PipedStream_SingleThreadDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(PipedStream_SingleThread_timestamp++) ;
			}
			// D(X) main:8--9
			PipedStream_SingleThreadMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_write(o, t);

			if ((cachehit == false) ) {
				PipedStream_SingleThread_o_t_Map_cachekey_o = o;
				PipedStream_SingleThread_o_t_Map_cachekey_t = t;
				PipedStream_SingleThread_o_t_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PipedStream_SingleThread_readEvent(PipedInputStream i, Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (PipedStream_SingleThread_activated) {
			CachedWeakReference wr_t = null;
			CachedWeakReference wr_i = null;
			Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((i == PipedStream_SingleThread_i_t_Map_cachekey_i) && (t == PipedStream_SingleThread_i_t_Map_cachekey_t) ) ) {
				matchedEntry = PipedStream_SingleThread_i_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_i = new CachedWeakReference(i) ;
				wr_t = new CachedWeakReference(t) ;
				{
					// FindOrCreateEntry
					MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_t_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>(1) ;
						PipedStream_SingleThread_i_t_Map.putNode(wr_i, node_i) ;
					}
					Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i_t = node_i.getNodeEquivalent(wr_t) ;
					if ((node_i_t == null) ) {
						node_i_t = new Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>() ;
						node_i.putNode(wr_t, node_i_t) ;
						node_i_t.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
					}
					matchedEntry = node_i_t;
				}
			}
			// D(X) main:1
			IPipedStream_SingleThreadMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				if ((wr_t == null) ) {
					wr_t = new CachedWeakReference(t) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <i>
					PipedStream_SingleThreadMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i__To__i_o_Map.getNodeEquivalent(wr_i) ;
						if ((node_i != null) ) {
							PipedStream_SingleThreadMonitor_Set itmdSet = node_i.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							PipedStream_SingleThreadMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_o.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_o = sourceMonitor.RVMRef_o;
								MapOfMonitor<IPipedStream_SingleThreadMonitor> destLastMap = null;
								IPipedStream_SingleThreadMonitor destLeaf = null;
								{
									// FindOrCreate
									MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
									if ((node_i == null) ) {
										node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
										PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
									}
									Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
									if ((node_i_o == null) ) {
										node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
										node_i.putNode(wr_o, node_i_o) ;
										node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
										node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
									}
									MapOfMonitor<IPipedStream_SingleThreadMonitor> itmdMap = node_i_o.getValue1() ;
									destLastMap = itmdMap;
									IPipedStream_SingleThreadMonitor node_i_o_t = node_i_o.getValue1() .getNodeEquivalent(wr_t) ;
									destLeaf = node_i_o_t;
								}
								if (((destLeaf == null) || destLeaf instanceof PipedStream_SingleThreadDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <i, o, t>
									if (definable) {
										// FindCode
										MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
											if ((node_i_o != null) ) {
												IPipedStream_SingleThreadMonitor node_i_o_t = node_i_o.getValue1() .getNodeEquivalent(wr_t) ;
												if ((node_i_o_t != null) ) {
													if (((node_i_o_t.getDisable() > sourceMonitor.getTau() ) || ((node_i_o_t.getTau() > 0) && (node_i_o_t.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <i, t>
									if (definable) {
										// FindCode
										MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_t_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i_t = node_i.getNodeEquivalent(wr_t) ;
											if ((node_i_t != null) ) {
												IPipedStream_SingleThreadMonitor itmdLeaf = node_i_t.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <o, t>
									if (definable) {
										// FindCode
										MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o_t_Map.getNodeEquivalent(wr_o) ;
										if ((node_o != null) ) {
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o_t = node_o.getNodeEquivalent(wr_t) ;
											if ((node_o_t != null) ) {
												IPipedStream_SingleThreadMonitor itmdLeaf = node_o_t.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										PipedStream_SingleThreadMonitor created = (PipedStream_SingleThreadMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_t, created) ;
										// D(X) defineTo:7 for <i, o>
										{
											// InsertMonitor
											MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_o_t_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new MapOfAll<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>(1) ;
												PipedStream_SingleThread_i_o_t_Map.putNode(wr_i, node_i) ;
											}
											Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor> node_i_o = node_i.getNodeEquivalent(wr_o) ;
											if ((node_i_o == null) ) {
												node_i_o = new Tuple3<MapOfMonitor<IPipedStream_SingleThreadMonitor>, PipedStream_SingleThreadMonitor_Set, PipedStream_SingleThreadMonitor>() ;
												node_i.putNode(wr_o, node_i_o) ;
												node_i_o.setValue1(new MapOfMonitor<IPipedStream_SingleThreadMonitor>(2) ) ;
												node_i_o.setValue2(new PipedStream_SingleThreadMonitor_Set() ) ;
											}
											PipedStream_SingleThreadMonitor_Set targetSet = node_i_o.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <i, t>
										{
											// InsertMonitor
											MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i = PipedStream_SingleThread_i_t_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>(1) ;
												PipedStream_SingleThread_i_t_Map.putNode(wr_i, node_i) ;
											}
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_i_t = node_i.getNodeEquivalent(wr_t) ;
											if ((node_i_t == null) ) {
												node_i_t = new Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>() ;
												node_i.putNode(wr_t, node_i_t) ;
												node_i_t.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
											}
											PipedStream_SingleThreadMonitor_Set targetSet = node_i_t.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <o, t>
										{
											// InsertMonitor
											MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o = PipedStream_SingleThread_o_t_Map.getNodeEquivalent(wr_o) ;
											if ((node_o == null) ) {
												node_o = new MapOfSetMonitor<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>(1) ;
												PipedStream_SingleThread_o_t_Map.putNode(wr_o, node_o) ;
											}
											Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor> node_o_t = node_o.getNodeEquivalent(wr_t) ;
											if ((node_o_t == null) ) {
												node_o_t = new Tuple2<PipedStream_SingleThreadMonitor_Set, IPipedStream_SingleThreadMonitor>() ;
												node_o.putNode(wr_t, node_o_t) ;
												node_o_t.setValue1(new PipedStream_SingleThreadMonitor_Set() ) ;
											}
											PipedStream_SingleThreadMonitor_Set targetSet = node_o_t.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				IPipedStream_SingleThreadMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					PipedStream_SingleThreadDisableHolder holder = new PipedStream_SingleThreadDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(PipedStream_SingleThread_timestamp++) ;
			}
			// D(X) main:8--9
			PipedStream_SingleThreadMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_read(i, t);

			if ((cachehit == false) ) {
				PipedStream_SingleThread_i_t_Map_cachekey_i = i;
				PipedStream_SingleThread_i_t_Map_cachekey_t = t;
				PipedStream_SingleThread_i_t_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ByteArrayOutputStream_FlushBeforeRetrieve_outputstreaminitEvent(ByteArrayOutputStream b, OutputStream o) {
		ByteArrayOutputStream_FlushBeforeRetrieve_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_b = null;
		CachedWeakReference wr_o = null;
		MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor> matchedLastMap = null;
		ByteArrayOutputStream_FlushBeforeRetrieveMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((b == ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachekey_b) && (o == ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachekey_o) ) ) {
			matchedEntry = ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_b = new CachedWeakReference(b) ;
			wr_o = new CachedWeakReference(o) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> node_b = ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.getNodeEquivalent(wr_b) ;
				if ((node_b == null) ) {
					node_b = new Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set>() ;
					ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.putNode(wr_b, node_b) ;
					node_b.setValue1(new MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>(1) ) ;
					node_b.setValue2(new ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set() ) ;
				}
				MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor> itmdMap = node_b.getValue1() ;
				matchedLastMap = itmdMap;
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor node_b_o = node_b.getValue1() .getNodeEquivalent(wr_o) ;
				matchedEntry = node_b_o;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_b == null) ) {
				wr_b = new CachedWeakReference(b) ;
			}
			if ((wr_o == null) ) {
				wr_o = new CachedWeakReference(o) ;
			}
			// D(X) main:4
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor created = new ByteArrayOutputStream_FlushBeforeRetrieveMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_o, created) ;
			// D(X) defineNew:5 for <b>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> node_b = ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.getNodeEquivalent(wr_b) ;
				if ((node_b == null) ) {
					node_b = new Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set>() ;
					ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.putNode(wr_b, node_b) ;
					node_b.setValue1(new MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>(1) ) ;
					node_b.setValue2(new ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set() ) ;
				}
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set targetSet = node_b.getValue2() ;
				targetSet.add(created) ;
			}
			// D(X) defineNew:5 for <o>
			{
				// InsertMonitor
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set node_o = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map.getNodeEquivalent(wr_o) ;
				if ((node_o == null) ) {
					node_o = new ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set() ;
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map.putNode(wr_o, node_o) ;
				}
				node_o.add(created) ;
			}
		}
		// D(X) main:8--9
		final ByteArrayOutputStream_FlushBeforeRetrieveMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_outputstreaminit(b, o);
		if(matchedEntryfinalMonitor.ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachekey_b = b;
			ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachekey_o = o;
			ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ByteArrayOutputStream_FlushBeforeRetrieve_writeEvent(OutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ByteArrayOutputStream_FlushBeforeRetrieve_activated) {
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((o == ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o) ) {
				matchedEntry = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set node_o = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map.getNodeWithStrongRef(o) ;
				if ((node_o != null) ) {
					matchedEntry = node_o;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_write(o);

				if ((cachehit == false) ) {
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o = o;
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ByteArrayOutputStream_FlushBeforeRetrieve_flushEvent(OutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ByteArrayOutputStream_FlushBeforeRetrieve_activated) {
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((o == ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o) ) {
				matchedEntry = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set node_o = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map.getNodeWithStrongRef(o) ;
				if ((node_o != null) ) {
					matchedEntry = node_o;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_flush(o);

				if ((cachehit == false) ) {
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o = o;
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ByteArrayOutputStream_FlushBeforeRetrieve_closeEvent(OutputStream o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ByteArrayOutputStream_FlushBeforeRetrieve_activated) {
			ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((o == ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o) ) {
				matchedEntry = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set node_o = ByteArrayOutputStream_FlushBeforeRetrieve_o_Map.getNodeWithStrongRef(o) ;
				if ((node_o != null) ) {
					matchedEntry = node_o;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_close(o);

				if ((cachehit == false) ) {
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachekey_o = o;
					ByteArrayOutputStream_FlushBeforeRetrieve_o_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ByteArrayOutputStream_FlushBeforeRetrieve_tobytearrayEvent(ByteArrayOutputStream b) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ByteArrayOutputStream_FlushBeforeRetrieve_activated) {
			Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((b == ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachekey_b) ) {
				matchedEntry = ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> node_b = ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.getNodeWithStrongRef(b) ;
				if ((node_b != null) ) {
					matchedEntry = node_b;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_tobytearray(b);

					if ((cachehit == false) ) {
						ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachekey_b = b;
						ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ByteArrayOutputStream_FlushBeforeRetrieve_tostringEvent(ByteArrayOutputStream b) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ByteArrayOutputStream_FlushBeforeRetrieve_activated) {
			Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((b == ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachekey_b) ) {
				matchedEntry = ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<ByteArrayOutputStream_FlushBeforeRetrieveMonitor>, ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set> node_b = ByteArrayOutputStream_FlushBeforeRetrieve_b_o_Map.getNodeWithStrongRef(b) ;
				if ((node_b != null) ) {
					matchedEntry = node_b;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				ByteArrayOutputStream_FlushBeforeRetrieveMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_tostring(b);

					if ((cachehit == false) ) {
						ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachekey_b = b;
						ByteArrayOutputStream_FlushBeforeRetrieve_b_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_CloseReader_getreaderEvent(Reader r) {
		Console_CloseReader_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Console_CloseReaderMonitor> matchedLastMap = null;
		Console_CloseReaderMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Console_CloseReader_r_Map_cachekey_r) ) {
			matchedEntry = Console_CloseReader_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Console_CloseReaderMonitor> itmdMap = Console_CloseReader_r_Map;
				matchedLastMap = itmdMap;
				Console_CloseReaderMonitor node_r = Console_CloseReader_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Console_CloseReaderMonitor created = new Console_CloseReaderMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Console_CloseReaderMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getreader(r);
		if(matchedEntryfinalMonitor.Console_CloseReaderMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Console_CloseReader_r_Map_cachekey_r = r;
			Console_CloseReader_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Console_CloseReader_closeEvent(Reader r) {
		Console_CloseReader_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Console_CloseReaderMonitor> matchedLastMap = null;
		Console_CloseReaderMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Console_CloseReader_r_Map_cachekey_r) ) {
			matchedEntry = Console_CloseReader_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Console_CloseReaderMonitor> itmdMap = Console_CloseReader_r_Map;
				matchedLastMap = itmdMap;
				Console_CloseReaderMonitor node_r = Console_CloseReader_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Console_CloseReaderMonitor created = new Console_CloseReaderMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Console_CloseReaderMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(r);
		if(matchedEntryfinalMonitor.Console_CloseReaderMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Console_CloseReader_r_Map_cachekey_r = r;
			Console_CloseReader_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ReadAheadLimit_markEvent(Reader r, int l) {
		Reader_ReadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_ReadAheadLimitMonitor> matchedLastMap = null;
		Reader_ReadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_ReadAheadLimit_r_Map_cachekey_r) ) {
			matchedEntry = Reader_ReadAheadLimit_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_ReadAheadLimitMonitor> itmdMap = Reader_ReadAheadLimit_r_Map;
				matchedLastMap = itmdMap;
				Reader_ReadAheadLimitMonitor node_r = Reader_ReadAheadLimit_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_ReadAheadLimitMonitor created = new Reader_ReadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_mark(r, l);
		if(matchedEntryfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Reader_ReadAheadLimit_r_Map_cachekey_r = r;
			Reader_ReadAheadLimit_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ReadAheadLimit_read1Event(Reader r, int n) {
		Reader_ReadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_ReadAheadLimitMonitor> matchedLastMap = null;
		Reader_ReadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_ReadAheadLimit_r_Map_cachekey_r) ) {
			matchedEntry = Reader_ReadAheadLimit_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_ReadAheadLimitMonitor> itmdMap = Reader_ReadAheadLimit_r_Map;
				matchedLastMap = itmdMap;
				Reader_ReadAheadLimitMonitor node_r = Reader_ReadAheadLimit_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_ReadAheadLimitMonitor created = new Reader_ReadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_read1(r, n);
		if(matchedEntryfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Reader_ReadAheadLimit_r_Map_cachekey_r = r;
			Reader_ReadAheadLimit_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ReadAheadLimit_readnEvent(Reader r, int n) {
		Reader_ReadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_ReadAheadLimitMonitor> matchedLastMap = null;
		Reader_ReadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_ReadAheadLimit_r_Map_cachekey_r) ) {
			matchedEntry = Reader_ReadAheadLimit_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_ReadAheadLimitMonitor> itmdMap = Reader_ReadAheadLimit_r_Map;
				matchedLastMap = itmdMap;
				Reader_ReadAheadLimitMonitor node_r = Reader_ReadAheadLimit_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_ReadAheadLimitMonitor created = new Reader_ReadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_readn(r, n);
		if(matchedEntryfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Reader_ReadAheadLimit_r_Map_cachekey_r = r;
			Reader_ReadAheadLimit_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ReadAheadLimit_badresetEvent(Reader r) {
		Reader_ReadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_ReadAheadLimitMonitor> matchedLastMap = null;
		Reader_ReadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_ReadAheadLimit_r_Map_cachekey_r) ) {
			matchedEntry = Reader_ReadAheadLimit_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_ReadAheadLimitMonitor> itmdMap = Reader_ReadAheadLimit_r_Map;
				matchedLastMap = itmdMap;
				Reader_ReadAheadLimitMonitor node_r = Reader_ReadAheadLimit_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_ReadAheadLimitMonitor created = new Reader_ReadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_badreset(r);
		if(matchedEntryfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Reader_ReadAheadLimit_r_Map_cachekey_r = r;
			Reader_ReadAheadLimit_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Reader_ReadAheadLimit_goodresetEvent(Reader r) {
		Reader_ReadAheadLimit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_r = null;
		MapOfMonitor<Reader_ReadAheadLimitMonitor> matchedLastMap = null;
		Reader_ReadAheadLimitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((r == Reader_ReadAheadLimit_r_Map_cachekey_r) ) {
			matchedEntry = Reader_ReadAheadLimit_r_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_r = new CachedWeakReference(r) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Reader_ReadAheadLimitMonitor> itmdMap = Reader_ReadAheadLimit_r_Map;
				matchedLastMap = itmdMap;
				Reader_ReadAheadLimitMonitor node_r = Reader_ReadAheadLimit_r_Map.getNodeEquivalent(wr_r) ;
				matchedEntry = node_r;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_r == null) ) {
				wr_r = new CachedWeakReference(r) ;
			}
			// D(X) main:4
			Reader_ReadAheadLimitMonitor created = new Reader_ReadAheadLimitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_r, created) ;
		}
		// D(X) main:8--9
		final Reader_ReadAheadLimitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_goodreset(r);
		if(matchedEntryfinalMonitor.Reader_ReadAheadLimitMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Reader_ReadAheadLimit_r_Map_cachekey_r = r;
			Reader_ReadAheadLimit_r_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Writer_ManipulateAfterClose_manipulateEvent(Writer w) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Writer_ManipulateAfterClose_activated) {
			Writer_ManipulateAfterCloseMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((w == Writer_ManipulateAfterClose_w_Map_cachekey_w) ) {
				matchedEntry = Writer_ManipulateAfterClose_w_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Writer_ManipulateAfterCloseMonitor node_w = Writer_ManipulateAfterClose_w_Map.getNodeWithStrongRef(w) ;
				matchedEntry = node_w;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Writer_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_manipulate(w);
				if(matchedEntryfinalMonitor.Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Writer_ManipulateAfterClose_w_Map_cachekey_w = w;
					Writer_ManipulateAfterClose_w_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Writer_ManipulateAfterClose_closeEvent(Writer w) {
		Writer_ManipulateAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_w = null;
		MapOfMonitor<Writer_ManipulateAfterCloseMonitor> matchedLastMap = null;
		Writer_ManipulateAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((w == Writer_ManipulateAfterClose_w_Map_cachekey_w) ) {
			matchedEntry = Writer_ManipulateAfterClose_w_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_w = new CachedWeakReference(w) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Writer_ManipulateAfterCloseMonitor> itmdMap = Writer_ManipulateAfterClose_w_Map;
				matchedLastMap = itmdMap;
				Writer_ManipulateAfterCloseMonitor node_w = Writer_ManipulateAfterClose_w_Map.getNodeEquivalent(wr_w) ;
				matchedEntry = node_w;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_w == null) ) {
				wr_w = new CachedWeakReference(w) ;
			}
			// D(X) main:4
			Writer_ManipulateAfterCloseMonitor created = new Writer_ManipulateAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_w, created) ;
		}
		// D(X) main:8--9
		final Writer_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(w);
		if(matchedEntryfinalMonitor.Writer_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Writer_ManipulateAfterClose_w_Map_cachekey_w = w;
			Writer_ManipulateAfterClose_w_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void BufferedInputStream_SynchronizedFill_fillEvent(BufferedInputStream i) {
		BufferedInputStream_SynchronizedFill_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<BufferedInputStream_SynchronizedFillMonitor> matchedLastMap = null;
		BufferedInputStream_SynchronizedFillMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == BufferedInputStream_SynchronizedFill_i_Map_cachekey_i) ) {
			matchedEntry = BufferedInputStream_SynchronizedFill_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<BufferedInputStream_SynchronizedFillMonitor> itmdMap = BufferedInputStream_SynchronizedFill_i_Map;
				matchedLastMap = itmdMap;
				BufferedInputStream_SynchronizedFillMonitor node_i = BufferedInputStream_SynchronizedFill_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			BufferedInputStream_SynchronizedFillMonitor created = new BufferedInputStream_SynchronizedFillMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final BufferedInputStream_SynchronizedFillMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_fill(i);
		if(matchedEntryfinalMonitor.BufferedInputStream_SynchronizedFillMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			BufferedInputStream_SynchronizedFill_i_Map_cachekey_i = i;
			BufferedInputStream_SynchronizedFill_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void List_UnsynchronizedSubList_createsublistEvent(List b, List s) {
		List_UnsynchronizedSubList_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_b = null;
		CachedWeakReference wr_s = null;
		MapOfMonitor<List_UnsynchronizedSubListMonitor> matchedLastMap = null;
		List_UnsynchronizedSubListMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((b == List_UnsynchronizedSubList_b_s_Map_cachekey_b) && (s == List_UnsynchronizedSubList_b_s_Map_cachekey_s) ) ) {
			matchedEntry = List_UnsynchronizedSubList_b_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_b = new CachedWeakReference(b) ;
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set> node_b = List_UnsynchronizedSubList_b_s_Map.getNodeEquivalent(wr_b) ;
				if ((node_b == null) ) {
					node_b = new Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set>() ;
					List_UnsynchronizedSubList_b_s_Map.putNode(wr_b, node_b) ;
					node_b.setValue1(new MapOfMonitor<List_UnsynchronizedSubListMonitor>(1) ) ;
					node_b.setValue2(new List_UnsynchronizedSubListMonitor_Set() ) ;
				}
				MapOfMonitor<List_UnsynchronizedSubListMonitor> itmdMap = node_b.getValue1() ;
				matchedLastMap = itmdMap;
				List_UnsynchronizedSubListMonitor node_b_s = node_b.getValue1() .getNodeEquivalent(wr_s) ;
				matchedEntry = node_b_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_b == null) ) {
				wr_b = new CachedWeakReference(b) ;
			}
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			List_UnsynchronizedSubListMonitor created = new List_UnsynchronizedSubListMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
			// D(X) defineNew:5 for <b>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set> node_b = List_UnsynchronizedSubList_b_s_Map.getNodeEquivalent(wr_b) ;
				if ((node_b == null) ) {
					node_b = new Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set>() ;
					List_UnsynchronizedSubList_b_s_Map.putNode(wr_b, node_b) ;
					node_b.setValue1(new MapOfMonitor<List_UnsynchronizedSubListMonitor>(1) ) ;
					node_b.setValue2(new List_UnsynchronizedSubListMonitor_Set() ) ;
				}
				List_UnsynchronizedSubListMonitor_Set targetSet = node_b.getValue2() ;
				targetSet.add(created) ;
			}
			// D(X) defineNew:5 for <s>
			{
				// InsertMonitor
				List_UnsynchronizedSubListMonitor_Set node_s = List_UnsynchronizedSubList_s_Map.getNodeEquivalent(wr_s) ;
				if ((node_s == null) ) {
					node_s = new List_UnsynchronizedSubListMonitor_Set() ;
					List_UnsynchronizedSubList_s_Map.putNode(wr_s, node_s) ;
				}
				node_s.add(created) ;
			}
		}
		// D(X) main:8--9
		final List_UnsynchronizedSubListMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_createsublist(b, s);
		if(matchedEntryfinalMonitor.List_UnsynchronizedSubListMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			List_UnsynchronizedSubList_b_s_Map_cachekey_b = b;
			List_UnsynchronizedSubList_b_s_Map_cachekey_s = s;
			List_UnsynchronizedSubList_b_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void List_UnsynchronizedSubList_modifybackinglistEvent(List b) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (List_UnsynchronizedSubList_activated) {
			Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((b == List_UnsynchronizedSubList_b_Map_cachekey_b) ) {
				matchedEntry = List_UnsynchronizedSubList_b_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<List_UnsynchronizedSubListMonitor>, List_UnsynchronizedSubListMonitor_Set> node_b = List_UnsynchronizedSubList_b_s_Map.getNodeWithStrongRef(b) ;
				if ((node_b != null) ) {
					matchedEntry = node_b;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				List_UnsynchronizedSubListMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_modifybackinglist(b);

					if ((cachehit == false) ) {
						List_UnsynchronizedSubList_b_Map_cachekey_b = b;
						List_UnsynchronizedSubList_b_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void List_UnsynchronizedSubList_usesublistEvent(List s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (List_UnsynchronizedSubList_activated) {
			List_UnsynchronizedSubListMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((s == List_UnsynchronizedSubList_s_Map_cachekey_s) ) {
				matchedEntry = List_UnsynchronizedSubList_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				List_UnsynchronizedSubListMonitor_Set node_s = List_UnsynchronizedSubList_s_Map.getNodeWithStrongRef(s) ;
				if ((node_s != null) ) {
					matchedEntry = node_s;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_usesublist(s);

				if ((cachehit == false) ) {
					List_UnsynchronizedSubList_s_Map_cachekey_s = s;
					List_UnsynchronizedSubList_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SortBeforeBinarySearch_sort1Event(List list) {
		Collections_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_list = null;
		MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Collections_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((list == Collections_SortBeforeBinarySearch_list_Map_cachekey_list) ) {
			matchedEntry = Collections_SortBeforeBinarySearch_list_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_list = new CachedWeakReference(list) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> itmdMap = Collections_SortBeforeBinarySearch_list_Map;
				matchedLastMap = itmdMap;
				Collections_SortBeforeBinarySearchMonitor node_list = Collections_SortBeforeBinarySearch_list_Map.getNodeEquivalent(wr_list) ;
				matchedEntry = node_list;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_list == null) ) {
				wr_list = new CachedWeakReference(list) ;
			}
			// D(X) main:4
			Collections_SortBeforeBinarySearchMonitor created = new Collections_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_list, created) ;
		}
		// D(X) main:8--9
		final Collections_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sort1(list);
		if(matchedEntryfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collections_SortBeforeBinarySearch_list_Map_cachekey_list = list;
			Collections_SortBeforeBinarySearch_list_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SortBeforeBinarySearch_sort2Event(List list, Comparator comp2) {
		Collections_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_list = null;
		MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Collections_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((list == Collections_SortBeforeBinarySearch_list_Map_cachekey_list) ) {
			matchedEntry = Collections_SortBeforeBinarySearch_list_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_list = new CachedWeakReference(list) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> itmdMap = Collections_SortBeforeBinarySearch_list_Map;
				matchedLastMap = itmdMap;
				Collections_SortBeforeBinarySearchMonitor node_list = Collections_SortBeforeBinarySearch_list_Map.getNodeEquivalent(wr_list) ;
				matchedEntry = node_list;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_list == null) ) {
				wr_list = new CachedWeakReference(list) ;
			}
			// D(X) main:4
			Collections_SortBeforeBinarySearchMonitor created = new Collections_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_list, created) ;
		}
		// D(X) main:8--9
		final Collections_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sort2(list, comp2);
		if(matchedEntryfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collections_SortBeforeBinarySearch_list_Map_cachekey_list = list;
			Collections_SortBeforeBinarySearch_list_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SortBeforeBinarySearch_modifyEvent(List list) {
		Collections_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_list = null;
		MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Collections_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((list == Collections_SortBeforeBinarySearch_list_Map_cachekey_list) ) {
			matchedEntry = Collections_SortBeforeBinarySearch_list_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_list = new CachedWeakReference(list) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> itmdMap = Collections_SortBeforeBinarySearch_list_Map;
				matchedLastMap = itmdMap;
				Collections_SortBeforeBinarySearchMonitor node_list = Collections_SortBeforeBinarySearch_list_Map.getNodeEquivalent(wr_list) ;
				matchedEntry = node_list;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_list == null) ) {
				wr_list = new CachedWeakReference(list) ;
			}
			// D(X) main:4
			Collections_SortBeforeBinarySearchMonitor created = new Collections_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_list, created) ;
		}
		// D(X) main:8--9
		final Collections_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_modify(list);
		if(matchedEntryfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collections_SortBeforeBinarySearch_list_Map_cachekey_list = list;
			Collections_SortBeforeBinarySearch_list_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SortBeforeBinarySearch_bsearch1Event(List list) {
		Collections_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_list = null;
		MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Collections_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((list == Collections_SortBeforeBinarySearch_list_Map_cachekey_list) ) {
			matchedEntry = Collections_SortBeforeBinarySearch_list_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_list = new CachedWeakReference(list) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> itmdMap = Collections_SortBeforeBinarySearch_list_Map;
				matchedLastMap = itmdMap;
				Collections_SortBeforeBinarySearchMonitor node_list = Collections_SortBeforeBinarySearch_list_Map.getNodeEquivalent(wr_list) ;
				matchedEntry = node_list;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_list == null) ) {
				wr_list = new CachedWeakReference(list) ;
			}
			// D(X) main:4
			Collections_SortBeforeBinarySearchMonitor created = new Collections_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_list, created) ;
		}
		// D(X) main:8--9
		final Collections_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bsearch1(list);
		if(matchedEntryfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collections_SortBeforeBinarySearch_list_Map_cachekey_list = list;
			Collections_SortBeforeBinarySearch_list_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SortBeforeBinarySearch_bsearch2Event(List list, Comparator comp2) {
		Collections_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_list = null;
		MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Collections_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((list == Collections_SortBeforeBinarySearch_list_Map_cachekey_list) ) {
			matchedEntry = Collections_SortBeforeBinarySearch_list_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_list = new CachedWeakReference(list) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> itmdMap = Collections_SortBeforeBinarySearch_list_Map;
				matchedLastMap = itmdMap;
				Collections_SortBeforeBinarySearchMonitor node_list = Collections_SortBeforeBinarySearch_list_Map.getNodeEquivalent(wr_list) ;
				matchedEntry = node_list;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_list == null) ) {
				wr_list = new CachedWeakReference(list) ;
			}
			// D(X) main:4
			Collections_SortBeforeBinarySearchMonitor created = new Collections_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_list, created) ;
		}
		// D(X) main:8--9
		final Collections_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bsearch2(list, comp2);
		if(matchedEntryfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collections_SortBeforeBinarySearch_list_Map_cachekey_list = list;
			Collections_SortBeforeBinarySearch_list_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SortBeforeBinarySearch_bad_bsearch2Event(List list, Comparator comp2) {
		Collections_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_list = null;
		MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Collections_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((list == Collections_SortBeforeBinarySearch_list_Map_cachekey_list) ) {
			matchedEntry = Collections_SortBeforeBinarySearch_list_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_list = new CachedWeakReference(list) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_SortBeforeBinarySearchMonitor> itmdMap = Collections_SortBeforeBinarySearch_list_Map;
				matchedLastMap = itmdMap;
				Collections_SortBeforeBinarySearchMonitor node_list = Collections_SortBeforeBinarySearch_list_Map.getNodeEquivalent(wr_list) ;
				matchedEntry = node_list;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_list == null) ) {
				wr_list = new CachedWeakReference(list) ;
			}
			// D(X) main:4
			Collections_SortBeforeBinarySearchMonitor created = new Collections_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_list, created) ;
		}
		// D(X) main:8--9
		final Collections_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bad_bsearch2(list, comp2);
		if(matchedEntryfinalMonitor.Collections_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collections_SortBeforeBinarySearch_list_Map_cachekey_list = list;
			Collections_SortBeforeBinarySearch_list_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Dictionary_Obsolete_useEvent(Dictionary d) {
		Dictionary_Obsolete_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_d = null;
		MapOfMonitor<Dictionary_ObsoleteMonitor> matchedLastMap = null;
		Dictionary_ObsoleteMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((d == Dictionary_Obsolete_d_Map_cachekey_d) ) {
			matchedEntry = Dictionary_Obsolete_d_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_d = new CachedWeakReference(d) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Dictionary_ObsoleteMonitor> itmdMap = Dictionary_Obsolete_d_Map;
				matchedLastMap = itmdMap;
				Dictionary_ObsoleteMonitor node_d = Dictionary_Obsolete_d_Map.getNodeEquivalent(wr_d) ;
				matchedEntry = node_d;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_d == null) ) {
				wr_d = new CachedWeakReference(d) ;
			}
			// D(X) main:4
			Dictionary_ObsoleteMonitor created = new Dictionary_ObsoleteMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_d, created) ;
		}
		// D(X) main:8--9
		final Dictionary_ObsoleteMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_use(d);
		if(matchedEntryfinalMonitor.Dictionary_ObsoleteMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Dictionary_Obsolete_d_Map_cachekey_d = d;
			Dictionary_Obsolete_d_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_sort1Event(Object[] arr) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sort1(arr);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_sort1Event(Object[] arr, int from, int to) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sort1(arr, from, to);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_sort2Event(Object[] arr, Comparator comp2) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sort2(arr, comp2);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_sort2Event(Object[] arr, int from, int to, Comparator comp2) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_sort2(arr, from, to, comp2);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_modifyEvent(Object[] arr) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_modify(arr);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_bsearch1Event(Object[] arr) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bsearch1(arr);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_bsearch1Event(Object[] arr, int from, int to) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bsearch1(arr, from, to);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_bsearch2Event(Object[] arr, Comparator comp2) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bsearch2(arr, comp2);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_SortBeforeBinarySearch_bsearch2Event(Object[] arr, int from, int to, Comparator comp2) {
		Arrays_SortBeforeBinarySearch_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_arr = null;
		MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> matchedLastMap = null;
		Arrays_SortBeforeBinarySearchMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((arr == Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr) ) {
			matchedEntry = Arrays_SortBeforeBinarySearch_arr_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_arr = new CachedWeakReference(arr) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Arrays_SortBeforeBinarySearchMonitor> itmdMap = Arrays_SortBeforeBinarySearch_arr_Map;
				matchedLastMap = itmdMap;
				Arrays_SortBeforeBinarySearchMonitor node_arr = Arrays_SortBeforeBinarySearch_arr_Map.getNodeEquivalent(wr_arr) ;
				matchedEntry = node_arr;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_arr == null) ) {
				wr_arr = new CachedWeakReference(arr) ;
			}
			// D(X) main:4
			Arrays_SortBeforeBinarySearchMonitor created = new Arrays_SortBeforeBinarySearchMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_arr, created) ;
		}
		// D(X) main:8--9
		final Arrays_SortBeforeBinarySearchMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bsearch2(arr, from, to, comp2);
		if(matchedEntryfinalMonitor.Arrays_SortBeforeBinarySearchMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Arrays_SortBeforeBinarySearch_arr_Map_cachekey_arr = arr;
			Arrays_SortBeforeBinarySearch_arr_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Iterator_HasNext_hasnexttrueEvent(Iterator i, boolean b) {
		Iterator_HasNext_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<Iterator_HasNextMonitor> matchedLastMap = null;
		Iterator_HasNextMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == Iterator_HasNext_i_Map_cachekey_i) ) {
			matchedEntry = Iterator_HasNext_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Iterator_HasNextMonitor> itmdMap = Iterator_HasNext_i_Map;
				matchedLastMap = itmdMap;
				Iterator_HasNextMonitor node_i = Iterator_HasNext_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Iterator_HasNextMonitor created = new Iterator_HasNextMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final Iterator_HasNextMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasnexttrue(i, b);
		if(matchedEntryfinalMonitor.Iterator_HasNextMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			Iterator_HasNext_i_Map_cachekey_i = i;
			Iterator_HasNext_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Iterator_HasNext_hasnextfalseEvent(Iterator i, boolean b) {
		Iterator_HasNext_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<Iterator_HasNextMonitor> matchedLastMap = null;
		Iterator_HasNextMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == Iterator_HasNext_i_Map_cachekey_i) ) {
			matchedEntry = Iterator_HasNext_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Iterator_HasNextMonitor> itmdMap = Iterator_HasNext_i_Map;
				matchedLastMap = itmdMap;
				Iterator_HasNextMonitor node_i = Iterator_HasNext_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Iterator_HasNextMonitor created = new Iterator_HasNextMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final Iterator_HasNextMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasnextfalse(i, b);
		if(matchedEntryfinalMonitor.Iterator_HasNextMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			Iterator_HasNext_i_Map_cachekey_i = i;
			Iterator_HasNext_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Iterator_HasNext_nextEvent(Iterator i) {
		Iterator_HasNext_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<Iterator_HasNextMonitor> matchedLastMap = null;
		Iterator_HasNextMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == Iterator_HasNext_i_Map_cachekey_i) ) {
			matchedEntry = Iterator_HasNext_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Iterator_HasNextMonitor> itmdMap = Iterator_HasNext_i_Map;
				matchedLastMap = itmdMap;
				Iterator_HasNextMonitor node_i = Iterator_HasNext_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Iterator_HasNextMonitor created = new Iterator_HasNextMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final Iterator_HasNextMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_next(i);
		if(matchedEntryfinalMonitor.Iterator_HasNextMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			Iterator_HasNext_i_Map_cachekey_i = i;
			Iterator_HasNext_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ArrayDeque_UnsafeIterator_createEvent(ArrayDeque q, Iterator i) {
		ArrayDeque_UnsafeIterator_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_q = null;
		CachedWeakReference wr_i = null;
		MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor> matchedLastMap = null;
		ArrayDeque_UnsafeIteratorMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((i == ArrayDeque_UnsafeIterator_q_i_Map_cachekey_i) && (q == ArrayDeque_UnsafeIterator_q_i_Map_cachekey_q) ) ) {
			matchedEntry = ArrayDeque_UnsafeIterator_q_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_q = new CachedWeakReference(q) ;
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set> node_q = ArrayDeque_UnsafeIterator_q_i_Map.getNodeEquivalent(wr_q) ;
				if ((node_q == null) ) {
					node_q = new Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set>() ;
					ArrayDeque_UnsafeIterator_q_i_Map.putNode(wr_q, node_q) ;
					node_q.setValue1(new MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>(1) ) ;
					node_q.setValue2(new ArrayDeque_UnsafeIteratorMonitor_Set() ) ;
				}
				MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor> itmdMap = node_q.getValue1() ;
				matchedLastMap = itmdMap;
				ArrayDeque_UnsafeIteratorMonitor node_q_i = node_q.getValue1() .getNodeEquivalent(wr_i) ;
				matchedEntry = node_q_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_q == null) ) {
				wr_q = new CachedWeakReference(q) ;
			}
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ArrayDeque_UnsafeIteratorMonitor created = new ArrayDeque_UnsafeIteratorMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
			// D(X) defineNew:5 for <i>
			{
				// InsertMonitor
				ArrayDeque_UnsafeIteratorMonitor_Set node_i = ArrayDeque_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new ArrayDeque_UnsafeIteratorMonitor_Set() ;
					ArrayDeque_UnsafeIterator_i_Map.putNode(wr_i, node_i) ;
				}
				node_i.add(created) ;
			}
			// D(X) defineNew:5 for <q>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set> node_q = ArrayDeque_UnsafeIterator_q_i_Map.getNodeEquivalent(wr_q) ;
				if ((node_q == null) ) {
					node_q = new Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set>() ;
					ArrayDeque_UnsafeIterator_q_i_Map.putNode(wr_q, node_q) ;
					node_q.setValue1(new MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>(1) ) ;
					node_q.setValue2(new ArrayDeque_UnsafeIteratorMonitor_Set() ) ;
				}
				ArrayDeque_UnsafeIteratorMonitor_Set targetSet = node_q.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final ArrayDeque_UnsafeIteratorMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(q, i);
		if(matchedEntryfinalMonitor.ArrayDeque_UnsafeIteratorMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ArrayDeque_UnsafeIterator_q_i_Map_cachekey_i = i;
			ArrayDeque_UnsafeIterator_q_i_Map_cachekey_q = q;
			ArrayDeque_UnsafeIterator_q_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ArrayDeque_UnsafeIterator_modifyEvent(ArrayDeque q) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ArrayDeque_UnsafeIterator_activated) {
			Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((q == ArrayDeque_UnsafeIterator_q_Map_cachekey_q) ) {
				matchedEntry = ArrayDeque_UnsafeIterator_q_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<ArrayDeque_UnsafeIteratorMonitor>, ArrayDeque_UnsafeIteratorMonitor_Set> node_q = ArrayDeque_UnsafeIterator_q_i_Map.getNodeWithStrongRef(q) ;
				if ((node_q != null) ) {
					matchedEntry = node_q;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				ArrayDeque_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_modify(q);

					if ((cachehit == false) ) {
						ArrayDeque_UnsafeIterator_q_Map_cachekey_q = q;
						ArrayDeque_UnsafeIterator_q_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ArrayDeque_UnsafeIterator_useiterEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ArrayDeque_UnsafeIterator_activated) {
			ArrayDeque_UnsafeIteratorMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((i == ArrayDeque_UnsafeIterator_i_Map_cachekey_i) ) {
				matchedEntry = ArrayDeque_UnsafeIterator_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ArrayDeque_UnsafeIteratorMonitor_Set node_i = ArrayDeque_UnsafeIterator_i_Map.getNodeWithStrongRef(i) ;
				if ((node_i != null) ) {
					matchedEntry = node_i;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_useiter(i);

				if ((cachehit == false) ) {
					ArrayDeque_UnsafeIterator_i_Map_cachekey_i = i;
					ArrayDeque_UnsafeIterator_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Deque_OfferRatherThanAdd_createEvent(Deque q) {
		Deque_OfferRatherThanAdd_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_q = null;
		MapOfMonitor<Deque_OfferRatherThanAddMonitor> matchedLastMap = null;
		Deque_OfferRatherThanAddMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((q == Deque_OfferRatherThanAdd_q_Map_cachekey_q) ) {
			matchedEntry = Deque_OfferRatherThanAdd_q_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_q = new CachedWeakReference(q) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Deque_OfferRatherThanAddMonitor> itmdMap = Deque_OfferRatherThanAdd_q_Map;
				matchedLastMap = itmdMap;
				Deque_OfferRatherThanAddMonitor node_q = Deque_OfferRatherThanAdd_q_Map.getNodeEquivalent(wr_q) ;
				matchedEntry = node_q;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_q == null) ) {
				wr_q = new CachedWeakReference(q) ;
			}
			// D(X) main:4
			Deque_OfferRatherThanAddMonitor created = new Deque_OfferRatherThanAddMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_q, created) ;
		}
		// D(X) main:8--9
		final Deque_OfferRatherThanAddMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(q);
		if(matchedEntryfinalMonitor.Deque_OfferRatherThanAddMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Deque_OfferRatherThanAdd_q_Map_cachekey_q = q;
			Deque_OfferRatherThanAdd_q_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Deque_OfferRatherThanAdd_addEvent(Deque q) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Deque_OfferRatherThanAdd_activated) {
			Deque_OfferRatherThanAddMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((q == Deque_OfferRatherThanAdd_q_Map_cachekey_q) ) {
				matchedEntry = Deque_OfferRatherThanAdd_q_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Deque_OfferRatherThanAddMonitor node_q = Deque_OfferRatherThanAdd_q_Map.getNodeWithStrongRef(q) ;
				matchedEntry = node_q;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Deque_OfferRatherThanAddMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_add(q);
				if(matchedEntryfinalMonitor.Deque_OfferRatherThanAddMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Deque_OfferRatherThanAdd_q_Map_cachekey_q = q;
					Deque_OfferRatherThanAdd_q_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_UnnecessaryNewSetFromMap_unnecessaryEvent() {
		Collections_UnnecessaryNewSetFromMap_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collections_UnnecessaryNewSetFromMapRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collections_UnnecessaryNewSetFromMap__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collections_UnnecessaryNewSetFromMapRawMonitor created = new Collections_UnnecessaryNewSetFromMapRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_unnecessary();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Scanner_SearchAfterClose_closeEvent(Scanner s) {
		Scanner_SearchAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<Scanner_SearchAfterCloseMonitor> matchedLastMap = null;
		Scanner_SearchAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == Scanner_SearchAfterClose_s_Map_cachekey_s) ) {
			matchedEntry = Scanner_SearchAfterClose_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Scanner_SearchAfterCloseMonitor> itmdMap = Scanner_SearchAfterClose_s_Map;
				matchedLastMap = itmdMap;
				Scanner_SearchAfterCloseMonitor node_s = Scanner_SearchAfterClose_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			Scanner_SearchAfterCloseMonitor created = new Scanner_SearchAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final Scanner_SearchAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(s);
		if(matchedEntryfinalMonitor.Scanner_SearchAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Scanner_SearchAfterClose_s_Map_cachekey_s = s;
			Scanner_SearchAfterClose_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Scanner_SearchAfterClose_searchEvent(Scanner s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Scanner_SearchAfterClose_activated) {
			Scanner_SearchAfterCloseMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((s == Scanner_SearchAfterClose_s_Map_cachekey_s) ) {
				matchedEntry = Scanner_SearchAfterClose_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Scanner_SearchAfterCloseMonitor node_s = Scanner_SearchAfterClose_s_Map.getNodeWithStrongRef(s) ;
				matchedEntry = node_s;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Scanner_SearchAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_search(s);
				if(matchedEntryfinalMonitor.Scanner_SearchAfterCloseMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Scanner_SearchAfterClose_s_Map_cachekey_s = s;
					Scanner_SearchAfterClose_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_HashCode_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Collection_HashCode_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collection_HashCodeRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collection_HashCode__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collection_HashCodeRawMonitor created = new Collection_HashCodeRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_Set_createEvent(ListIterator i) {
		ListIterator_Set_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_SetMonitor> matchedLastMap = null;
		ListIterator_SetMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_Set_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_Set_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_SetMonitor> itmdMap = ListIterator_Set_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_SetMonitor node_i = ListIterator_Set_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_SetMonitor created = new ListIterator_SetMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_SetMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(i);
		if(matchedEntryfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_Set_i_Map_cachekey_i = i;
			ListIterator_Set_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_Set_removeEvent(ListIterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ListIterator_Set_activated) {
			ListIterator_SetMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == ListIterator_Set_i_Map_cachekey_i) ) {
				matchedEntry = ListIterator_Set_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ListIterator_SetMonitor node_i = ListIterator_Set_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ListIterator_SetMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_remove(i);
				if(matchedEntryfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ListIterator_Set_i_Map_cachekey_i = i;
					ListIterator_Set_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_Set_addEvent(ListIterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ListIterator_Set_activated) {
			ListIterator_SetMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == ListIterator_Set_i_Map_cachekey_i) ) {
				matchedEntry = ListIterator_Set_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ListIterator_SetMonitor node_i = ListIterator_Set_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ListIterator_SetMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_add(i);
				if(matchedEntryfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ListIterator_Set_i_Map_cachekey_i = i;
					ListIterator_Set_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_Set_nextEvent(ListIterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ListIterator_Set_activated) {
			ListIterator_SetMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == ListIterator_Set_i_Map_cachekey_i) ) {
				matchedEntry = ListIterator_Set_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ListIterator_SetMonitor node_i = ListIterator_Set_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ListIterator_SetMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_next(i);
				if(matchedEntryfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ListIterator_Set_i_Map_cachekey_i = i;
					ListIterator_Set_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_Set_previousEvent(ListIterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ListIterator_Set_activated) {
			ListIterator_SetMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == ListIterator_Set_i_Map_cachekey_i) ) {
				matchedEntry = ListIterator_Set_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ListIterator_SetMonitor node_i = ListIterator_Set_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ListIterator_SetMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_previous(i);
				if(matchedEntryfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ListIterator_Set_i_Map_cachekey_i = i;
					ListIterator_Set_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_Set_setEvent(ListIterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ListIterator_Set_activated) {
			ListIterator_SetMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == ListIterator_Set_i_Map_cachekey_i) ) {
				matchedEntry = ListIterator_Set_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ListIterator_SetMonitor node_i = ListIterator_Set_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ListIterator_SetMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(i);
				if(matchedEntryfinalMonitor.ListIterator_SetMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ListIterator_Set_i_Map_cachekey_i = i;
					ListIterator_Set_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_UnsynchronizedAddAll_enterEvent(Collection t, Collection s) {
		Collection_UnsynchronizedAddAll_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		CachedWeakReference wr_t = null;
		MapOfMonitor<Collection_UnsynchronizedAddAllMonitor> matchedLastMap = null;
		Collection_UnsynchronizedAddAllMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((s == Collection_UnsynchronizedAddAll_t_s_Map_cachekey_s) && (t == Collection_UnsynchronizedAddAll_t_s_Map_cachekey_t) ) ) {
			matchedEntry = Collection_UnsynchronizedAddAll_t_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collection_UnsynchronizedAddAllMonitor> node_t = Collection_UnsynchronizedAddAll_t_s_Map.getNodeEquivalent(wr_t) ;
				if ((node_t == null) ) {
					node_t = new MapOfMonitor<Collection_UnsynchronizedAddAllMonitor>(1) ;
					Collection_UnsynchronizedAddAll_t_s_Map.putNode(wr_t, node_t) ;
				}
				matchedLastMap = node_t;
				Collection_UnsynchronizedAddAllMonitor node_t_s = node_t.getNodeEquivalent(wr_s) ;
				matchedEntry = node_t_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			Collection_UnsynchronizedAddAllMonitor created = new Collection_UnsynchronizedAddAllMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
			// D(X) defineNew:5 for <s>
			{
				// InsertMonitor
				Collection_UnsynchronizedAddAllMonitor_Set node_s = Collection_UnsynchronizedAddAll_s_Map.getNodeEquivalent(wr_s) ;
				if ((node_s == null) ) {
					node_s = new Collection_UnsynchronizedAddAllMonitor_Set() ;
					Collection_UnsynchronizedAddAll_s_Map.putNode(wr_s, node_s) ;
				}
				node_s.add(created) ;
			}
		}
		// D(X) main:8--9
		final Collection_UnsynchronizedAddAllMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_enter(t, s);
		if(matchedEntryfinalMonitor.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Collection_UnsynchronizedAddAll_t_s_Map_cachekey_s = s;
			Collection_UnsynchronizedAddAll_t_s_Map_cachekey_t = t;
			Collection_UnsynchronizedAddAll_t_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_UnsynchronizedAddAll_modifyEvent(Collection s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collection_UnsynchronizedAddAll_activated) {
			Collection_UnsynchronizedAddAllMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((s == Collection_UnsynchronizedAddAll_s_Map_cachekey_s) ) {
				matchedEntry = Collection_UnsynchronizedAddAll_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Collection_UnsynchronizedAddAllMonitor_Set node_s = Collection_UnsynchronizedAddAll_s_Map.getNodeWithStrongRef(s) ;
				if ((node_s != null) ) {
					matchedEntry = node_s;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_modify(s);

				if ((cachehit == false) ) {
					Collection_UnsynchronizedAddAll_s_Map_cachekey_s = s;
					Collection_UnsynchronizedAddAll_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_UnsynchronizedAddAll_leaveEvent(Collection t, Collection s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collection_UnsynchronizedAddAll_activated) {
			Collection_UnsynchronizedAddAllMonitor matchedEntry = null;
			boolean cachehit = false;
			if (((s == Collection_UnsynchronizedAddAll_t_s_Map_cachekey_s) && (t == Collection_UnsynchronizedAddAll_t_s_Map_cachekey_t) ) ) {
				matchedEntry = Collection_UnsynchronizedAddAll_t_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				MapOfMonitor<Collection_UnsynchronizedAddAllMonitor> node_t = Collection_UnsynchronizedAddAll_t_s_Map.getNodeWithStrongRef(t) ;
				if ((node_t != null) ) {
					Collection_UnsynchronizedAddAllMonitor node_t_s = node_t.getNodeWithStrongRef(s) ;
					matchedEntry = node_t_s;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Collection_UnsynchronizedAddAllMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_leave(t, s);
				if(matchedEntryfinalMonitor.Collection_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Collection_UnsynchronizedAddAll_t_s_Map_cachekey_s = s;
					Collection_UnsynchronizedAddAll_t_s_Map_cachekey_t = t;
					Collection_UnsynchronizedAddAll_t_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_StandardConstructors_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Collection_StandardConstructors_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collection_StandardConstructorsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collection_StandardConstructors__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collection_StandardConstructorsRawMonitor created = new Collection_StandardConstructorsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PriorityQueue_NonNull_insertnullEvent(Object e) {
		PriorityQueue_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		PriorityQueue_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = PriorityQueue_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			PriorityQueue_NonNullRawMonitor created = new PriorityQueue_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PriorityQueue_NonNull_insertnullEvent(Collection c) {
		PriorityQueue_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		PriorityQueue_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = PriorityQueue_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			PriorityQueue_NonNullRawMonitor created = new PriorityQueue_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(c);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_DeepHashCode_invalid_deephashcodeEvent(Object[] arr) {
		Arrays_DeepHashCode_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Arrays_DeepHashCodeRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Arrays_DeepHashCode__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Arrays_DeepHashCodeRawMonitor created = new Arrays_DeepHashCodeRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_deephashcode(arr);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_ImplementComparable_invalid_sortEvent(List list) {
		Collections_ImplementComparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collections_ImplementComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collections_ImplementComparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collections_ImplementComparableRawMonitor created = new Collections_ImplementComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_sort(list);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_ImplementComparable_invalid_minmaxEvent(Collection col) {
		Collections_ImplementComparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collections_ImplementComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collections_ImplementComparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collections_ImplementComparableRawMonitor created = new Collections_ImplementComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_minmax(col);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void EnumMap_NonNull_insertnullEvent(Object e) {
		EnumMap_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		EnumMap_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = EnumMap_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			EnumMap_NonNullRawMonitor created = new EnumMap_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void EnumMap_NonNull_insertnullEvent(Map m) {
		EnumMap_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		EnumMap_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = EnumMap_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			EnumMap_NonNullRawMonitor created = new EnumMap_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(m);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsafeIterator_getsetEvent(Map m, Collection c) {
		Map_UnsafeIterator_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		CachedWeakReference wr_m = null;
		Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((c == Map_UnsafeIterator_m_c_Map_cachekey_c) && (m == Map_UnsafeIterator_m_c_Map_cachekey_m) ) ) {
			matchedEntry = Map_UnsafeIterator_m_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_m = new CachedWeakReference(m) ;
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
				if ((node_m == null) ) {
					node_m = new Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
					Map_UnsafeIterator_m_c_i_Map.putNode(wr_m, node_m) ;
					node_m.setValue1(new MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ) ;
					node_m.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
				}
				Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> node_m_c = node_m.getValue1() .getNodeEquivalent(wr_c) ;
				if ((node_m_c == null) ) {
					node_m_c = new Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>() ;
					node_m.getValue1() .putNode(wr_c, node_m_c) ;
					node_m_c.setValue1(new MapOfMonitor<IMap_UnsafeIteratorMonitor>(2) ) ;
					node_m_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
				}
				matchedEntry = node_m_c;
			}
		}
		// D(X) main:1
		Map_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_m == null) ) {
				wr_m = new CachedWeakReference(m) ;
			}
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				Map_UnsafeIteratorMonitor created = new Map_UnsafeIteratorMonitor(Map_UnsafeIterator_timestamp++, wr_m) ;
				matchedEntry.setValue3(created) ;
				Map_UnsafeIteratorMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <c>
				{
					// InsertMonitor
					Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
					if ((node_c == null) ) {
						node_c = new Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
						node_c.setValue1(new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(1) ) ;
						node_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					Map_UnsafeIteratorMonitor_Set targetSet = node_c.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <m>
				{
					// InsertMonitor
					Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
					if ((node_m == null) ) {
						node_m = new Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_m_c_i_Map.putNode(wr_m, node_m) ;
						node_m.setValue1(new MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ) ;
						node_m.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					Map_UnsafeIteratorMonitor_Set targetSet = node_m.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <c-m, c>
				{
					// InsertMonitor
					Tuple2<Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c__To__m_c_Map.getNodeEquivalent(wr_c) ;
					if ((node_c == null) ) {
						node_c = new Tuple2<Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_c__To__m_c_Map.putNode(wr_c, node_c) ;
						node_c.setValue1(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					Map_UnsafeIteratorMonitor_Set targetSet = node_c.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			Map_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(Map_UnsafeIterator_timestamp++) ;
		}
		// D(X) main:8--9
		Map_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_getset(m, c);

		if ((cachehit == false) ) {
			Map_UnsafeIterator_m_c_Map_cachekey_c = c;
			Map_UnsafeIterator_m_c_Map_cachekey_m = m;
			Map_UnsafeIterator_m_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsafeIterator_getiterEvent(Collection c, Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_UnsafeIterator_activated) {
			CachedWeakReference wr_c = null;
			CachedWeakReference wr_i = null;
			Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((c == Map_UnsafeIterator_c_i_Map_cachekey_c) && (i == Map_UnsafeIterator_c_i_Map_cachekey_i) ) ) {
				matchedEntry = Map_UnsafeIterator_c_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_c = new CachedWeakReference(c) ;
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
					if ((node_c == null) ) {
						node_c = new Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
						node_c.setValue1(new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(1) ) ;
						node_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
					if ((node_c_i == null) ) {
						node_c_i = new Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						node_c.getValue1() .putNode(wr_i, node_c_i) ;
						node_c_i.setValue1(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_c_i;
				}
			}
			// D(X) main:1
			IMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_c == null) ) {
					wr_c = new CachedWeakReference(c) ;
				}
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <c>
					Map_UnsafeIteratorMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c__To__m_c_Map.getNodeEquivalent(wr_c) ;
						if ((node_c != null) ) {
							Map_UnsafeIteratorMonitor_Set itmdSet = node_c.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							Map_UnsafeIteratorMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_m.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_m = sourceMonitor.RVMRef_m;
								MapOfMonitor<IMap_UnsafeIteratorMonitor> destLastMap = null;
								IMap_UnsafeIteratorMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
									if ((node_m == null) ) {
										node_m = new Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
										Map_UnsafeIterator_m_c_i_Map.putNode(wr_m, node_m) ;
										node_m.setValue1(new MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ) ;
										node_m.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> node_m_c = node_m.getValue1() .getNodeEquivalent(wr_c) ;
									if ((node_m_c == null) ) {
										node_m_c = new Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>() ;
										node_m.getValue1() .putNode(wr_c, node_m_c) ;
										node_m_c.setValue1(new MapOfMonitor<IMap_UnsafeIteratorMonitor>(2) ) ;
										node_m_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
									}
									MapOfMonitor<IMap_UnsafeIteratorMonitor> itmdMap = node_m_c.getValue1() ;
									destLastMap = itmdMap;
									IMap_UnsafeIteratorMonitor node_m_c_i = node_m_c.getValue1() .getNodeEquivalent(wr_i) ;
									destLeaf = node_m_c_i;
								}
								if (((destLeaf == null) || destLeaf instanceof Map_UnsafeIteratorDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <c, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
										if ((node_c != null) ) {
											Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_c_i != null) ) {
												IMap_UnsafeIteratorMonitor itmdLeaf = node_c_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <i>
									if (definable) {
										// FindCode
										Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_i = Map_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											IMap_UnsafeIteratorMonitor itmdLeaf = node_i.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m, c, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
										if ((node_m != null) ) {
											Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> node_m_c = node_m.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m_c != null) ) {
												IMap_UnsafeIteratorMonitor node_m_c_i = node_m_c.getValue1() .getNodeEquivalent(wr_i) ;
												if ((node_m_c_i != null) ) {
													if (((node_m_c_i.getDisable() > sourceMonitor.getTau() ) || ((node_m_c_i.getTau() > 0) && (node_m_c_i.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										Map_UnsafeIteratorMonitor created = (Map_UnsafeIteratorMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_i, created) ;
										// D(X) defineTo:7 for <c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
												Map_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(1) ) ;
												node_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Map_UnsafeIteratorMonitor_Set targetSet = node_c.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <c, i>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
												Map_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(1) ) ;
												node_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_c_i == null) ) {
												node_c_i = new Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
												node_c.getValue1() .putNode(wr_i, node_c_i) ;
												node_c_i.setValue1(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Map_UnsafeIteratorMonitor_Set targetSet = node_c_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <i>
										{
											// InsertMonitor
											Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_i = Map_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
												Map_UnsafeIterator_i_Map.putNode(wr_i, node_i) ;
												node_i.setValue1(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Map_UnsafeIteratorMonitor_Set targetSet = node_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
											if ((node_m == null) ) {
												node_m = new Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
												Map_UnsafeIterator_m_c_i_Map.putNode(wr_m, node_m) ;
												node_m.setValue1(new MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ) ;
												node_m.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Map_UnsafeIteratorMonitor_Set targetSet = node_m.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m, c>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
											if ((node_m == null) ) {
												node_m = new Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
												Map_UnsafeIterator_m_c_i_Map.putNode(wr_m, node_m) ;
												node_m.setValue1(new MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ) ;
												node_m.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor> node_m_c = node_m.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m_c == null) ) {
												node_m_c = new Tuple3<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>() ;
												node_m.getValue1() .putNode(wr_c, node_m_c) ;
												node_m_c.setValue1(new MapOfMonitor<IMap_UnsafeIteratorMonitor>(2) ) ;
												node_m_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
											}
											Map_UnsafeIteratorMonitor_Set targetSet = node_m_c.getValue2() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				IMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					Map_UnsafeIteratorDisableHolder holder = new Map_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Map_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			Map_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getiter(c, i);

			if ((cachehit == false) ) {
				Map_UnsafeIterator_c_i_Map_cachekey_c = c;
				Map_UnsafeIterator_c_i_Map_cachekey_i = i;
				Map_UnsafeIterator_c_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsafeIterator_modifyMapEvent(Map m) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_UnsafeIterator_activated) {
			CachedWeakReference wr_m = null;
			Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((m == Map_UnsafeIterator_m_Map_cachekey_m) ) {
				matchedEntry = Map_UnsafeIterator_m_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_m = new CachedWeakReference(m) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_m = Map_UnsafeIterator_m_c_i_Map.getNodeEquivalent(wr_m) ;
					if ((node_m == null) ) {
						node_m = new Tuple3<MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_m_c_i_Map.putNode(wr_m, node_m) ;
						node_m.setValue1(new MapOfAll<MapOfMonitor<IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, Map_UnsafeIteratorMonitor>(1) ) ;
						node_m.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_m;
				}
			}
			// D(X) main:1
			IMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_m == null) ) {
					wr_m = new CachedWeakReference(m) ;
				}
				// D(X) main:6
				IMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					Map_UnsafeIteratorDisableHolder holder = new Map_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Map_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			Map_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modifyMap(m);

			if ((cachehit == false) ) {
				Map_UnsafeIterator_m_Map_cachekey_m = m;
				Map_UnsafeIterator_m_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsafeIterator_modifyColEvent(Collection c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_UnsafeIterator_activated) {
			CachedWeakReference wr_c = null;
			Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((c == Map_UnsafeIterator_c_Map_cachekey_c) ) {
				matchedEntry = Map_UnsafeIterator_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_c = new CachedWeakReference(c) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_c = Map_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
					if ((node_c == null) ) {
						node_c = new Tuple3<MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>, Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
						node_c.setValue1(new MapOfSetMonitor<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>(1) ) ;
						node_c.setValue2(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_c;
				}
			}
			// D(X) main:1
			IMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_c == null) ) {
					wr_c = new CachedWeakReference(c) ;
				}
				// D(X) main:6
				IMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					Map_UnsafeIteratorDisableHolder holder = new Map_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Map_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			Map_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modifyCol(c);

			if ((cachehit == false) ) {
				Map_UnsafeIterator_c_Map_cachekey_c = c;
				Map_UnsafeIterator_c_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsafeIterator_useiterEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_UnsafeIterator_activated) {
			CachedWeakReference wr_i = null;
			Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((i == Map_UnsafeIterator_i_Map_cachekey_i) ) {
				matchedEntry = Map_UnsafeIterator_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor> node_i = Map_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<Map_UnsafeIteratorMonitor_Set, IMap_UnsafeIteratorMonitor>() ;
						Map_UnsafeIterator_i_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new Map_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_i;
				}
			}
			// D(X) main:1
			IMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				// D(X) main:6
				IMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					Map_UnsafeIteratorDisableHolder holder = new Map_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Map_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			Map_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_useiter(i);

			if ((cachehit == false) ) {
				Map_UnsafeIterator_i_Map_cachekey_i = i;
				Map_UnsafeIterator_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PriorityQueue_NonComparable_insertnullEvent(Object e) {
		PriorityQueue_NonComparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		PriorityQueue_NonComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = PriorityQueue_NonComparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			PriorityQueue_NonComparableRawMonitor created = new PriorityQueue_NonComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PriorityQueue_NonComparable_insertnullEvent(Collection c) {
		PriorityQueue_NonComparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		PriorityQueue_NonComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = PriorityQueue_NonComparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			PriorityQueue_NonComparableRawMonitor created = new PriorityQueue_NonComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(c);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Set_ItselfAsElement_addEvent(Set s, Object elem) {
		Set_ItselfAsElement_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Set_ItselfAsElementRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Set_ItselfAsElement__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Set_ItselfAsElementRawMonitor created = new Set_ItselfAsElementRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_add(s, elem);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Set_ItselfAsElement_addallEvent(Set s, Collection src) {
		Set_ItselfAsElement_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Set_ItselfAsElementRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Set_ItselfAsElement__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Set_ItselfAsElementRawMonitor created = new Set_ItselfAsElementRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_addall(s, src);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_ItselfAsKey_putEvent(Map map, Object key, Object value) {
		Map_ItselfAsKey_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Map_ItselfAsKeyRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Map_ItselfAsKey__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Map_ItselfAsKeyRawMonitor created = new Map_ItselfAsKeyRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_put(map, key, value);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_ItselfAsKey_putallEvent(Map map, Map src) {
		Map_ItselfAsKey_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Map_ItselfAsKeyRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Map_ItselfAsKey__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Map_ItselfAsKeyRawMonitor created = new Map_ItselfAsKeyRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_putall(map, src);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Dictionary_NullKeyOrValue_putnullEvent(Dictionary d, Object key, Object value) {
		Dictionary_NullKeyOrValue_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Dictionary_NullKeyOrValueRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Dictionary_NullKeyOrValue__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Dictionary_NullKeyOrValueRawMonitor created = new Dictionary_NullKeyOrValueRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_putnull(d, key, value);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SortedMap_StandardConstructors_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		SortedMap_StandardConstructors_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		SortedMap_StandardConstructorsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = SortedMap_StandardConstructors__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			SortedMap_StandardConstructorsRawMonitor created = new SortedMap_StandardConstructorsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_hasNextPrevious_hasnexttrueEvent(ListIterator i, boolean b) {
		ListIterator_hasNextPrevious_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_hasNextPreviousMonitor> matchedLastMap = null;
		ListIterator_hasNextPreviousMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_hasNextPrevious_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_hasNextPrevious_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_hasNextPreviousMonitor> itmdMap = ListIterator_hasNextPrevious_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_hasNextPreviousMonitor node_i = ListIterator_hasNextPrevious_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_hasNextPreviousMonitor created = new ListIterator_hasNextPreviousMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_hasNextPreviousMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasnexttrue(i, b);
		if(matchedEntryfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_hasNextPrevious_i_Map_cachekey_i = i;
			ListIterator_hasNextPrevious_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_hasNextPrevious_hasnextfalseEvent(ListIterator i, boolean b) {
		ListIterator_hasNextPrevious_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_hasNextPreviousMonitor> matchedLastMap = null;
		ListIterator_hasNextPreviousMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_hasNextPrevious_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_hasNextPrevious_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_hasNextPreviousMonitor> itmdMap = ListIterator_hasNextPrevious_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_hasNextPreviousMonitor node_i = ListIterator_hasNextPrevious_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_hasNextPreviousMonitor created = new ListIterator_hasNextPreviousMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_hasNextPreviousMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasnextfalse(i, b);
		if(matchedEntryfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_hasNextPrevious_i_Map_cachekey_i = i;
			ListIterator_hasNextPrevious_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_hasNextPrevious_nextEvent(ListIterator i) {
		ListIterator_hasNextPrevious_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_hasNextPreviousMonitor> matchedLastMap = null;
		ListIterator_hasNextPreviousMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_hasNextPrevious_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_hasNextPrevious_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_hasNextPreviousMonitor> itmdMap = ListIterator_hasNextPrevious_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_hasNextPreviousMonitor node_i = ListIterator_hasNextPrevious_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_hasNextPreviousMonitor created = new ListIterator_hasNextPreviousMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_hasNextPreviousMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_next(i);
		if(matchedEntryfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_hasNextPrevious_i_Map_cachekey_i = i;
			ListIterator_hasNextPrevious_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_hasNextPrevious_hasprevioustrueEvent(ListIterator i, boolean b) {
		ListIterator_hasNextPrevious_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_hasNextPreviousMonitor> matchedLastMap = null;
		ListIterator_hasNextPreviousMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_hasNextPrevious_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_hasNextPrevious_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_hasNextPreviousMonitor> itmdMap = ListIterator_hasNextPrevious_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_hasNextPreviousMonitor node_i = ListIterator_hasNextPrevious_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_hasNextPreviousMonitor created = new ListIterator_hasNextPreviousMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_hasNextPreviousMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasprevioustrue(i, b);
		if(matchedEntryfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_hasNextPrevious_i_Map_cachekey_i = i;
			ListIterator_hasNextPrevious_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_hasNextPrevious_haspreviousfalseEvent(ListIterator i, boolean b) {
		ListIterator_hasNextPrevious_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_hasNextPreviousMonitor> matchedLastMap = null;
		ListIterator_hasNextPreviousMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_hasNextPrevious_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_hasNextPrevious_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_hasNextPreviousMonitor> itmdMap = ListIterator_hasNextPrevious_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_hasNextPreviousMonitor node_i = ListIterator_hasNextPrevious_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_hasNextPreviousMonitor created = new ListIterator_hasNextPreviousMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_hasNextPreviousMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_haspreviousfalse(i, b);
		if(matchedEntryfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_hasNextPrevious_i_Map_cachekey_i = i;
			ListIterator_hasNextPrevious_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_hasNextPrevious_previousEvent(ListIterator i) {
		ListIterator_hasNextPrevious_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_hasNextPreviousMonitor> matchedLastMap = null;
		ListIterator_hasNextPreviousMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_hasNextPrevious_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_hasNextPrevious_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_hasNextPreviousMonitor> itmdMap = ListIterator_hasNextPrevious_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_hasNextPreviousMonitor node_i = ListIterator_hasNextPrevious_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_hasNextPreviousMonitor created = new ListIterator_hasNextPreviousMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_hasNextPreviousMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_previous(i);
		if(matchedEntryfinalMonitor.ListIterator_hasNextPreviousMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_hasNextPrevious_i_Map_cachekey_i = i;
			ListIterator_hasNextPrevious_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ResourceBundleControl_MutateFormatList_createEvent(List l) {
		ResourceBundleControl_MutateFormatList_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_l = null;
		MapOfMonitor<ResourceBundleControl_MutateFormatListMonitor> matchedLastMap = null;
		ResourceBundleControl_MutateFormatListMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((l == ResourceBundleControl_MutateFormatList_l_Map_cachekey_l) ) {
			matchedEntry = ResourceBundleControl_MutateFormatList_l_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_l = new CachedWeakReference(l) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ResourceBundleControl_MutateFormatListMonitor> itmdMap = ResourceBundleControl_MutateFormatList_l_Map;
				matchedLastMap = itmdMap;
				ResourceBundleControl_MutateFormatListMonitor node_l = ResourceBundleControl_MutateFormatList_l_Map.getNodeEquivalent(wr_l) ;
				matchedEntry = node_l;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_l == null) ) {
				wr_l = new CachedWeakReference(l) ;
			}
			// D(X) main:4
			ResourceBundleControl_MutateFormatListMonitor created = new ResourceBundleControl_MutateFormatListMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_l, created) ;
		}
		// D(X) main:8--9
		final ResourceBundleControl_MutateFormatListMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(l);
		if(matchedEntryfinalMonitor.ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ResourceBundleControl_MutateFormatList_l_Map_cachekey_l = l;
			ResourceBundleControl_MutateFormatList_l_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ResourceBundleControl_MutateFormatList_mutateEvent(List l) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ResourceBundleControl_MutateFormatList_activated) {
			ResourceBundleControl_MutateFormatListMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((l == ResourceBundleControl_MutateFormatList_l_Map_cachekey_l) ) {
				matchedEntry = ResourceBundleControl_MutateFormatList_l_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ResourceBundleControl_MutateFormatListMonitor node_l = ResourceBundleControl_MutateFormatList_l_Map.getNodeWithStrongRef(l) ;
				matchedEntry = node_l;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ResourceBundleControl_MutateFormatListMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_mutate(l);
				if(matchedEntryfinalMonitor.ResourceBundleControl_MutateFormatListMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ResourceBundleControl_MutateFormatList_l_Map_cachekey_l = l;
					ResourceBundleControl_MutateFormatList_l_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ArrayDeque_NonNull_insertnullEvent(Object e) {
		ArrayDeque_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ArrayDeque_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ArrayDeque_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ArrayDeque_NonNullRawMonitor created = new ArrayDeque_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableSet_Modification_createEvent(NavigableSet s1, NavigableSet s2) {
		NavigableSet_Modification_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s1 = null;
		CachedWeakReference wr_s2 = null;
		Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((s1 == NavigableSet_Modification_s1_s2_Map_cachekey_s1) && (s2 == NavigableSet_Modification_s1_s2_Map_cachekey_s2) ) ) {
			matchedEntry = NavigableSet_Modification_s1_s2_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s1 = new CachedWeakReference(s1) ;
			wr_s2 = new CachedWeakReference(s2) ;
			{
				// FindOrCreateEntry
				Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
				if ((node_s1 == null) ) {
					node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
					NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
					node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
					node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
				}
				Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
				if ((node_s1_s2 == null) ) {
					node_s1_s2 = new Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
					node_s1.getValue1() .putNode(wr_s2, node_s1_s2) ;
					node_s1_s2.setValue1(new MapOfMonitor<INavigableSet_ModificationMonitor>(2) ) ;
					node_s1_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
				}
				matchedEntry = node_s1_s2;
			}
		}
		// D(X) main:1
		NavigableSet_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_s1 == null) ) {
				wr_s1 = new CachedWeakReference(s1) ;
			}
			if ((wr_s2 == null) ) {
				wr_s2 = new CachedWeakReference(s2) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				NavigableSet_ModificationMonitor created = new NavigableSet_ModificationMonitor(NavigableSet_Modification_timestamp++, wr_s1, wr_s2) ;
				matchedEntry.setValue3(created) ;
				NavigableSet_ModificationMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <s1>
				{
					// InsertMonitor
					Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
					if ((node_s1 == null) ) {
						node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
						node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
						node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					NavigableSet_ModificationMonitor_Set targetSet = node_s1.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <s2>
				{
					// InsertMonitor
					Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
					if ((node_s2 == null) ) {
						node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
						node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
						node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					NavigableSet_ModificationMonitor_Set targetSet = node_s2.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <s1-s1, s2>
				{
					// InsertMonitor
					Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1__To__s1_s2_Map.getNodeEquivalent(wr_s1) ;
					if ((node_s1 == null) ) {
						node_s1 = new Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s1__To__s1_s2_Map.putNode(wr_s1, node_s1) ;
						node_s1.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					NavigableSet_ModificationMonitor_Set targetSet = node_s1.getValue1() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <s2-s1, s2>
				{
					// InsertMonitor
					Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2__To__s1_s2_Map.getNodeEquivalent(wr_s2) ;
					if ((node_s2 == null) ) {
						node_s2 = new Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s2__To__s1_s2_Map.putNode(wr_s2, node_s2) ;
						node_s2.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					NavigableSet_ModificationMonitor_Set targetSet = node_s2.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			NavigableSet_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(NavigableSet_Modification_timestamp++) ;
		}
		// D(X) main:8--9
		NavigableSet_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_create(s1, s2);

		if ((cachehit == false) ) {
			NavigableSet_Modification_s1_s2_Map_cachekey_s1 = s1;
			NavigableSet_Modification_s1_s2_Map_cachekey_s2 = s2;
			NavigableSet_Modification_s1_s2_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableSet_Modification_getiter1Event(NavigableSet s1, Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableSet_Modification_activated) {
			CachedWeakReference wr_i = null;
			CachedWeakReference wr_s1 = null;
			Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((i == NavigableSet_Modification_s1_i_Map_cachekey_i) && (s1 == NavigableSet_Modification_s1_i_Map_cachekey_s1) ) ) {
				matchedEntry = NavigableSet_Modification_s1_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_s1 = new CachedWeakReference(s1) ;
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_i_Map.getNodeEquivalent(wr_s1) ;
					if ((node_s1 == null) ) {
						node_s1 = new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ;
						NavigableSet_Modification_s1_i_Map.putNode(wr_s1, node_s1) ;
					}
					Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1_i = node_s1.getNodeEquivalent(wr_i) ;
					if ((node_s1_i == null) ) {
						node_s1_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						node_s1.putNode(wr_i, node_s1_i) ;
						node_s1_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_s1_i;
				}
			}
			// D(X) main:1
			INavigableSet_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_s1 == null) ) {
					wr_s1 = new CachedWeakReference(s1) ;
				}
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <s1>
					NavigableSet_ModificationMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1__To__s1_s2_Map.getNodeEquivalent(wr_s1) ;
						if ((node_s1 != null) ) {
							NavigableSet_ModificationMonitor_Set itmdSet = node_s1.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							NavigableSet_ModificationMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_s2.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_s2 = sourceMonitor.RVMRef_s2;
								MapOfMonitor<INavigableSet_ModificationMonitor> destLastMap = null;
								INavigableSet_ModificationMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
									if ((node_s1 == null) ) {
										node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
										NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
										node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
										node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
									if ((node_s1_s2 == null) ) {
										node_s1_s2 = new Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
										node_s1.getValue1() .putNode(wr_s2, node_s1_s2) ;
										node_s1_s2.setValue1(new MapOfMonitor<INavigableSet_ModificationMonitor>(2) ) ;
										node_s1_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
									}
									MapOfMonitor<INavigableSet_ModificationMonitor> itmdMap = node_s1_s2.getValue1() ;
									destLastMap = itmdMap;
									INavigableSet_ModificationMonitor node_s1_s2_i = node_s1_s2.getValue1() .getNodeEquivalent(wr_i) ;
									destLeaf = node_s1_s2_i;
								}
								if (((destLeaf == null) || destLeaf instanceof NavigableSet_ModificationDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <i>
									if (definable) {
										// FindCode
										Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_i = NavigableSet_Modification_i_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											INavigableSet_ModificationMonitor itmdLeaf = node_i.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s1, i>
									if (definable) {
										// FindCode
										MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_i_Map.getNodeEquivalent(wr_s1) ;
										if ((node_s1 != null) ) {
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1_i = node_s1.getNodeEquivalent(wr_i) ;
											if ((node_s1_i != null) ) {
												INavigableSet_ModificationMonitor itmdLeaf = node_s1_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s1, s2, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
										if ((node_s1 != null) ) {
											Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
											if ((node_s1_s2 != null) ) {
												INavigableSet_ModificationMonitor node_s1_s2_i = node_s1_s2.getValue1() .getNodeEquivalent(wr_i) ;
												if ((node_s1_s2_i != null) ) {
													if (((node_s1_s2_i.getDisable() > sourceMonitor.getTau() ) || ((node_s1_s2_i.getTau() > 0) && (node_s1_s2_i.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s2, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
										if ((node_s2 != null) ) {
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2_i = node_s2.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_s2_i != null) ) {
												INavigableSet_ModificationMonitor itmdLeaf = node_s2_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										NavigableSet_ModificationMonitor created = (NavigableSet_ModificationMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_i, created) ;
										// D(X) defineTo:7 for <i>
										{
											// InsertMonitor
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_i = NavigableSet_Modification_i_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_i_Map.putNode(wr_i, node_i) ;
												node_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s1>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
											if ((node_s1 == null) ) {
												node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
												node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
												node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s1.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s1, i>
										{
											// InsertMonitor
											MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_i_Map.getNodeEquivalent(wr_s1) ;
											if ((node_s1 == null) ) {
												node_s1 = new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ;
												NavigableSet_Modification_s1_i_Map.putNode(wr_s1, node_s1) ;
											}
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1_i = node_s1.getNodeEquivalent(wr_i) ;
											if ((node_s1_i == null) ) {
												node_s1_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												node_s1.putNode(wr_i, node_s1_i) ;
												node_s1_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s1_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s1, s2>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
											if ((node_s1 == null) ) {
												node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
												node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
												node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
											if ((node_s1_s2 == null) ) {
												node_s1_s2 = new Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
												node_s1.getValue1() .putNode(wr_s2, node_s1_s2) ;
												node_s1_s2.setValue1(new MapOfMonitor<INavigableSet_ModificationMonitor>(2) ) ;
												node_s1_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s1_s2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s2>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
											if ((node_s2 == null) ) {
												node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
												node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
												node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s2, i>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
											if ((node_s2 == null) ) {
												node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
												node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
												node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2_i = node_s2.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_s2_i == null) ) {
												node_s2_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												node_s2.getValue1() .putNode(wr_i, node_s2_i) ;
												node_s2_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s2_i.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				INavigableSet_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableSet_ModificationDisableHolder holder = new NavigableSet_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableSet_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableSet_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getiter1(s1, i);

			if ((cachehit == false) ) {
				NavigableSet_Modification_s1_i_Map_cachekey_i = i;
				NavigableSet_Modification_s1_i_Map_cachekey_s1 = s1;
				NavigableSet_Modification_s1_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableSet_Modification_getiter2Event(NavigableSet s2, Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableSet_Modification_activated) {
			CachedWeakReference wr_i = null;
			CachedWeakReference wr_s2 = null;
			Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((i == NavigableSet_Modification_s2_i_Map_cachekey_i) && (s2 == NavigableSet_Modification_s2_i_Map_cachekey_s2) ) ) {
				matchedEntry = NavigableSet_Modification_s2_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_s2 = new CachedWeakReference(s2) ;
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
					if ((node_s2 == null) ) {
						node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
						node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
						node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2_i = node_s2.getValue1() .getNodeEquivalent(wr_i) ;
					if ((node_s2_i == null) ) {
						node_s2_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						node_s2.getValue1() .putNode(wr_i, node_s2_i) ;
						node_s2_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_s2_i;
				}
			}
			// D(X) main:1
			INavigableSet_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_s2 == null) ) {
					wr_s2 = new CachedWeakReference(s2) ;
				}
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <s2>
					NavigableSet_ModificationMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2__To__s1_s2_Map.getNodeEquivalent(wr_s2) ;
						if ((node_s2 != null) ) {
							NavigableSet_ModificationMonitor_Set itmdSet = node_s2.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							NavigableSet_ModificationMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_s1.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_s1 = sourceMonitor.RVMRef_s1;
								MapOfMonitor<INavigableSet_ModificationMonitor> destLastMap = null;
								INavigableSet_ModificationMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
									if ((node_s1 == null) ) {
										node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
										NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
										node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
										node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
									if ((node_s1_s2 == null) ) {
										node_s1_s2 = new Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
										node_s1.getValue1() .putNode(wr_s2, node_s1_s2) ;
										node_s1_s2.setValue1(new MapOfMonitor<INavigableSet_ModificationMonitor>(2) ) ;
										node_s1_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
									}
									MapOfMonitor<INavigableSet_ModificationMonitor> itmdMap = node_s1_s2.getValue1() ;
									destLastMap = itmdMap;
									INavigableSet_ModificationMonitor node_s1_s2_i = node_s1_s2.getValue1() .getNodeEquivalent(wr_i) ;
									destLeaf = node_s1_s2_i;
								}
								if (((destLeaf == null) || destLeaf instanceof NavigableSet_ModificationDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <i>
									if (definable) {
										// FindCode
										Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_i = NavigableSet_Modification_i_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											INavigableSet_ModificationMonitor itmdLeaf = node_i.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s1, i>
									if (definable) {
										// FindCode
										MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_i_Map.getNodeEquivalent(wr_s1) ;
										if ((node_s1 != null) ) {
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1_i = node_s1.getNodeEquivalent(wr_i) ;
											if ((node_s1_i != null) ) {
												INavigableSet_ModificationMonitor itmdLeaf = node_s1_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s1, s2, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
										if ((node_s1 != null) ) {
											Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
											if ((node_s1_s2 != null) ) {
												INavigableSet_ModificationMonitor node_s1_s2_i = node_s1_s2.getValue1() .getNodeEquivalent(wr_i) ;
												if ((node_s1_s2_i != null) ) {
													if (((node_s1_s2_i.getDisable() > sourceMonitor.getTau() ) || ((node_s1_s2_i.getTau() > 0) && (node_s1_s2_i.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s2, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
										if ((node_s2 != null) ) {
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2_i = node_s2.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_s2_i != null) ) {
												INavigableSet_ModificationMonitor itmdLeaf = node_s2_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										NavigableSet_ModificationMonitor created = (NavigableSet_ModificationMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_i, created) ;
										// D(X) defineTo:7 for <i>
										{
											// InsertMonitor
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_i = NavigableSet_Modification_i_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_i_Map.putNode(wr_i, node_i) ;
												node_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s1>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
											if ((node_s1 == null) ) {
												node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
												node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
												node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s1.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s1, i>
										{
											// InsertMonitor
											MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_i_Map.getNodeEquivalent(wr_s1) ;
											if ((node_s1 == null) ) {
												node_s1 = new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ;
												NavigableSet_Modification_s1_i_Map.putNode(wr_s1, node_s1) ;
											}
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1_i = node_s1.getNodeEquivalent(wr_i) ;
											if ((node_s1_i == null) ) {
												node_s1_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												node_s1.putNode(wr_i, node_s1_i) ;
												node_s1_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s1_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s1, s2>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
											if ((node_s1 == null) ) {
												node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
												node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
												node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor> node_s1_s2 = node_s1.getValue1() .getNodeEquivalent(wr_s2) ;
											if ((node_s1_s2 == null) ) {
												node_s1_s2 = new Tuple3<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>() ;
												node_s1.getValue1() .putNode(wr_s2, node_s1_s2) ;
												node_s1_s2.setValue1(new MapOfMonitor<INavigableSet_ModificationMonitor>(2) ) ;
												node_s1_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s1_s2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s2>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
											if ((node_s2 == null) ) {
												node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
												node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
												node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s2, i>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
											if ((node_s2 == null) ) {
												node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
												node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
												node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2_i = node_s2.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_s2_i == null) ) {
												node_s2_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
												node_s2.getValue1() .putNode(wr_i, node_s2_i) ;
												node_s2_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
											}
											NavigableSet_ModificationMonitor_Set targetSet = node_s2_i.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				INavigableSet_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableSet_ModificationDisableHolder holder = new NavigableSet_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableSet_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableSet_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getiter2(s2, i);

			if ((cachehit == false) ) {
				NavigableSet_Modification_s2_i_Map_cachekey_i = i;
				NavigableSet_Modification_s2_i_Map_cachekey_s2 = s2;
				NavigableSet_Modification_s2_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableSet_Modification_modify1Event(NavigableSet s1) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableSet_Modification_activated) {
			CachedWeakReference wr_s1 = null;
			Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((s1 == NavigableSet_Modification_s1_Map_cachekey_s1) ) {
				matchedEntry = NavigableSet_Modification_s1_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_s1 = new CachedWeakReference(s1) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s1 = NavigableSet_Modification_s1_s2_i_Map.getNodeEquivalent(wr_s1) ;
					if ((node_s1 == null) ) {
						node_s1 = new Tuple3<MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s1_s2_i_Map.putNode(wr_s1, node_s1) ;
						node_s1.setValue1(new MapOfAll<MapOfMonitor<INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, NavigableSet_ModificationMonitor>(1) ) ;
						node_s1.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_s1;
				}
			}
			// D(X) main:1
			INavigableSet_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_s1 == null) ) {
					wr_s1 = new CachedWeakReference(s1) ;
				}
				// D(X) main:6
				INavigableSet_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableSet_ModificationDisableHolder holder = new NavigableSet_ModificationDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableSet_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableSet_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modify1(s1);

			if ((cachehit == false) ) {
				NavigableSet_Modification_s1_Map_cachekey_s1 = s1;
				NavigableSet_Modification_s1_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableSet_Modification_modify2Event(NavigableSet s2) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableSet_Modification_activated) {
			CachedWeakReference wr_s2 = null;
			Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((s2 == NavigableSet_Modification_s2_Map_cachekey_s2) ) {
				matchedEntry = NavigableSet_Modification_s2_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_s2 = new CachedWeakReference(s2) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_s2 = NavigableSet_Modification_s2_i_Map.getNodeEquivalent(wr_s2) ;
					if ((node_s2 == null) ) {
						node_s2 = new Tuple3<MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>, NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_s2_i_Map.putNode(wr_s2, node_s2) ;
						node_s2.setValue1(new MapOfSetMonitor<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>(1) ) ;
						node_s2.setValue2(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_s2;
				}
			}
			// D(X) main:1
			INavigableSet_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_s2 == null) ) {
					wr_s2 = new CachedWeakReference(s2) ;
				}
				// D(X) main:6
				INavigableSet_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableSet_ModificationDisableHolder holder = new NavigableSet_ModificationDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableSet_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableSet_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modify2(s2);

			if ((cachehit == false) ) {
				NavigableSet_Modification_s2_Map_cachekey_s2 = s2;
				NavigableSet_Modification_s2_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableSet_Modification_useiterEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableSet_Modification_activated) {
			CachedWeakReference wr_i = null;
			Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((i == NavigableSet_Modification_i_Map_cachekey_i) ) {
				matchedEntry = NavigableSet_Modification_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor> node_i = NavigableSet_Modification_i_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<NavigableSet_ModificationMonitor_Set, INavigableSet_ModificationMonitor>() ;
						NavigableSet_Modification_i_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new NavigableSet_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_i;
				}
			}
			// D(X) main:1
			INavigableSet_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				// D(X) main:6
				INavigableSet_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableSet_ModificationDisableHolder holder = new NavigableSet_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableSet_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableSet_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_useiter(i);

			if ((cachehit == false) ) {
				NavigableSet_Modification_i_Map_cachekey_i = i;
				NavigableSet_Modification_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InvalidPropertiesFormatException_NonSerializable_serializeEvent(ObjectOutputStream out, InvalidPropertiesFormatException obj) {
		InvalidPropertiesFormatException_NonSerializable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		InvalidPropertiesFormatException_NonSerializableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = InvalidPropertiesFormatException_NonSerializable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			InvalidPropertiesFormatException_NonSerializableRawMonitor created = new InvalidPropertiesFormatException_NonSerializableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_serialize(out, obj);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InvalidPropertiesFormatException_NonSerializable_deserializeEvent(ObjectInputStream in, InvalidPropertiesFormatException obj) {
		InvalidPropertiesFormatException_NonSerializable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		InvalidPropertiesFormatException_NonSerializableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = InvalidPropertiesFormatException_NonSerializable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			InvalidPropertiesFormatException_NonSerializableRawMonitor created = new InvalidPropertiesFormatException_NonSerializableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_deserialize(in, obj);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_NewSetFromMap_createEvent(Map map) {
		Collections_NewSetFromMap_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_map = null;
		MapOfMonitor<Collections_NewSetFromMapMonitor> matchedLastMap = null;
		Collections_NewSetFromMapMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((map == Collections_NewSetFromMap_map_Map_cachekey_map) ) {
			matchedEntry = Collections_NewSetFromMap_map_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_map = new CachedWeakReference(map) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_NewSetFromMapMonitor> itmdMap = Collections_NewSetFromMap_map_Map;
				matchedLastMap = itmdMap;
				Collections_NewSetFromMapMonitor node_map = Collections_NewSetFromMap_map_Map.getNodeEquivalent(wr_map) ;
				matchedEntry = node_map;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_map == null) ) {
				wr_map = new CachedWeakReference(map) ;
			}
			// D(X) main:4
			Collections_NewSetFromMapMonitor created = new Collections_NewSetFromMapMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_map, created) ;
		}
		// D(X) main:8--9
		final Collections_NewSetFromMapMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(map);
		if(matchedEntryfinalMonitor.Collections_NewSetFromMapMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Collections_NewSetFromMap_map_Map_cachekey_map = map;
			Collections_NewSetFromMap_map_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_NewSetFromMap_bad_createEvent(Map map) {
		Collections_NewSetFromMap_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_map = null;
		MapOfMonitor<Collections_NewSetFromMapMonitor> matchedLastMap = null;
		Collections_NewSetFromMapMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((map == Collections_NewSetFromMap_map_Map_cachekey_map) ) {
			matchedEntry = Collections_NewSetFromMap_map_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_map = new CachedWeakReference(map) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Collections_NewSetFromMapMonitor> itmdMap = Collections_NewSetFromMap_map_Map;
				matchedLastMap = itmdMap;
				Collections_NewSetFromMapMonitor node_map = Collections_NewSetFromMap_map_Map.getNodeEquivalent(wr_map) ;
				matchedEntry = node_map;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_map == null) ) {
				wr_map = new CachedWeakReference(map) ;
			}
			// D(X) main:4
			Collections_NewSetFromMapMonitor created = new Collections_NewSetFromMapMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_map, created) ;
		}
		// D(X) main:8--9
		final Collections_NewSetFromMapMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bad_create(map);
		if(matchedEntryfinalMonitor.Collections_NewSetFromMapMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Collections_NewSetFromMap_map_Map_cachekey_map = map;
			Collections_NewSetFromMap_map_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_NewSetFromMap_accessEvent(Map map) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_NewSetFromMap_activated) {
			Collections_NewSetFromMapMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == Collections_NewSetFromMap_map_Map_cachekey_map) ) {
				matchedEntry = Collections_NewSetFromMap_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Collections_NewSetFromMapMonitor node_map = Collections_NewSetFromMap_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Collections_NewSetFromMapMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_access(map);
				if(matchedEntryfinalMonitor.Collections_NewSetFromMapMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Collections_NewSetFromMap_map_Map_cachekey_map = map;
					Collections_NewSetFromMap_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_RemoveOnce_removeEvent(ListIterator i) {
		ListIterator_RemoveOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_RemoveOnceMonitor> matchedLastMap = null;
		ListIterator_RemoveOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_RemoveOnce_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_RemoveOnce_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_RemoveOnceMonitor> itmdMap = ListIterator_RemoveOnce_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_RemoveOnceMonitor node_i = ListIterator_RemoveOnce_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_RemoveOnceMonitor created = new ListIterator_RemoveOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_RemoveOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_remove(i);
		if(matchedEntryfinalMonitor.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_RemoveOnce_i_Map_cachekey_i = i;
			ListIterator_RemoveOnce_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_RemoveOnce_nextEvent(ListIterator i) {
		ListIterator_RemoveOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_RemoveOnceMonitor> matchedLastMap = null;
		ListIterator_RemoveOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_RemoveOnce_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_RemoveOnce_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_RemoveOnceMonitor> itmdMap = ListIterator_RemoveOnce_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_RemoveOnceMonitor node_i = ListIterator_RemoveOnce_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_RemoveOnceMonitor created = new ListIterator_RemoveOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_RemoveOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_next(i);
		if(matchedEntryfinalMonitor.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_RemoveOnce_i_Map_cachekey_i = i;
			ListIterator_RemoveOnce_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ListIterator_RemoveOnce_previousEvent(ListIterator i) {
		ListIterator_RemoveOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ListIterator_RemoveOnceMonitor> matchedLastMap = null;
		ListIterator_RemoveOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ListIterator_RemoveOnce_i_Map_cachekey_i) ) {
			matchedEntry = ListIterator_RemoveOnce_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ListIterator_RemoveOnceMonitor> itmdMap = ListIterator_RemoveOnce_i_Map;
				matchedLastMap = itmdMap;
				ListIterator_RemoveOnceMonitor node_i = ListIterator_RemoveOnce_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ListIterator_RemoveOnceMonitor created = new ListIterator_RemoveOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ListIterator_RemoveOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_previous(i);
		if(matchedEntryfinalMonitor.ListIterator_RemoveOnceMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ListIterator_RemoveOnce_i_Map_cachekey_i = i;
			ListIterator_RemoveOnce_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_CollectionViewAdd_getsetEvent(Map m, Collection c) {
		Map_CollectionViewAdd_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		CachedWeakReference wr_m = null;
		MapOfMonitor<Map_CollectionViewAddMonitor> matchedLastMap = null;
		Map_CollectionViewAddMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((c == Map_CollectionViewAdd_m_c_Map_cachekey_c) && (m == Map_CollectionViewAdd_m_c_Map_cachekey_m) ) ) {
			matchedEntry = Map_CollectionViewAdd_m_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_m = new CachedWeakReference(m) ;
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Map_CollectionViewAddMonitor> node_m = Map_CollectionViewAdd_m_c_Map.getNodeEquivalent(wr_m) ;
				if ((node_m == null) ) {
					node_m = new MapOfMonitor<Map_CollectionViewAddMonitor>(1) ;
					Map_CollectionViewAdd_m_c_Map.putNode(wr_m, node_m) ;
				}
				matchedLastMap = node_m;
				Map_CollectionViewAddMonitor node_m_c = node_m.getNodeEquivalent(wr_c) ;
				matchedEntry = node_m_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_m == null) ) {
				wr_m = new CachedWeakReference(m) ;
			}
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			Map_CollectionViewAddMonitor created = new Map_CollectionViewAddMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
			// D(X) defineNew:5 for <c>
			{
				// InsertMonitor
				Map_CollectionViewAddMonitor_Set node_c = Map_CollectionViewAdd_c_Map.getNodeEquivalent(wr_c) ;
				if ((node_c == null) ) {
					node_c = new Map_CollectionViewAddMonitor_Set() ;
					Map_CollectionViewAdd_c_Map.putNode(wr_c, node_c) ;
				}
				node_c.add(created) ;
			}
		}
		// D(X) main:8--9
		final Map_CollectionViewAddMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getset(m, c);
		if(matchedEntryfinalMonitor.Map_CollectionViewAddMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Map_CollectionViewAdd_m_c_Map_cachekey_c = c;
			Map_CollectionViewAdd_m_c_Map_cachekey_m = m;
			Map_CollectionViewAdd_m_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_CollectionViewAdd_addEvent(Collection c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_CollectionViewAdd_activated) {
			Map_CollectionViewAddMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((c == Map_CollectionViewAdd_c_Map_cachekey_c) ) {
				matchedEntry = Map_CollectionViewAdd_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Map_CollectionViewAddMonitor_Set node_c = Map_CollectionViewAdd_c_Map.getNodeWithStrongRef(c) ;
				if ((node_c != null) ) {
					matchedEntry = node_c;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_add(c);

				if ((cachehit == false) ) {
					Map_CollectionViewAdd_c_Map_cachekey_c = c;
					Map_CollectionViewAdd_c_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Properties_ManipulateAfterLoad_manipulateEvent(InputStream i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Properties_ManipulateAfterLoad_activated) {
			Properties_ManipulateAfterLoadMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == Properties_ManipulateAfterLoad_i_Map_cachekey_i) ) {
				matchedEntry = Properties_ManipulateAfterLoad_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Properties_ManipulateAfterLoadMonitor node_i = Properties_ManipulateAfterLoad_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Properties_ManipulateAfterLoadMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_manipulate(i);
				if(matchedEntryfinalMonitor.Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Properties_ManipulateAfterLoad_i_Map_cachekey_i = i;
					Properties_ManipulateAfterLoad_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Properties_ManipulateAfterLoad_closeEvent(InputStream i) {
		Properties_ManipulateAfterLoad_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<Properties_ManipulateAfterLoadMonitor> matchedLastMap = null;
		Properties_ManipulateAfterLoadMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == Properties_ManipulateAfterLoad_i_Map_cachekey_i) ) {
			matchedEntry = Properties_ManipulateAfterLoad_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Properties_ManipulateAfterLoadMonitor> itmdMap = Properties_ManipulateAfterLoad_i_Map;
				matchedLastMap = itmdMap;
				Properties_ManipulateAfterLoadMonitor node_i = Properties_ManipulateAfterLoad_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Properties_ManipulateAfterLoadMonitor created = new Properties_ManipulateAfterLoadMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final Properties_ManipulateAfterLoadMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(i);
		if(matchedEntryfinalMonitor.Properties_ManipulateAfterLoadMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Properties_ManipulateAfterLoad_i_Map_cachekey_i = i;
			Properties_ManipulateAfterLoad_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Enumeration_Obsolete_useEvent(Enumeration e) {
		Enumeration_Obsolete_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_e = null;
		MapOfMonitor<Enumeration_ObsoleteMonitor> matchedLastMap = null;
		Enumeration_ObsoleteMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((e == Enumeration_Obsolete_e_Map_cachekey_e) ) {
			matchedEntry = Enumeration_Obsolete_e_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_e = new CachedWeakReference(e) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Enumeration_ObsoleteMonitor> itmdMap = Enumeration_Obsolete_e_Map;
				matchedLastMap = itmdMap;
				Enumeration_ObsoleteMonitor node_e = Enumeration_Obsolete_e_Map.getNodeEquivalent(wr_e) ;
				matchedEntry = node_e;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_e == null) ) {
				wr_e = new CachedWeakReference(e) ;
			}
			// D(X) main:4
			Enumeration_ObsoleteMonitor created = new Enumeration_ObsoleteMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_e, created) ;
		}
		// D(X) main:8--9
		final Enumeration_ObsoleteMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_use(e);
		if(matchedEntryfinalMonitor.Enumeration_ObsoleteMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Enumeration_Obsolete_e_Map_cachekey_e = e;
			Enumeration_Obsolete_e_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SortedSet_Comparable_addEvent(Object e) {
		SortedSet_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		SortedSet_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = SortedSet_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			SortedSet_ComparableRawMonitor created = new SortedSet_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_add(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SortedSet_Comparable_addallEvent(Collection c) {
		SortedSet_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		SortedSet_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = SortedSet_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			SortedSet_ComparableRawMonitor created = new SortedSet_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_addall(c);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void EnumSet_NonNull_insertnullEvent(Object e) {
		EnumSet_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		EnumSet_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = EnumSet_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			EnumSet_NonNullRawMonitor created = new EnumSet_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void EnumSet_NonNull_insertnullEvent(Collection c) {
		EnumSet_NonNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		EnumSet_NonNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = EnumSet_NonNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			EnumSet_NonNullRawMonitor created = new EnumSet_NonNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insertnull(c);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_CopySize_bad_copyEvent(List dest, List src) {
		Collections_CopySize_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collections_CopySizeRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collections_CopySize__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collections_CopySizeRawMonitor created = new Collections_CopySizeRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_copy(dest, src);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServiceLoaderIterator_Remove_createEvent(ServiceLoader s, Iterator i) {
		ServiceLoaderIterator_Remove_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<ServiceLoaderIterator_RemoveMonitor> matchedLastMap = null;
		ServiceLoaderIterator_RemoveMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == ServiceLoaderIterator_Remove_i_Map_cachekey_i) ) {
			matchedEntry = ServiceLoaderIterator_Remove_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServiceLoaderIterator_RemoveMonitor> itmdMap = ServiceLoaderIterator_Remove_i_Map;
				matchedLastMap = itmdMap;
				ServiceLoaderIterator_RemoveMonitor node_i = ServiceLoaderIterator_Remove_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			ServiceLoaderIterator_RemoveMonitor created = new ServiceLoaderIterator_RemoveMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final ServiceLoaderIterator_RemoveMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(s, i);
		if(matchedEntryfinalMonitor.ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServiceLoaderIterator_Remove_i_Map_cachekey_i = i;
			ServiceLoaderIterator_Remove_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServiceLoaderIterator_Remove_removeEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServiceLoaderIterator_Remove_activated) {
			ServiceLoaderIterator_RemoveMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((i == ServiceLoaderIterator_Remove_i_Map_cachekey_i) ) {
				matchedEntry = ServiceLoaderIterator_Remove_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServiceLoaderIterator_RemoveMonitor node_i = ServiceLoaderIterator_Remove_i_Map.getNodeWithStrongRef(i) ;
				matchedEntry = node_i;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServiceLoaderIterator_RemoveMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_remove(i);
				if(matchedEntryfinalMonitor.ServiceLoaderIterator_RemoveMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServiceLoaderIterator_Remove_i_Map_cachekey_i = i;
					ServiceLoaderIterator_Remove_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Iterator_RemoveOnce_removeEvent(Iterator i) {
		Iterator_RemoveOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<Iterator_RemoveOnceMonitor> matchedLastMap = null;
		Iterator_RemoveOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == Iterator_RemoveOnce_i_Map_cachekey_i) ) {
			matchedEntry = Iterator_RemoveOnce_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Iterator_RemoveOnceMonitor> itmdMap = Iterator_RemoveOnce_i_Map;
				matchedLastMap = itmdMap;
				Iterator_RemoveOnceMonitor node_i = Iterator_RemoveOnce_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Iterator_RemoveOnceMonitor created = new Iterator_RemoveOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final Iterator_RemoveOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_remove(i);
		if(matchedEntryfinalMonitor.Iterator_RemoveOnceMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Iterator_RemoveOnce_i_Map_cachekey_i = i;
			Iterator_RemoveOnce_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Iterator_RemoveOnce_nextEvent(Iterator i) {
		Iterator_RemoveOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<Iterator_RemoveOnceMonitor> matchedLastMap = null;
		Iterator_RemoveOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == Iterator_RemoveOnce_i_Map_cachekey_i) ) {
			matchedEntry = Iterator_RemoveOnce_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Iterator_RemoveOnceMonitor> itmdMap = Iterator_RemoveOnce_i_Map;
				matchedLastMap = itmdMap;
				Iterator_RemoveOnceMonitor node_i = Iterator_RemoveOnce_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Iterator_RemoveOnceMonitor created = new Iterator_RemoveOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final Iterator_RemoveOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_next(i);
		if(matchedEntryfinalMonitor.Iterator_RemoveOnceMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Iterator_RemoveOnce_i_Map_cachekey_i = i;
			Iterator_RemoveOnce_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_createEvent(NavigableMap m1, NavigableMap m2) {
		NavigableMap_Modification_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_m1 = null;
		CachedWeakReference wr_m2 = null;
		Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((m1 == NavigableMap_Modification_m1_m2_Map_cachekey_m1) && (m2 == NavigableMap_Modification_m1_m2_Map_cachekey_m2) ) ) {
			matchedEntry = NavigableMap_Modification_m1_m2_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_m1 = new CachedWeakReference(m1) ;
			wr_m2 = new CachedWeakReference(m2) ;
			{
				// FindOrCreateEntry
				Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
				if ((node_m1 == null) ) {
					node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
					NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
					node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
					node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
				}
				Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
				if ((node_m1_m2 == null) ) {
					node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
					node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
					node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
					node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
				}
				matchedEntry = node_m1_m2;
			}
		}
		// D(X) main:1
		NavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_m1 == null) ) {
				wr_m1 = new CachedWeakReference(m1) ;
			}
			if ((wr_m2 == null) ) {
				wr_m2 = new CachedWeakReference(m2) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				NavigableMap_ModificationMonitor created = new NavigableMap_ModificationMonitor(NavigableMap_Modification_timestamp++, wr_m1, wr_m2) ;
				matchedEntry.setValue3(created) ;
				NavigableMap_ModificationMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <m1>
				{
					// InsertMonitor
					Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
					if ((node_m1 == null) ) {
						node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
						node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
						node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					NavigableMap_ModificationMonitor_Set targetSet = node_m1.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <m2>
				{
					// InsertMonitor
					Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
					if ((node_m2 == null) ) {
						node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
						node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
						node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					NavigableMap_ModificationMonitor_Set targetSet = node_m2.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <m1-m1, m2>
				{
					// InsertMonitor
					Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1__To__m1_m2_Map.getNodeEquivalent(wr_m1) ;
					if ((node_m1 == null) ) {
						node_m1 = new Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m1__To__m1_m2_Map.putNode(wr_m1, node_m1) ;
						node_m1.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					NavigableMap_ModificationMonitor_Set targetSet = node_m1.getValue1() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <m2-m1, m2>
				{
					// InsertMonitor
					Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2__To__m1_m2_Map.getNodeEquivalent(wr_m2) ;
					if ((node_m2 == null) ) {
						node_m2 = new Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m2__To__m1_m2_Map.putNode(wr_m2, node_m2) ;
						node_m2.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					NavigableMap_ModificationMonitor_Set targetSet = node_m2.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			NavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
		}
		// D(X) main:8--9
		NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_create(m1, m2);

		if ((cachehit == false) ) {
			NavigableMap_Modification_m1_m2_Map_cachekey_m1 = m1;
			NavigableMap_Modification_m1_m2_Map_cachekey_m2 = m2;
			NavigableMap_Modification_m1_m2_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_getset1Event(NavigableMap m1, Collection c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_c = null;
			CachedWeakReference wr_m1 = null;
			Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((c == NavigableMap_Modification_m1_c_Map_cachekey_c) && (m1 == NavigableMap_Modification_m1_c_Map_cachekey_m1) ) ) {
				matchedEntry = NavigableMap_Modification_m1_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_m1 = new CachedWeakReference(m1) ;
				wr_c = new CachedWeakReference(c) ;
				{
					// FindOrCreateEntry
					MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_c_Map.getNodeEquivalent(wr_m1) ;
					if ((node_m1 == null) ) {
						node_m1 = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ;
						NavigableMap_Modification_m1_c_Map.putNode(wr_m1, node_m1) ;
					}
					Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_c = node_m1.getNodeEquivalent(wr_c) ;
					if ((node_m1_c == null) ) {
						node_m1_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						node_m1.putNode(wr_c, node_m1_c) ;
						node_m1_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_m1_c;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_m1 == null) ) {
					wr_m1 = new CachedWeakReference(m1) ;
				}
				if ((wr_c == null) ) {
					wr_c = new CachedWeakReference(c) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <m1>
					NavigableMap_ModificationMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1__To__m1_m2_Map.getNodeEquivalent(wr_m1) ;
						if ((node_m1 != null) ) {
							NavigableMap_ModificationMonitor_Set itmdSet = node_m1.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							NavigableMap_ModificationMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_m2.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_m2 = sourceMonitor.RVMRef_m2;
								Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> destEntry = null;
								INavigableMap_ModificationMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
									if ((node_m1 == null) ) {
										node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
										NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
										node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
										node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
									if ((node_m1_m2 == null) ) {
										node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
										node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
										node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
										node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
									if ((node_m1_m2_c == null) ) {
										node_m1_m2_c = new Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
										node_m1_m2.getValue1() .putNode(wr_c, node_m1_m2_c) ;
										node_m1_m2_c.setValue1(new MapOfMonitor<INavigableMap_ModificationMonitor>(3) ) ;
										node_m1_m2_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									destEntry = node_m1_m2_c;
									INavigableMap_ModificationMonitor itmdLeaf = node_m1_m2_c.getValue3() ;
									destLeaf = itmdLeaf;
								}
								if (((destLeaf == null) || destLeaf instanceof NavigableMap_ModificationDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <c>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
										if ((node_c != null) ) {
											INavigableMap_ModificationMonitor itmdLeaf = node_c.getValue3() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m1, c>
									if (definable) {
										// FindCode
										MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_c_Map.getNodeEquivalent(wr_m1) ;
										if ((node_m1 != null) ) {
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_c = node_m1.getNodeEquivalent(wr_c) ;
											if ((node_m1_c != null) ) {
												INavigableMap_ModificationMonitor itmdLeaf = node_m1_c.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m1, m2, c>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
										if ((node_m1 != null) ) {
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 != null) ) {
												Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
												if ((node_m1_m2_c != null) ) {
													INavigableMap_ModificationMonitor itmdLeaf = node_m1_m2_c.getValue3() ;
													if ((itmdLeaf != null) ) {
														if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
															definable = false;
														}
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m2, c>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
										if ((node_m2 != null) ) {
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2_c = node_m2.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m2_c != null) ) {
												INavigableMap_ModificationMonitor itmdLeaf = node_m2_c.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										NavigableMap_ModificationMonitor created = (NavigableMap_ModificationMonitor)sourceMonitor.clone() ;
										destEntry.setValue3(created) ;
										// D(X) defineTo:7 for <c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_c_i_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_c.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, c>
										{
											// InsertMonitor
											MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_c_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ;
												NavigableMap_Modification_m1_c_Map.putNode(wr_m1, node_m1) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_c = node_m1.getNodeEquivalent(wr_c) ;
											if ((node_m1_c == null) ) {
												node_m1_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m1.putNode(wr_c, node_m1_c) ;
												node_m1_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_c.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, m2>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 == null) ) {
												node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
												node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
												node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
												node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_m2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m2>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
											if ((node_m2 == null) ) {
												node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
												node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m2, c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
											if ((node_m2 == null) ) {
												node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
												node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2_c = node_m2.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m2_c == null) ) {
												node_m2_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m2.getValue1() .putNode(wr_c, node_m2_c) ;
												node_m2_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m2_c.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <c-m1, m2, c>
										{
											// InsertMonitor
											Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c__To__m1_m2_c_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_c__To__m1_m2_c_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_c.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getset1(m1, c);

			if ((cachehit == false) ) {
				NavigableMap_Modification_m1_c_Map_cachekey_c = c;
				NavigableMap_Modification_m1_c_Map_cachekey_m1 = m1;
				NavigableMap_Modification_m1_c_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_getset2Event(NavigableMap m2, Collection c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_c = null;
			CachedWeakReference wr_m2 = null;
			Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((c == NavigableMap_Modification_m2_c_Map_cachekey_c) && (m2 == NavigableMap_Modification_m2_c_Map_cachekey_m2) ) ) {
				matchedEntry = NavigableMap_Modification_m2_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_m2 = new CachedWeakReference(m2) ;
				wr_c = new CachedWeakReference(c) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
					if ((node_m2 == null) ) {
						node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
						node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
						node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2_c = node_m2.getValue1() .getNodeEquivalent(wr_c) ;
					if ((node_m2_c == null) ) {
						node_m2_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						node_m2.getValue1() .putNode(wr_c, node_m2_c) ;
						node_m2_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_m2_c;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_m2 == null) ) {
					wr_m2 = new CachedWeakReference(m2) ;
				}
				if ((wr_c == null) ) {
					wr_c = new CachedWeakReference(c) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <m2>
					NavigableMap_ModificationMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2__To__m1_m2_Map.getNodeEquivalent(wr_m2) ;
						if ((node_m2 != null) ) {
							NavigableMap_ModificationMonitor_Set itmdSet = node_m2.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							NavigableMap_ModificationMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_m1.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_m1 = sourceMonitor.RVMRef_m1;
								Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> destEntry = null;
								INavigableMap_ModificationMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
									if ((node_m1 == null) ) {
										node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
										NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
										node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
										node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
									if ((node_m1_m2 == null) ) {
										node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
										node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
										node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
										node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
									if ((node_m1_m2_c == null) ) {
										node_m1_m2_c = new Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
										node_m1_m2.getValue1() .putNode(wr_c, node_m1_m2_c) ;
										node_m1_m2_c.setValue1(new MapOfMonitor<INavigableMap_ModificationMonitor>(3) ) ;
										node_m1_m2_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									destEntry = node_m1_m2_c;
									INavigableMap_ModificationMonitor itmdLeaf = node_m1_m2_c.getValue3() ;
									destLeaf = itmdLeaf;
								}
								if (((destLeaf == null) || destLeaf instanceof NavigableMap_ModificationDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <c>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
										if ((node_c != null) ) {
											INavigableMap_ModificationMonitor itmdLeaf = node_c.getValue3() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m1, c>
									if (definable) {
										// FindCode
										MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_c_Map.getNodeEquivalent(wr_m1) ;
										if ((node_m1 != null) ) {
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_c = node_m1.getNodeEquivalent(wr_c) ;
											if ((node_m1_c != null) ) {
												INavigableMap_ModificationMonitor itmdLeaf = node_m1_c.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m1, m2, c>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
										if ((node_m1 != null) ) {
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 != null) ) {
												Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
												if ((node_m1_m2_c != null) ) {
													INavigableMap_ModificationMonitor itmdLeaf = node_m1_m2_c.getValue3() ;
													if ((itmdLeaf != null) ) {
														if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
															definable = false;
														}
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m2, c>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
										if ((node_m2 != null) ) {
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2_c = node_m2.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m2_c != null) ) {
												INavigableMap_ModificationMonitor itmdLeaf = node_m2_c.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										NavigableMap_ModificationMonitor created = (NavigableMap_ModificationMonitor)sourceMonitor.clone() ;
										destEntry.setValue3(created) ;
										// D(X) defineTo:7 for <c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_c_i_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_c.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, c>
										{
											// InsertMonitor
											MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_c_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ;
												NavigableMap_Modification_m1_c_Map.putNode(wr_m1, node_m1) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_c = node_m1.getNodeEquivalent(wr_c) ;
											if ((node_m1_c == null) ) {
												node_m1_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m1.putNode(wr_c, node_m1_c) ;
												node_m1_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_c.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, m2>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 == null) ) {
												node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
												node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
												node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
												node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_m2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m2>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
											if ((node_m2 == null) ) {
												node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
												node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m2, c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
											if ((node_m2 == null) ) {
												node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
												node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2_c = node_m2.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m2_c == null) ) {
												node_m2_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m2.getValue1() .putNode(wr_c, node_m2_c) ;
												node_m2_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m2_c.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <c-m1, m2, c>
										{
											// InsertMonitor
											Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c__To__m1_m2_c_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_c__To__m1_m2_c_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_c.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getset2(m2, c);

			if ((cachehit == false) ) {
				NavigableMap_Modification_m2_c_Map_cachekey_c = c;
				NavigableMap_Modification_m2_c_Map_cachekey_m2 = m2;
				NavigableMap_Modification_m2_c_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_getiterEvent(Collection c, Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_c = null;
			CachedWeakReference wr_i = null;
			Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((c == NavigableMap_Modification_c_i_Map_cachekey_c) && (i == NavigableMap_Modification_c_i_Map_cachekey_i) ) ) {
				matchedEntry = NavigableMap_Modification_c_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_c = new CachedWeakReference(c) ;
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
					if ((node_c == null) ) {
						node_c = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_c_i_Map.putNode(wr_c, node_c) ;
						node_c.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
						node_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
					if ((node_c_i == null) ) {
						node_c_i = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						node_c.getValue1() .putNode(wr_i, node_c_i) ;
						node_c_i.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_c_i;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_c == null) ) {
					wr_c = new CachedWeakReference(c) ;
				}
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <c>
					NavigableMap_ModificationMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c__To__m1_m2_c_Map.getNodeEquivalent(wr_c) ;
						if ((node_c != null) ) {
							NavigableMap_ModificationMonitor_Set itmdSet = node_c.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							NavigableMap_ModificationMonitor sourceMonitor = sourceSet.get(ielem) ;
							if (((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_m1.get() != null) ) && (sourceMonitor.RVMRef_m2.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_m1 = sourceMonitor.RVMRef_m1;
								CachedWeakReference wr_m2 = sourceMonitor.RVMRef_m2;
								MapOfMonitor<INavigableMap_ModificationMonitor> destLastMap = null;
								INavigableMap_ModificationMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
									if ((node_m1 == null) ) {
										node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
										NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
										node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
										node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
									if ((node_m1_m2 == null) ) {
										node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
										node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
										node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
										node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
									if ((node_m1_m2_c == null) ) {
										node_m1_m2_c = new Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
										node_m1_m2.getValue1() .putNode(wr_c, node_m1_m2_c) ;
										node_m1_m2_c.setValue1(new MapOfMonitor<INavigableMap_ModificationMonitor>(3) ) ;
										node_m1_m2_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
									}
									MapOfMonitor<INavigableMap_ModificationMonitor> itmdMap = node_m1_m2_c.getValue1() ;
									destLastMap = itmdMap;
									INavigableMap_ModificationMonitor node_m1_m2_c_i = node_m1_m2_c.getValue1() .getNodeEquivalent(wr_i) ;
									destLeaf = node_m1_m2_c_i;
								}
								if (((destLeaf == null) || destLeaf instanceof NavigableMap_ModificationDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <c, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
										if ((node_c != null) ) {
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_c_i != null) ) {
												INavigableMap_ModificationMonitor itmdLeaf = node_c_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <i>
									if (definable) {
										// FindCode
										Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_i = NavigableMap_Modification_i_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											INavigableMap_ModificationMonitor itmdLeaf = node_i.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m1, m2, c, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
										if ((node_m1 != null) ) {
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 != null) ) {
												Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
												if ((node_m1_m2_c != null) ) {
													INavigableMap_ModificationMonitor node_m1_m2_c_i = node_m1_m2_c.getValue1() .getNodeEquivalent(wr_i) ;
													if ((node_m1_m2_c_i != null) ) {
														if (((node_m1_m2_c_i.getDisable() > sourceMonitor.getTau() ) || ((node_m1_m2_c_i.getTau() > 0) && (node_m1_m2_c_i.getTau() < sourceMonitor.getTau() ) ) ) ) {
															definable = false;
														}
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										NavigableMap_ModificationMonitor created = (NavigableMap_ModificationMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_i, created) ;
										// D(X) defineTo:7 for <c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_c_i_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_c.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <c, i>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
											if ((node_c == null) ) {
												node_c = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_c_i_Map.putNode(wr_c, node_c) ;
												node_c.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_c_i == null) ) {
												node_c_i = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_c.getValue1() .putNode(wr_i, node_c_i) ;
												node_c_i.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_c_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <i>
										{
											// InsertMonitor
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_i = NavigableMap_Modification_i_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_i_Map.putNode(wr_i, node_i) ;
												node_i.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, c>
										{
											// InsertMonitor
											MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_c_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ;
												NavigableMap_Modification_m1_c_Map.putNode(wr_m1, node_m1) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_c = node_m1.getNodeEquivalent(wr_c) ;
											if ((node_m1_c == null) ) {
												node_m1_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m1.putNode(wr_c, node_m1_c) ;
												node_m1_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_c.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, m2>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 == null) ) {
												node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
												node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
												node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
												node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_m2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m1, m2, c>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
											if ((node_m1 == null) ) {
												node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
												node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
												node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor> node_m1_m2 = node_m1.getValue1() .getNodeEquivalent(wr_m2) ;
											if ((node_m1_m2 == null) ) {
												node_m1_m2 = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>() ;
												node_m1.getValue1() .putNode(wr_m2, node_m1_m2) ;
												node_m1_m2.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(2) ) ;
												node_m1_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1_m2_c = node_m1_m2.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m1_m2_c == null) ) {
												node_m1_m2_c = new Tuple3<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m1_m2.getValue1() .putNode(wr_c, node_m1_m2_c) ;
												node_m1_m2_c.setValue1(new MapOfMonitor<INavigableMap_ModificationMonitor>(3) ) ;
												node_m1_m2_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m1_m2_c.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m2>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
											if ((node_m2 == null) ) {
												node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
												node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m2.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m2, c>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
											if ((node_m2 == null) ) {
												node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
												node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
												node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2_c = node_m2.getValue1() .getNodeEquivalent(wr_c) ;
											if ((node_m2_c == null) ) {
												node_m2_c = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
												node_m2.getValue1() .putNode(wr_c, node_m2_c) ;
												node_m2_c.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
											}
											NavigableMap_ModificationMonitor_Set targetSet = node_m2_c.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getiter(c, i);

			if ((cachehit == false) ) {
				NavigableMap_Modification_c_i_Map_cachekey_c = c;
				NavigableMap_Modification_c_i_Map_cachekey_i = i;
				NavigableMap_Modification_c_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_modify1Event(NavigableMap m1) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_m1 = null;
			Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((m1 == NavigableMap_Modification_m1_Map_cachekey_m1) ) {
				matchedEntry = NavigableMap_Modification_m1_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_m1 = new CachedWeakReference(m1) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m1 = NavigableMap_Modification_m1_m2_c_i_Map.getNodeEquivalent(wr_m1) ;
					if ((node_m1 == null) ) {
						node_m1 = new Tuple3<MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m1_m2_c_i_Map.putNode(wr_m1, node_m1) ;
						node_m1.setValue1(new MapOfAll<MapOfAll<MapOfMonitor<INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, NavigableMap_ModificationMonitor>(1) ) ;
						node_m1.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_m1;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_m1 == null) ) {
					wr_m1 = new CachedWeakReference(m1) ;
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modify1(m1);

			if ((cachehit == false) ) {
				NavigableMap_Modification_m1_Map_cachekey_m1 = m1;
				NavigableMap_Modification_m1_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_modify2Event(NavigableMap m2) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_m2 = null;
			Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((m2 == NavigableMap_Modification_m2_Map_cachekey_m2) ) {
				matchedEntry = NavigableMap_Modification_m2_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_m2 = new CachedWeakReference(m2) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_m2 = NavigableMap_Modification_m2_c_Map.getNodeEquivalent(wr_m2) ;
					if ((node_m2 == null) ) {
						node_m2 = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_m2_c_Map.putNode(wr_m2, node_m2) ;
						node_m2.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
						node_m2.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_m2;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_m2 == null) ) {
					wr_m2 = new CachedWeakReference(m2) ;
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modify2(m2);

			if ((cachehit == false) ) {
				NavigableMap_Modification_m2_Map_cachekey_m2 = m2;
				NavigableMap_Modification_m2_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_modify3Event(Collection c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_c = null;
			Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((c == NavigableMap_Modification_c_Map_cachekey_c) ) {
				matchedEntry = NavigableMap_Modification_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_c = new CachedWeakReference(c) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_c = NavigableMap_Modification_c_i_Map.getNodeEquivalent(wr_c) ;
					if ((node_c == null) ) {
						node_c = new Tuple3<MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>, NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_c_i_Map.putNode(wr_c, node_c) ;
						node_c.setValue1(new MapOfSetMonitor<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>(1) ) ;
						node_c.setValue2(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_c;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_c == null) ) {
					wr_c = new CachedWeakReference(c) ;
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modify3(c);

			if ((cachehit == false) ) {
				NavigableMap_Modification_c_Map_cachekey_c = c;
				NavigableMap_Modification_c_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_Modification_useiterEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_Modification_activated) {
			CachedWeakReference wr_i = null;
			Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((i == NavigableMap_Modification_i_Map_cachekey_i) ) {
				matchedEntry = NavigableMap_Modification_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor> node_i = NavigableMap_Modification_i_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<NavigableMap_ModificationMonitor_Set, INavigableMap_ModificationMonitor>() ;
						NavigableMap_Modification_i_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new NavigableMap_ModificationMonitor_Set() ) ;
					}
					matchedEntry = node_i;
				}
			}
			// D(X) main:1
			INavigableMap_ModificationMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				// D(X) main:6
				INavigableMap_ModificationMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_ModificationDisableHolder holder = new NavigableMap_ModificationDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_Modification_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_ModificationMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_useiter(i);

			if ((cachehit == false) ) {
				NavigableMap_Modification_i_Map_cachekey_i = i;
				NavigableMap_Modification_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Vector_InsertIndex_insertEvent(Vector v, int index) {
		Vector_InsertIndex_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Vector_InsertIndexRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Vector_InsertIndex__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Vector_InsertIndexRawMonitor created = new Vector_InsertIndexRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_insert(v, index);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void List_UnsafeListIterator_createEvent(List l, ListIterator i) {
		List_UnsafeListIterator_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		CachedWeakReference wr_l = null;
		MapOfMonitor<List_UnsafeListIteratorMonitor> matchedLastMap = null;
		List_UnsafeListIteratorMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((i == List_UnsafeListIterator_l_i_Map_cachekey_i) && (l == List_UnsafeListIterator_l_i_Map_cachekey_l) ) ) {
			matchedEntry = List_UnsafeListIterator_l_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_l = new CachedWeakReference(l) ;
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set> node_l = List_UnsafeListIterator_l_i_Map.getNodeEquivalent(wr_l) ;
				if ((node_l == null) ) {
					node_l = new Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set>() ;
					List_UnsafeListIterator_l_i_Map.putNode(wr_l, node_l) ;
					node_l.setValue1(new MapOfMonitor<List_UnsafeListIteratorMonitor>(1) ) ;
					node_l.setValue2(new List_UnsafeListIteratorMonitor_Set() ) ;
				}
				MapOfMonitor<List_UnsafeListIteratorMonitor> itmdMap = node_l.getValue1() ;
				matchedLastMap = itmdMap;
				List_UnsafeListIteratorMonitor node_l_i = node_l.getValue1() .getNodeEquivalent(wr_i) ;
				matchedEntry = node_l_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_l == null) ) {
				wr_l = new CachedWeakReference(l) ;
			}
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			List_UnsafeListIteratorMonitor created = new List_UnsafeListIteratorMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
			// D(X) defineNew:5 for <i>
			{
				// InsertMonitor
				List_UnsafeListIteratorMonitor_Set node_i = List_UnsafeListIterator_i_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new List_UnsafeListIteratorMonitor_Set() ;
					List_UnsafeListIterator_i_Map.putNode(wr_i, node_i) ;
				}
				node_i.add(created) ;
			}
			// D(X) defineNew:5 for <l>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set> node_l = List_UnsafeListIterator_l_i_Map.getNodeEquivalent(wr_l) ;
				if ((node_l == null) ) {
					node_l = new Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set>() ;
					List_UnsafeListIterator_l_i_Map.putNode(wr_l, node_l) ;
					node_l.setValue1(new MapOfMonitor<List_UnsafeListIteratorMonitor>(1) ) ;
					node_l.setValue2(new List_UnsafeListIteratorMonitor_Set() ) ;
				}
				List_UnsafeListIteratorMonitor_Set targetSet = node_l.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final List_UnsafeListIteratorMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(l, i);
		if(matchedEntryfinalMonitor.List_UnsafeListIteratorMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			List_UnsafeListIterator_l_i_Map_cachekey_i = i;
			List_UnsafeListIterator_l_i_Map_cachekey_l = l;
			List_UnsafeListIterator_l_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void List_UnsafeListIterator_modifyEvent(List l) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (List_UnsafeListIterator_activated) {
			Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((l == List_UnsafeListIterator_l_Map_cachekey_l) ) {
				matchedEntry = List_UnsafeListIterator_l_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<List_UnsafeListIteratorMonitor>, List_UnsafeListIteratorMonitor_Set> node_l = List_UnsafeListIterator_l_i_Map.getNodeWithStrongRef(l) ;
				if ((node_l != null) ) {
					matchedEntry = node_l;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				List_UnsafeListIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_modify(l);

					if ((cachehit == false) ) {
						List_UnsafeListIterator_l_Map_cachekey_l = l;
						List_UnsafeListIterator_l_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void List_UnsafeListIterator_useiterEvent(ListIterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (List_UnsafeListIterator_activated) {
			List_UnsafeListIteratorMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((i == List_UnsafeListIterator_i_Map_cachekey_i) ) {
				matchedEntry = List_UnsafeListIterator_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				List_UnsafeListIteratorMonitor_Set node_i = List_UnsafeListIterator_i_Map.getNodeWithStrongRef(i) ;
				if ((node_i != null) ) {
					matchedEntry = node_i;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_useiter(i);

				if ((cachehit == false) ) {
					List_UnsafeListIterator_i_Map_cachekey_i = i;
					List_UnsafeListIterator_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_ItselfAsValue_putEvent(Map map, Object key, Object value) {
		Map_ItselfAsValue_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Map_ItselfAsValueRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Map_ItselfAsValue__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Map_ItselfAsValueRawMonitor created = new Map_ItselfAsValueRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_put(map, key, value);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_ItselfAsValue_putallEvent(Map map, Map src) {
		Map_ItselfAsValue_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Map_ItselfAsValueRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Map_ItselfAsValue__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Map_ItselfAsValueRawMonitor created = new Map_ItselfAsValueRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_putall(map, src);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_UnsafeIterator_createEvent(Collection c, Iterator i) {
		Collection_UnsafeIterator_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		CachedWeakReference wr_i = null;
		MapOfMonitor<Collection_UnsafeIteratorMonitor> matchedLastMap = null;
		Collection_UnsafeIteratorMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((c == Collection_UnsafeIterator_c_i_Map_cachekey_c) && (i == Collection_UnsafeIterator_c_i_Map_cachekey_i) ) ) {
			matchedEntry = Collection_UnsafeIterator_c_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set> node_c = Collection_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
				if ((node_c == null) ) {
					node_c = new Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set>() ;
					Collection_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
					node_c.setValue1(new MapOfMonitor<Collection_UnsafeIteratorMonitor>(1) ) ;
					node_c.setValue2(new Collection_UnsafeIteratorMonitor_Set() ) ;
				}
				MapOfMonitor<Collection_UnsafeIteratorMonitor> itmdMap = node_c.getValue1() ;
				matchedLastMap = itmdMap;
				Collection_UnsafeIteratorMonitor node_c_i = node_c.getValue1() .getNodeEquivalent(wr_i) ;
				matchedEntry = node_c_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			Collection_UnsafeIteratorMonitor created = new Collection_UnsafeIteratorMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
			// D(X) defineNew:5 for <c>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set> node_c = Collection_UnsafeIterator_c_i_Map.getNodeEquivalent(wr_c) ;
				if ((node_c == null) ) {
					node_c = new Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set>() ;
					Collection_UnsafeIterator_c_i_Map.putNode(wr_c, node_c) ;
					node_c.setValue1(new MapOfMonitor<Collection_UnsafeIteratorMonitor>(1) ) ;
					node_c.setValue2(new Collection_UnsafeIteratorMonitor_Set() ) ;
				}
				Collection_UnsafeIteratorMonitor_Set targetSet = node_c.getValue2() ;
				targetSet.add(created) ;
			}
			// D(X) defineNew:5 for <i>
			{
				// InsertMonitor
				Collection_UnsafeIteratorMonitor_Set node_i = Collection_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
				if ((node_i == null) ) {
					node_i = new Collection_UnsafeIteratorMonitor_Set() ;
					Collection_UnsafeIterator_i_Map.putNode(wr_i, node_i) ;
				}
				node_i.add(created) ;
			}
		}
		// D(X) main:8--9
		final Collection_UnsafeIteratorMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(c, i);
		if(matchedEntryfinalMonitor.Collection_UnsafeIteratorMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Collection_UnsafeIterator_c_i_Map_cachekey_c = c;
			Collection_UnsafeIterator_c_i_Map_cachekey_i = i;
			Collection_UnsafeIterator_c_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_UnsafeIterator_modifyEvent(Collection c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collection_UnsafeIterator_activated) {
			Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((c == Collection_UnsafeIterator_c_Map_cachekey_c) ) {
				matchedEntry = Collection_UnsafeIterator_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<Collection_UnsafeIteratorMonitor>, Collection_UnsafeIteratorMonitor_Set> node_c = Collection_UnsafeIterator_c_i_Map.getNodeWithStrongRef(c) ;
				if ((node_c != null) ) {
					matchedEntry = node_c;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				Collection_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_modify(c);

					if ((cachehit == false) ) {
						Collection_UnsafeIterator_c_Map_cachekey_c = c;
						Collection_UnsafeIterator_c_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collection_UnsafeIterator_useiterEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collection_UnsafeIterator_activated) {
			Collection_UnsafeIteratorMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((i == Collection_UnsafeIterator_i_Map_cachekey_i) ) {
				matchedEntry = Collection_UnsafeIterator_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Collection_UnsafeIteratorMonitor_Set node_i = Collection_UnsafeIterator_i_Map.getNodeWithStrongRef(i) ;
				if ((node_i != null) ) {
					matchedEntry = node_i;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_useiter(i);

				if ((cachehit == false) ) {
					Collection_UnsafeIterator_i_Map_cachekey_i = i;
					Collection_UnsafeIterator_i_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsynchronizedAddAll_enterEvent(Map t, Map s) {
		Map_UnsynchronizedAddAll_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		CachedWeakReference wr_t = null;
		MapOfMonitor<Map_UnsynchronizedAddAllMonitor> matchedLastMap = null;
		Map_UnsynchronizedAddAllMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((s == Map_UnsynchronizedAddAll_t_s_Map_cachekey_s) && (t == Map_UnsynchronizedAddAll_t_s_Map_cachekey_t) ) ) {
			matchedEntry = Map_UnsynchronizedAddAll_t_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Map_UnsynchronizedAddAllMonitor> node_t = Map_UnsynchronizedAddAll_t_s_Map.getNodeEquivalent(wr_t) ;
				if ((node_t == null) ) {
					node_t = new MapOfMonitor<Map_UnsynchronizedAddAllMonitor>(1) ;
					Map_UnsynchronizedAddAll_t_s_Map.putNode(wr_t, node_t) ;
				}
				matchedLastMap = node_t;
				Map_UnsynchronizedAddAllMonitor node_t_s = node_t.getNodeEquivalent(wr_s) ;
				matchedEntry = node_t_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			Map_UnsynchronizedAddAllMonitor created = new Map_UnsynchronizedAddAllMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
			// D(X) defineNew:5 for <s>
			{
				// InsertMonitor
				Map_UnsynchronizedAddAllMonitor_Set node_s = Map_UnsynchronizedAddAll_s_Map.getNodeEquivalent(wr_s) ;
				if ((node_s == null) ) {
					node_s = new Map_UnsynchronizedAddAllMonitor_Set() ;
					Map_UnsynchronizedAddAll_s_Map.putNode(wr_s, node_s) ;
				}
				node_s.add(created) ;
			}
		}
		// D(X) main:8--9
		final Map_UnsynchronizedAddAllMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_enter(t, s);
		if(matchedEntryfinalMonitor.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Map_UnsynchronizedAddAll_t_s_Map_cachekey_s = s;
			Map_UnsynchronizedAddAll_t_s_Map_cachekey_t = t;
			Map_UnsynchronizedAddAll_t_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsynchronizedAddAll_modifyEvent(Map s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_UnsynchronizedAddAll_activated) {
			Map_UnsynchronizedAddAllMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((s == Map_UnsynchronizedAddAll_s_Map_cachekey_s) ) {
				matchedEntry = Map_UnsynchronizedAddAll_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Map_UnsynchronizedAddAllMonitor_Set node_s = Map_UnsynchronizedAddAll_s_Map.getNodeWithStrongRef(s) ;
				if ((node_s != null) ) {
					matchedEntry = node_s;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_modify(s);

				if ((cachehit == false) ) {
					Map_UnsynchronizedAddAll_s_Map_cachekey_s = s;
					Map_UnsynchronizedAddAll_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_UnsynchronizedAddAll_leaveEvent(Map t, Map s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Map_UnsynchronizedAddAll_activated) {
			Map_UnsynchronizedAddAllMonitor matchedEntry = null;
			boolean cachehit = false;
			if (((s == Map_UnsynchronizedAddAll_t_s_Map_cachekey_s) && (t == Map_UnsynchronizedAddAll_t_s_Map_cachekey_t) ) ) {
				matchedEntry = Map_UnsynchronizedAddAll_t_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				MapOfMonitor<Map_UnsynchronizedAddAllMonitor> node_t = Map_UnsynchronizedAddAll_t_s_Map.getNodeWithStrongRef(t) ;
				if ((node_t != null) ) {
					Map_UnsynchronizedAddAllMonitor node_t_s = node_t.getNodeWithStrongRef(s) ;
					matchedEntry = node_t_s;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Map_UnsynchronizedAddAllMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_leave(t, s);
				if(matchedEntryfinalMonitor.Map_UnsynchronizedAddAllMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Map_UnsynchronizedAddAll_t_s_Map_cachekey_s = s;
					Map_UnsynchronizedAddAll_t_s_Map_cachekey_t = t;
					Map_UnsynchronizedAddAll_t_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedCollection_syncEvent(Collection col) {
		Collections_SynchronizedCollection_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_col = null;
		Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> matchedEntry = null;
		boolean cachehit = false;
		if ((col == Collections_SynchronizedCollection_col_Map_cachekey_col) ) {
			matchedEntry = Collections_SynchronizedCollection_col_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_col = new CachedWeakReference(col) ;
			{
				// FindOrCreateEntry
				Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
				if ((node_col == null) ) {
					node_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor>() ;
					Collections_SynchronizedCollection_col_iter_Map.putNode(wr_col, node_col) ;
					node_col.setValue1(new MapOfMonitor<ICollections_SynchronizedCollectionMonitor>(1) ) ;
					node_col.setValue2(new Collections_SynchronizedCollectionMonitor_Set() ) ;
				}
				matchedEntry = node_col;
			}
		}
		// D(X) main:1
		Collections_SynchronizedCollectionMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_col == null) ) {
				wr_col = new CachedWeakReference(col) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				Collections_SynchronizedCollectionMonitor created = new Collections_SynchronizedCollectionMonitor(Collections_SynchronizedCollection_timestamp++) ;
				matchedEntry.setValue3(created) ;
				Collections_SynchronizedCollectionMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			Collections_SynchronizedCollectionMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(Collections_SynchronizedCollection_timestamp++) ;
		}
		// D(X) main:8--9
		Collections_SynchronizedCollectionMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_sync(col);

		if ((cachehit == false) ) {
			Collections_SynchronizedCollection_col_Map_cachekey_col = col;
			Collections_SynchronizedCollection_col_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedCollection_syncCreateIterEvent(Collection col, Iterator iter) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedCollection_activated) {
			CachedWeakReference wr_col = null;
			CachedWeakReference wr_iter = null;
			MapOfMonitor<ICollections_SynchronizedCollectionMonitor> matchedLastMap = null;
			ICollections_SynchronizedCollectionMonitor matchedEntry = null;
			boolean cachehit = false;
			if (((col == Collections_SynchronizedCollection_col_iter_Map_cachekey_col) && (iter == Collections_SynchronizedCollection_col_iter_Map_cachekey_iter) ) ) {
				matchedEntry = Collections_SynchronizedCollection_col_iter_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_col = new CachedWeakReference(col) ;
				wr_iter = new CachedWeakReference(iter) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
					if ((node_col == null) ) {
						node_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor>() ;
						Collections_SynchronizedCollection_col_iter_Map.putNode(wr_col, node_col) ;
						node_col.setValue1(new MapOfMonitor<ICollections_SynchronizedCollectionMonitor>(1) ) ;
						node_col.setValue2(new Collections_SynchronizedCollectionMonitor_Set() ) ;
					}
					MapOfMonitor<ICollections_SynchronizedCollectionMonitor> itmdMap = node_col.getValue1() ;
					matchedLastMap = itmdMap;
					ICollections_SynchronizedCollectionMonitor node_col_iter = node_col.getValue1() .getNodeEquivalent(wr_iter) ;
					matchedEntry = node_col_iter;
				}
			}
			// D(X) main:1
			if ((matchedEntry == null) ) {
				if ((wr_col == null) ) {
					wr_col = new CachedWeakReference(col) ;
				}
				if ((wr_iter == null) ) {
					wr_iter = new CachedWeakReference(iter) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <col>
					Collections_SynchronizedCollectionMonitor sourceLeaf = null;
					{
						// FindCode
						Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
						if ((node_col != null) ) {
							Collections_SynchronizedCollectionMonitor itmdLeaf = node_col.getValue3() ;
							sourceLeaf = itmdLeaf;
						}
					}
					if ((sourceLeaf != null) ) {
						boolean definable = true;
						// D(X) defineTo:1--5 for <col, iter>
						if (definable) {
							// FindCode
							Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
							if ((node_col != null) ) {
								ICollections_SynchronizedCollectionMonitor node_col_iter = node_col.getValue1() .getNodeEquivalent(wr_iter) ;
								if ((node_col_iter != null) ) {
									if (((node_col_iter.getDisable() > sourceLeaf.getTau() ) || ((node_col_iter.getTau() > 0) && (node_col_iter.getTau() < sourceLeaf.getTau() ) ) ) ) {
										definable = false;
									}
								}
							}
						}
						// D(X) defineTo:1--5 for <iter>
						if (definable) {
							// FindCode
							Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> node_iter = Collections_SynchronizedCollection_iter_Map.getNodeEquivalent(wr_iter) ;
							if ((node_iter != null) ) {
								ICollections_SynchronizedCollectionMonitor itmdLeaf = node_iter.getValue2() ;
								if ((itmdLeaf != null) ) {
									if (((itmdLeaf.getDisable() > sourceLeaf.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceLeaf.getTau() ) ) ) ) {
										definable = false;
									}
								}
							}
						}
						if (definable) {
							// D(X) defineTo:6
							Collections_SynchronizedCollectionMonitor created = (Collections_SynchronizedCollectionMonitor)sourceLeaf.clone() ;
							matchedEntry = created;
							matchedLastMap.putNode(wr_iter, created) ;
							// D(X) defineTo:7 for <col>
							{
								// InsertMonitor
								Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
								if ((node_col == null) ) {
									node_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor>() ;
									Collections_SynchronizedCollection_col_iter_Map.putNode(wr_col, node_col) ;
									node_col.setValue1(new MapOfMonitor<ICollections_SynchronizedCollectionMonitor>(1) ) ;
									node_col.setValue2(new Collections_SynchronizedCollectionMonitor_Set() ) ;
								}
								Collections_SynchronizedCollectionMonitor_Set targetSet = node_col.getValue2() ;
								targetSet.add(created) ;
							}
							// D(X) defineTo:7 for <iter>
							{
								// InsertMonitor
								Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> node_iter = Collections_SynchronizedCollection_iter_Map.getNodeEquivalent(wr_iter) ;
								if ((node_iter == null) ) {
									node_iter = new Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor>() ;
									Collections_SynchronizedCollection_iter_Map.putNode(wr_iter, node_iter) ;
									node_iter.setValue1(new Collections_SynchronizedCollectionMonitor_Set() ) ;
								}
								Collections_SynchronizedCollectionMonitor_Set targetSet = node_iter.getValue1() ;
								targetSet.add(created) ;
							}
						}
					}
				}
				// D(X) main:6
				if ((matchedEntry == null) ) {
					Collections_SynchronizedCollectionDisableHolder holder = new Collections_SynchronizedCollectionDisableHolder(-1) ;
					matchedLastMap.putNode(wr_iter, holder) ;
					matchedEntry = holder;
				}
				matchedEntry.setDisable(Collections_SynchronizedCollection_timestamp++) ;
			}
			// D(X) main:8--9
			if (matchedEntry instanceof Collections_SynchronizedCollectionMonitor) {
				Collections_SynchronizedCollectionMonitor monitor = (Collections_SynchronizedCollectionMonitor)matchedEntry;
				final Collections_SynchronizedCollectionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_syncCreateIter(col, iter);
				if(monitorfinalMonitor.Collections_SynchronizedCollectionMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Collections_SynchronizedCollection_col_iter_Map_cachekey_col = col;
					Collections_SynchronizedCollection_col_iter_Map_cachekey_iter = iter;
					Collections_SynchronizedCollection_col_iter_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedCollection_asyncCreateIterEvent(Collection col, Iterator iter) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedCollection_activated) {
			CachedWeakReference wr_col = null;
			CachedWeakReference wr_iter = null;
			MapOfMonitor<ICollections_SynchronizedCollectionMonitor> matchedLastMap = null;
			ICollections_SynchronizedCollectionMonitor matchedEntry = null;
			boolean cachehit = false;
			if (((col == Collections_SynchronizedCollection_col_iter_Map_cachekey_col) && (iter == Collections_SynchronizedCollection_col_iter_Map_cachekey_iter) ) ) {
				matchedEntry = Collections_SynchronizedCollection_col_iter_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_col = new CachedWeakReference(col) ;
				wr_iter = new CachedWeakReference(iter) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
					if ((node_col == null) ) {
						node_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor>() ;
						Collections_SynchronizedCollection_col_iter_Map.putNode(wr_col, node_col) ;
						node_col.setValue1(new MapOfMonitor<ICollections_SynchronizedCollectionMonitor>(1) ) ;
						node_col.setValue2(new Collections_SynchronizedCollectionMonitor_Set() ) ;
					}
					MapOfMonitor<ICollections_SynchronizedCollectionMonitor> itmdMap = node_col.getValue1() ;
					matchedLastMap = itmdMap;
					ICollections_SynchronizedCollectionMonitor node_col_iter = node_col.getValue1() .getNodeEquivalent(wr_iter) ;
					matchedEntry = node_col_iter;
				}
			}
			// D(X) main:1
			if ((matchedEntry == null) ) {
				if ((wr_col == null) ) {
					wr_col = new CachedWeakReference(col) ;
				}
				if ((wr_iter == null) ) {
					wr_iter = new CachedWeakReference(iter) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <col>
					Collections_SynchronizedCollectionMonitor sourceLeaf = null;
					{
						// FindCode
						Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
						if ((node_col != null) ) {
							Collections_SynchronizedCollectionMonitor itmdLeaf = node_col.getValue3() ;
							sourceLeaf = itmdLeaf;
						}
					}
					if ((sourceLeaf != null) ) {
						boolean definable = true;
						// D(X) defineTo:1--5 for <col, iter>
						if (definable) {
							// FindCode
							Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
							if ((node_col != null) ) {
								ICollections_SynchronizedCollectionMonitor node_col_iter = node_col.getValue1() .getNodeEquivalent(wr_iter) ;
								if ((node_col_iter != null) ) {
									if (((node_col_iter.getDisable() > sourceLeaf.getTau() ) || ((node_col_iter.getTau() > 0) && (node_col_iter.getTau() < sourceLeaf.getTau() ) ) ) ) {
										definable = false;
									}
								}
							}
						}
						// D(X) defineTo:1--5 for <iter>
						if (definable) {
							// FindCode
							Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> node_iter = Collections_SynchronizedCollection_iter_Map.getNodeEquivalent(wr_iter) ;
							if ((node_iter != null) ) {
								ICollections_SynchronizedCollectionMonitor itmdLeaf = node_iter.getValue2() ;
								if ((itmdLeaf != null) ) {
									if (((itmdLeaf.getDisable() > sourceLeaf.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceLeaf.getTau() ) ) ) ) {
										definable = false;
									}
								}
							}
						}
						if (definable) {
							// D(X) defineTo:6
							Collections_SynchronizedCollectionMonitor created = (Collections_SynchronizedCollectionMonitor)sourceLeaf.clone() ;
							matchedEntry = created;
							matchedLastMap.putNode(wr_iter, created) ;
							// D(X) defineTo:7 for <col>
							{
								// InsertMonitor
								Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor> node_col = Collections_SynchronizedCollection_col_iter_Map.getNodeEquivalent(wr_col) ;
								if ((node_col == null) ) {
									node_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedCollectionMonitor>, Collections_SynchronizedCollectionMonitor_Set, Collections_SynchronizedCollectionMonitor>() ;
									Collections_SynchronizedCollection_col_iter_Map.putNode(wr_col, node_col) ;
									node_col.setValue1(new MapOfMonitor<ICollections_SynchronizedCollectionMonitor>(1) ) ;
									node_col.setValue2(new Collections_SynchronizedCollectionMonitor_Set() ) ;
								}
								Collections_SynchronizedCollectionMonitor_Set targetSet = node_col.getValue2() ;
								targetSet.add(created) ;
							}
							// D(X) defineTo:7 for <iter>
							{
								// InsertMonitor
								Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> node_iter = Collections_SynchronizedCollection_iter_Map.getNodeEquivalent(wr_iter) ;
								if ((node_iter == null) ) {
									node_iter = new Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor>() ;
									Collections_SynchronizedCollection_iter_Map.putNode(wr_iter, node_iter) ;
									node_iter.setValue1(new Collections_SynchronizedCollectionMonitor_Set() ) ;
								}
								Collections_SynchronizedCollectionMonitor_Set targetSet = node_iter.getValue1() ;
								targetSet.add(created) ;
							}
						}
					}
				}
				// D(X) main:6
				if ((matchedEntry == null) ) {
					Collections_SynchronizedCollectionDisableHolder holder = new Collections_SynchronizedCollectionDisableHolder(-1) ;
					matchedLastMap.putNode(wr_iter, holder) ;
					matchedEntry = holder;
				}
				matchedEntry.setDisable(Collections_SynchronizedCollection_timestamp++) ;
			}
			// D(X) main:8--9
			if (matchedEntry instanceof Collections_SynchronizedCollectionMonitor) {
				Collections_SynchronizedCollectionMonitor monitor = (Collections_SynchronizedCollectionMonitor)matchedEntry;
				final Collections_SynchronizedCollectionMonitor monitorfinalMonitor = monitor;
				monitor.Prop_1_event_asyncCreateIter(col, iter);
				if(monitorfinalMonitor.Collections_SynchronizedCollectionMonitor_Prop_1_Category_match) {
					monitorfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Collections_SynchronizedCollection_col_iter_Map_cachekey_col = col;
					Collections_SynchronizedCollection_col_iter_Map_cachekey_iter = iter;
					Collections_SynchronizedCollection_col_iter_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedCollection_accessIterEvent(Iterator iter) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedCollection_activated) {
			CachedWeakReference wr_iter = null;
			Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((iter == Collections_SynchronizedCollection_iter_Map_cachekey_iter) ) {
				matchedEntry = Collections_SynchronizedCollection_iter_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_iter = new CachedWeakReference(iter) ;
				{
					// FindOrCreateEntry
					Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor> node_iter = Collections_SynchronizedCollection_iter_Map.getNodeEquivalent(wr_iter) ;
					if ((node_iter == null) ) {
						node_iter = new Tuple2<Collections_SynchronizedCollectionMonitor_Set, ICollections_SynchronizedCollectionMonitor>() ;
						Collections_SynchronizedCollection_iter_Map.putNode(wr_iter, node_iter) ;
						node_iter.setValue1(new Collections_SynchronizedCollectionMonitor_Set() ) ;
					}
					matchedEntry = node_iter;
				}
			}
			// D(X) main:1
			ICollections_SynchronizedCollectionMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_iter == null) ) {
					wr_iter = new CachedWeakReference(iter) ;
				}
				// D(X) main:6
				ICollections_SynchronizedCollectionMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					Collections_SynchronizedCollectionDisableHolder holder = new Collections_SynchronizedCollectionDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Collections_SynchronizedCollection_timestamp++) ;
			}
			// D(X) main:8--9
			Collections_SynchronizedCollectionMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_accessIter(iter);

			if ((cachehit == false) ) {
				Collections_SynchronizedCollection_iter_Map_cachekey_iter = iter;
				Collections_SynchronizedCollection_iter_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SortedSet_StandardConstructors_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		SortedSet_StandardConstructors_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		SortedSet_StandardConstructorsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = SortedSet_StandardConstructors__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			SortedSet_StandardConstructorsRawMonitor created = new SortedSet_StandardConstructorsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_Comparable_invalid_sortEvent(Object[] arr) {
		Arrays_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Arrays_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Arrays_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Arrays_ComparableRawMonitor created = new Arrays_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_sort(arr);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Arrays_MutuallyComparable_invalid_sortEvent(Object[] arr, Comparator comp) {
		Arrays_MutuallyComparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Arrays_MutuallyComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Arrays_MutuallyComparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Arrays_MutuallyComparableRawMonitor created = new Arrays_MutuallyComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_sort(arr, comp);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_UnsafeIterator_getsetEvent(NavigableMap m, Set s) {
		NavigableMap_UnsafeIterator_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		CachedWeakReference wr_m = null;
		Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> matchedEntry = null;
		boolean cachehit = false;
		if (((m == NavigableMap_UnsafeIterator_m_s_Map_cachekey_m) && (s == NavigableMap_UnsafeIterator_m_s_Map_cachekey_s) ) ) {
			matchedEntry = NavigableMap_UnsafeIterator_m_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_m = new CachedWeakReference(m) ;
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
				if ((node_m == null) ) {
					node_m = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
					NavigableMap_UnsafeIterator_m_s_i_Map.putNode(wr_m, node_m) ;
					node_m.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ) ;
					node_m.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
				}
				Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> node_m_s = node_m.getValue1() .getNodeEquivalent(wr_s) ;
				if ((node_m_s == null) ) {
					node_m_s = new Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>() ;
					node_m.getValue1() .putNode(wr_s, node_m_s) ;
					node_m_s.setValue1(new MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>(2) ) ;
					node_m_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
				}
				matchedEntry = node_m_s;
			}
		}
		// D(X) main:1
		NavigableMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_m == null) ) {
				wr_m = new CachedWeakReference(m) ;
			}
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				NavigableMap_UnsafeIteratorMonitor created = new NavigableMap_UnsafeIteratorMonitor(NavigableMap_UnsafeIterator_timestamp++, wr_m) ;
				matchedEntry.setValue3(created) ;
				NavigableMap_UnsafeIteratorMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
				// D(X) defineNew:5 for <m>
				{
					// InsertMonitor
					Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
					if ((node_m == null) ) {
						node_m = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_m_s_i_Map.putNode(wr_m, node_m) ;
						node_m.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ) ;
						node_m.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_m.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <s>
				{
					// InsertMonitor
					Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s_i_Map.getNodeEquivalent(wr_s) ;
					if ((node_s == null) ) {
						node_s = new Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_s_i_Map.putNode(wr_s, node_s) ;
						node_s.setValue1(new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(1) ) ;
						node_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_s.getValue2() ;
					targetSet.add(created) ;
				}
				// D(X) defineNew:5 for <s-m, s>
				{
					// InsertMonitor
					Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s__To__m_s_Map.getNodeEquivalent(wr_s) ;
					if ((node_s == null) ) {
						node_s = new Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_s__To__m_s_Map.putNode(wr_s, node_s) ;
						node_s.setValue1(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_s.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			NavigableMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(NavigableMap_UnsafeIterator_timestamp++) ;
		}
		// D(X) main:8--9
		NavigableMap_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_getset(m, s);

		if ((cachehit == false) ) {
			NavigableMap_UnsafeIterator_m_s_Map_cachekey_m = m;
			NavigableMap_UnsafeIterator_m_s_Map_cachekey_s = s;
			NavigableMap_UnsafeIterator_m_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_UnsafeIterator_getiterEvent(Set s, Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_UnsafeIterator_activated) {
			CachedWeakReference wr_s = null;
			CachedWeakReference wr_i = null;
			Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((i == NavigableMap_UnsafeIterator_s_i_Map_cachekey_i) && (s == NavigableMap_UnsafeIterator_s_i_Map_cachekey_s) ) ) {
				matchedEntry = NavigableMap_UnsafeIterator_s_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_s = new CachedWeakReference(s) ;
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s_i_Map.getNodeEquivalent(wr_s) ;
					if ((node_s == null) ) {
						node_s = new Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_s_i_Map.putNode(wr_s, node_s) ;
						node_s.setValue1(new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(1) ) ;
						node_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s_i = node_s.getValue1() .getNodeEquivalent(wr_i) ;
					if ((node_s_i == null) ) {
						node_s_i = new Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						node_s.getValue1() .putNode(wr_i, node_s_i) ;
						node_s_i.setValue1(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_s_i;
				}
			}
			// D(X) main:1
			INavigableMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_s == null) ) {
					wr_s = new CachedWeakReference(s) ;
				}
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <s>
					NavigableMap_UnsafeIteratorMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s__To__m_s_Map.getNodeEquivalent(wr_s) ;
						if ((node_s != null) ) {
							NavigableMap_UnsafeIteratorMonitor_Set itmdSet = node_s.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							NavigableMap_UnsafeIteratorMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_m.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_m = sourceMonitor.RVMRef_m;
								MapOfMonitor<INavigableMap_UnsafeIteratorMonitor> destLastMap = null;
								INavigableMap_UnsafeIteratorMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
									if ((node_m == null) ) {
										node_m = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
										NavigableMap_UnsafeIterator_m_s_i_Map.putNode(wr_m, node_m) ;
										node_m.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ) ;
										node_m.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> node_m_s = node_m.getValue1() .getNodeEquivalent(wr_s) ;
									if ((node_m_s == null) ) {
										node_m_s = new Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>() ;
										node_m.getValue1() .putNode(wr_s, node_m_s) ;
										node_m_s.setValue1(new MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>(2) ) ;
										node_m_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
									}
									MapOfMonitor<INavigableMap_UnsafeIteratorMonitor> itmdMap = node_m_s.getValue1() ;
									destLastMap = itmdMap;
									INavigableMap_UnsafeIteratorMonitor node_m_s_i = node_m_s.getValue1() .getNodeEquivalent(wr_i) ;
									destLeaf = node_m_s_i;
								}
								if (((destLeaf == null) || destLeaf instanceof NavigableMap_UnsafeIteratorDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <i>
									if (definable) {
										// FindCode
										Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_i = NavigableMap_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
										if ((node_i != null) ) {
											INavigableMap_UnsafeIteratorMonitor itmdLeaf = node_i.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <m, s, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
										if ((node_m != null) ) {
											Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> node_m_s = node_m.getValue1() .getNodeEquivalent(wr_s) ;
											if ((node_m_s != null) ) {
												INavigableMap_UnsafeIteratorMonitor node_m_s_i = node_m_s.getValue1() .getNodeEquivalent(wr_i) ;
												if ((node_m_s_i != null) ) {
													if (((node_m_s_i.getDisable() > sourceMonitor.getTau() ) || ((node_m_s_i.getTau() > 0) && (node_m_s_i.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <s, i>
									if (definable) {
										// FindCode
										Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s_i_Map.getNodeEquivalent(wr_s) ;
										if ((node_s != null) ) {
											Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s_i = node_s.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_s_i != null) ) {
												INavigableMap_UnsafeIteratorMonitor itmdLeaf = node_s_i.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										NavigableMap_UnsafeIteratorMonitor created = (NavigableMap_UnsafeIteratorMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_i, created) ;
										// D(X) defineTo:7 for <i>
										{
											// InsertMonitor
											Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_i = NavigableMap_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
											if ((node_i == null) ) {
												node_i = new Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
												NavigableMap_UnsafeIterator_i_Map.putNode(wr_i, node_i) ;
												node_i.setValue1(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_i.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
											if ((node_m == null) ) {
												node_m = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
												NavigableMap_UnsafeIterator_m_s_i_Map.putNode(wr_m, node_m) ;
												node_m.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ) ;
												node_m.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_m.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <m, s>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
											if ((node_m == null) ) {
												node_m = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
												NavigableMap_UnsafeIterator_m_s_i_Map.putNode(wr_m, node_m) ;
												node_m.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ) ;
												node_m.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor> node_m_s = node_m.getValue1() .getNodeEquivalent(wr_s) ;
											if ((node_m_s == null) ) {
												node_m_s = new Tuple3<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>() ;
												node_m.getValue1() .putNode(wr_s, node_m_s) ;
												node_m_s.setValue1(new MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>(2) ) ;
												node_m_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_m_s.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s_i_Map.getNodeEquivalent(wr_s) ;
											if ((node_s == null) ) {
												node_s = new Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
												NavigableMap_UnsafeIterator_s_i_Map.putNode(wr_s, node_s) ;
												node_s.setValue1(new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(1) ) ;
												node_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_s.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <s, i>
										{
											// InsertMonitor
											Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s_i_Map.getNodeEquivalent(wr_s) ;
											if ((node_s == null) ) {
												node_s = new Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
												NavigableMap_UnsafeIterator_s_i_Map.putNode(wr_s, node_s) ;
												node_s.setValue1(new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(1) ) ;
												node_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s_i = node_s.getValue1() .getNodeEquivalent(wr_i) ;
											if ((node_s_i == null) ) {
												node_s_i = new Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
												node_s.getValue1() .putNode(wr_i, node_s_i) ;
												node_s_i.setValue1(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
											}
											NavigableMap_UnsafeIteratorMonitor_Set targetSet = node_s_i.getValue1() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				INavigableMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_UnsafeIteratorDisableHolder holder = new NavigableMap_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_getiter(s, i);

			if ((cachehit == false) ) {
				NavigableMap_UnsafeIterator_s_i_Map_cachekey_i = i;
				NavigableMap_UnsafeIterator_s_i_Map_cachekey_s = s;
				NavigableMap_UnsafeIterator_s_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_UnsafeIterator_modifyMapEvent(NavigableMap m) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_UnsafeIterator_activated) {
			CachedWeakReference wr_m = null;
			Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((m == NavigableMap_UnsafeIterator_m_Map_cachekey_m) ) {
				matchedEntry = NavigableMap_UnsafeIterator_m_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_m = new CachedWeakReference(m) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_m = NavigableMap_UnsafeIterator_m_s_i_Map.getNodeEquivalent(wr_m) ;
					if ((node_m == null) ) {
						node_m = new Tuple3<MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_m_s_i_Map.putNode(wr_m, node_m) ;
						node_m.setValue1(new MapOfAll<MapOfMonitor<INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, NavigableMap_UnsafeIteratorMonitor>(1) ) ;
						node_m.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_m;
				}
			}
			// D(X) main:1
			INavigableMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_m == null) ) {
					wr_m = new CachedWeakReference(m) ;
				}
				// D(X) main:6
				INavigableMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_UnsafeIteratorDisableHolder holder = new NavigableMap_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modifyMap(m);

			if ((cachehit == false) ) {
				NavigableMap_UnsafeIterator_m_Map_cachekey_m = m;
				NavigableMap_UnsafeIterator_m_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_UnsafeIterator_modifySetEvent(Set s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_UnsafeIterator_activated) {
			CachedWeakReference wr_s = null;
			Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((s == NavigableMap_UnsafeIterator_s_Map_cachekey_s) ) {
				matchedEntry = NavigableMap_UnsafeIterator_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_s = new CachedWeakReference(s) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_s = NavigableMap_UnsafeIterator_s_i_Map.getNodeEquivalent(wr_s) ;
					if ((node_s == null) ) {
						node_s = new Tuple3<MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>, NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_s_i_Map.putNode(wr_s, node_s) ;
						node_s.setValue1(new MapOfSetMonitor<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>(1) ) ;
						node_s.setValue2(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_s;
				}
			}
			// D(X) main:1
			INavigableMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_s == null) ) {
					wr_s = new CachedWeakReference(s) ;
				}
				// D(X) main:6
				INavigableMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_UnsafeIteratorDisableHolder holder = new NavigableMap_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_modifySet(s);

			if ((cachehit == false) ) {
				NavigableMap_UnsafeIterator_s_Map_cachekey_s = s;
				NavigableMap_UnsafeIterator_s_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NavigableMap_UnsafeIterator_useiterEvent(Iterator i) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (NavigableMap_UnsafeIterator_activated) {
			CachedWeakReference wr_i = null;
			Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((i == NavigableMap_UnsafeIterator_i_Map_cachekey_i) ) {
				matchedEntry = NavigableMap_UnsafeIterator_i_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_i = new CachedWeakReference(i) ;
				{
					// FindOrCreateEntry
					Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor> node_i = NavigableMap_UnsafeIterator_i_Map.getNodeEquivalent(wr_i) ;
					if ((node_i == null) ) {
						node_i = new Tuple2<NavigableMap_UnsafeIteratorMonitor_Set, INavigableMap_UnsafeIteratorMonitor>() ;
						NavigableMap_UnsafeIterator_i_Map.putNode(wr_i, node_i) ;
						node_i.setValue1(new NavigableMap_UnsafeIteratorMonitor_Set() ) ;
					}
					matchedEntry = node_i;
				}
			}
			// D(X) main:1
			INavigableMap_UnsafeIteratorMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_i == null) ) {
					wr_i = new CachedWeakReference(i) ;
				}
				// D(X) main:6
				INavigableMap_UnsafeIteratorMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					NavigableMap_UnsafeIteratorDisableHolder holder = new NavigableMap_UnsafeIteratorDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(NavigableMap_UnsafeIterator_timestamp++) ;
			}
			// D(X) main:8--9
			NavigableMap_UnsafeIteratorMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_useiter(i);

			if ((cachehit == false) ) {
				NavigableMap_UnsafeIterator_i_Map_cachekey_i = i;
				NavigableMap_UnsafeIterator_i_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void TreeSet_Comparable_addEvent(Object e) {
		TreeSet_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		TreeSet_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = TreeSet_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			TreeSet_ComparableRawMonitor created = new TreeSet_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_add(e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void TreeSet_Comparable_addallEvent(Collection c) {
		TreeSet_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		TreeSet_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = TreeSet_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			TreeSet_ComparableRawMonitor created = new TreeSet_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_addall(c);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Map_StandardConstructors_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Map_StandardConstructors_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Map_StandardConstructorsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Map_StandardConstructors__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Map_StandardConstructorsRawMonitor created = new Map_StandardConstructorsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_Comparable_invalid_sortEvent(List list, Comparator comp) {
		Collections_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collections_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collections_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collections_ComparableRawMonitor created = new Collections_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_sort(list, comp);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_Comparable_invalid_minmaxEvent(Collection col, Comparator comp) {
		Collections_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Collections_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Collections_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Collections_ComparableRawMonitor created = new Collections_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_invalid_minmax(col, comp);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Random_OverrideNext_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Random_OverrideNext_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Random_OverrideNextRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Random_OverrideNext__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Random_OverrideNextRawMonitor created = new Random_OverrideNextRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Scanner_ManipulateAfterClose_createEvent(Closeable c, Scanner s) {
		Scanner_ManipulateAfterClose_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		CachedWeakReference wr_c = null;
		MapOfMonitor<Scanner_ManipulateAfterCloseMonitor> matchedLastMap = null;
		Scanner_ManipulateAfterCloseMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((c == Scanner_ManipulateAfterClose_s_c_Map_cachekey_c) && (s == Scanner_ManipulateAfterClose_s_c_Map_cachekey_s) ) ) {
			matchedEntry = Scanner_ManipulateAfterClose_s_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set> node_s = Scanner_ManipulateAfterClose_s_c_Map.getNodeEquivalent(wr_s) ;
				if ((node_s == null) ) {
					node_s = new Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set>() ;
					Scanner_ManipulateAfterClose_s_c_Map.putNode(wr_s, node_s) ;
					node_s.setValue1(new MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>(1) ) ;
					node_s.setValue2(new Scanner_ManipulateAfterCloseMonitor_Set() ) ;
				}
				MapOfMonitor<Scanner_ManipulateAfterCloseMonitor> itmdMap = node_s.getValue1() ;
				matchedLastMap = itmdMap;
				Scanner_ManipulateAfterCloseMonitor node_s_c = node_s.getValue1() .getNodeEquivalent(wr_c) ;
				matchedEntry = node_s_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			Scanner_ManipulateAfterCloseMonitor created = new Scanner_ManipulateAfterCloseMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
			// D(X) defineNew:5 for <c>
			{
				// InsertMonitor
				Scanner_ManipulateAfterCloseMonitor_Set node_c = Scanner_ManipulateAfterClose_c_Map.getNodeEquivalent(wr_c) ;
				if ((node_c == null) ) {
					node_c = new Scanner_ManipulateAfterCloseMonitor_Set() ;
					Scanner_ManipulateAfterClose_c_Map.putNode(wr_c, node_c) ;
				}
				node_c.add(created) ;
			}
			// D(X) defineNew:5 for <s>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set> node_s = Scanner_ManipulateAfterClose_s_c_Map.getNodeEquivalent(wr_s) ;
				if ((node_s == null) ) {
					node_s = new Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set>() ;
					Scanner_ManipulateAfterClose_s_c_Map.putNode(wr_s, node_s) ;
					node_s.setValue1(new MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>(1) ) ;
					node_s.setValue2(new Scanner_ManipulateAfterCloseMonitor_Set() ) ;
				}
				Scanner_ManipulateAfterCloseMonitor_Set targetSet = node_s.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final Scanner_ManipulateAfterCloseMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(c, s);
		if(matchedEntryfinalMonitor.Scanner_ManipulateAfterCloseMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Scanner_ManipulateAfterClose_s_c_Map_cachekey_c = c;
			Scanner_ManipulateAfterClose_s_c_Map_cachekey_s = s;
			Scanner_ManipulateAfterClose_s_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Scanner_ManipulateAfterClose_closeEvent(Scanner s) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Scanner_ManipulateAfterClose_activated) {
			Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((s == Scanner_ManipulateAfterClose_s_Map_cachekey_s) ) {
				matchedEntry = Scanner_ManipulateAfterClose_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<Scanner_ManipulateAfterCloseMonitor>, Scanner_ManipulateAfterCloseMonitor_Set> node_s = Scanner_ManipulateAfterClose_s_c_Map.getNodeWithStrongRef(s) ;
				if ((node_s != null) ) {
					matchedEntry = node_s;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				Scanner_ManipulateAfterCloseMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_close(s);

					if ((cachehit == false) ) {
						Scanner_ManipulateAfterClose_s_Map_cachekey_s = s;
						Scanner_ManipulateAfterClose_s_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Scanner_ManipulateAfterClose_manipulateEvent(Closeable c) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Scanner_ManipulateAfterClose_activated) {
			Scanner_ManipulateAfterCloseMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((c == Scanner_ManipulateAfterClose_c_Map_cachekey_c) ) {
				matchedEntry = Scanner_ManipulateAfterClose_c_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Scanner_ManipulateAfterCloseMonitor_Set node_c = Scanner_ManipulateAfterClose_c_Map.getNodeWithStrongRef(c) ;
				if ((node_c != null) ) {
					matchedEntry = node_c;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_manipulate(c);

				if ((cachehit == false) ) {
					Scanner_ManipulateAfterClose_c_Map_cachekey_c = c;
					Scanner_ManipulateAfterClose_c_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServiceLoader_MultipleConcurrentThreads_createEvent(Thread t2, ServiceLoader s) {
		ServiceLoader_MultipleConcurrentThreads_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<ServiceLoader_MultipleConcurrentThreadsMonitor> matchedLastMap = null;
		ServiceLoader_MultipleConcurrentThreadsMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s) ) {
			matchedEntry = ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServiceLoader_MultipleConcurrentThreadsMonitor> itmdMap = ServiceLoader_MultipleConcurrentThreads_s_Map;
				matchedLastMap = itmdMap;
				ServiceLoader_MultipleConcurrentThreadsMonitor node_s = ServiceLoader_MultipleConcurrentThreads_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			ServiceLoader_MultipleConcurrentThreadsMonitor created = new ServiceLoader_MultipleConcurrentThreadsMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
		}
		// D(X) main:8--9
		final ServiceLoader_MultipleConcurrentThreadsMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create(t2, s);
		if(matchedEntryfinalMonitor.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s = s;
			ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServiceLoader_MultipleConcurrentThreads_gooduseEvent(ServiceLoader s, Thread t2) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServiceLoader_MultipleConcurrentThreads_activated) {
			ServiceLoader_MultipleConcurrentThreadsMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((s == ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s) ) {
				matchedEntry = ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServiceLoader_MultipleConcurrentThreadsMonitor node_s = ServiceLoader_MultipleConcurrentThreads_s_Map.getNodeWithStrongRef(s) ;
				matchedEntry = node_s;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServiceLoader_MultipleConcurrentThreadsMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_gooduse(s, t2);
				if(matchedEntryfinalMonitor.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s = s;
					ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServiceLoader_MultipleConcurrentThreads_baduseEvent(ServiceLoader s, Thread t2) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServiceLoader_MultipleConcurrentThreads_activated) {
			ServiceLoader_MultipleConcurrentThreadsMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((s == ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s) ) {
				matchedEntry = ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServiceLoader_MultipleConcurrentThreadsMonitor node_s = ServiceLoader_MultipleConcurrentThreads_s_Map.getNodeWithStrongRef(s) ;
				matchedEntry = node_s;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServiceLoader_MultipleConcurrentThreadsMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_baduse(s, t2);
				if(matchedEntryfinalMonitor.ServiceLoader_MultipleConcurrentThreadsMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServiceLoader_MultipleConcurrentThreads_s_Map_cachekey_s = s;
					ServiceLoader_MultipleConcurrentThreads_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringTokenizer_HasMoreElements_hasnexttrueEvent(StringTokenizer i, boolean b) {
		StringTokenizer_HasMoreElements_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> matchedLastMap = null;
		StringTokenizer_HasMoreElementsMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == StringTokenizer_HasMoreElements_i_Map_cachekey_i) ) {
			matchedEntry = StringTokenizer_HasMoreElements_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> itmdMap = StringTokenizer_HasMoreElements_i_Map;
				matchedLastMap = itmdMap;
				StringTokenizer_HasMoreElementsMonitor node_i = StringTokenizer_HasMoreElements_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			StringTokenizer_HasMoreElementsMonitor created = new StringTokenizer_HasMoreElementsMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final StringTokenizer_HasMoreElementsMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasnexttrue(i, b);
		if(matchedEntryfinalMonitor.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			StringTokenizer_HasMoreElements_i_Map_cachekey_i = i;
			StringTokenizer_HasMoreElements_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringTokenizer_HasMoreElements_hasnextfalseEvent(StringTokenizer i, boolean b) {
		StringTokenizer_HasMoreElements_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> matchedLastMap = null;
		StringTokenizer_HasMoreElementsMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == StringTokenizer_HasMoreElements_i_Map_cachekey_i) ) {
			matchedEntry = StringTokenizer_HasMoreElements_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> itmdMap = StringTokenizer_HasMoreElements_i_Map;
				matchedLastMap = itmdMap;
				StringTokenizer_HasMoreElementsMonitor node_i = StringTokenizer_HasMoreElements_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			StringTokenizer_HasMoreElementsMonitor created = new StringTokenizer_HasMoreElementsMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final StringTokenizer_HasMoreElementsMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_hasnextfalse(i, b);
		if(matchedEntryfinalMonitor.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			StringTokenizer_HasMoreElements_i_Map_cachekey_i = i;
			StringTokenizer_HasMoreElements_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringTokenizer_HasMoreElements_nextEvent(StringTokenizer i) {
		StringTokenizer_HasMoreElements_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_i = null;
		MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> matchedLastMap = null;
		StringTokenizer_HasMoreElementsMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((i == StringTokenizer_HasMoreElements_i_Map_cachekey_i) ) {
			matchedEntry = StringTokenizer_HasMoreElements_i_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_i = new CachedWeakReference(i) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StringTokenizer_HasMoreElementsMonitor> itmdMap = StringTokenizer_HasMoreElements_i_Map;
				matchedLastMap = itmdMap;
				StringTokenizer_HasMoreElementsMonitor node_i = StringTokenizer_HasMoreElements_i_Map.getNodeEquivalent(wr_i) ;
				matchedEntry = node_i;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_i == null) ) {
				wr_i = new CachedWeakReference(i) ;
			}
			// D(X) main:4
			StringTokenizer_HasMoreElementsMonitor created = new StringTokenizer_HasMoreElementsMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_i, created) ;
		}
		// D(X) main:8--9
		final StringTokenizer_HasMoreElementsMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_next(i);
		if(matchedEntryfinalMonitor.StringTokenizer_HasMoreElementsMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			StringTokenizer_HasMoreElements_i_Map_cachekey_i = i;
			StringTokenizer_HasMoreElements_i_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedMap_syncEvent(Map syncMap) {
		Collections_SynchronizedMap_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_syncMap = null;
		Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> matchedEntry = null;
		boolean cachehit = false;
		if ((syncMap == Collections_SynchronizedMap_syncMap_Map_cachekey_syncMap) ) {
			matchedEntry = Collections_SynchronizedMap_syncMap_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_syncMap = new CachedWeakReference(syncMap) ;
			{
				// FindOrCreateEntry
				Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
				if ((node_syncMap == null) ) {
					node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
					Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
					node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
					node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
				}
				matchedEntry = node_syncMap;
			}
		}
		// D(X) main:1
		Collections_SynchronizedMapMonitor matchedLeaf = matchedEntry.getValue3() ;
		if ((matchedLeaf == null) ) {
			if ((wr_syncMap == null) ) {
				wr_syncMap = new CachedWeakReference(syncMap) ;
			}
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				Collections_SynchronizedMapMonitor created = new Collections_SynchronizedMapMonitor(Collections_SynchronizedMap_timestamp++, wr_syncMap) ;
				matchedEntry.setValue3(created) ;
				Collections_SynchronizedMapMonitor_Set enclosingSet = matchedEntry.getValue2() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			Collections_SynchronizedMapMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
			disableUpdatedLeaf.setDisable(Collections_SynchronizedMap_timestamp++) ;
		}
		// D(X) main:8--9
		Collections_SynchronizedMapMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
		stateTransitionedSet.event_sync(syncMap);

		if ((cachehit == false) ) {
			Collections_SynchronizedMap_syncMap_Map_cachekey_syncMap = syncMap;
			Collections_SynchronizedMap_syncMap_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedMap_createSetEvent(Map syncMap, Collection col) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedMap_activated) {
			CachedWeakReference wr_col = null;
			CachedWeakReference wr_syncMap = null;
			Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((col == Collections_SynchronizedMap_syncMap_col_Map_cachekey_col) && (syncMap == Collections_SynchronizedMap_syncMap_col_Map_cachekey_syncMap) ) ) {
				matchedEntry = Collections_SynchronizedMap_syncMap_col_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_syncMap = new CachedWeakReference(syncMap) ;
				wr_col = new CachedWeakReference(col) ;
				{
					// FindOrCreateEntry
					Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
					if ((node_syncMap == null) ) {
						node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
						Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
						node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
						node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
					}
					Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
					if ((node_syncMap_col == null) ) {
						node_syncMap_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
						node_syncMap.getValue1() .putNode(wr_col, node_syncMap_col) ;
						node_syncMap_col.setValue1(new MapOfMonitor<ICollections_SynchronizedMapMonitor>(2) ) ;
						node_syncMap_col.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
					}
					matchedEntry = node_syncMap_col;
				}
			}
			// D(X) main:1
			ICollections_SynchronizedMapMonitor matchedLeaf = matchedEntry.getValue3() ;
			if ((matchedLeaf == null) ) {
				if ((wr_syncMap == null) ) {
					wr_syncMap = new CachedWeakReference(syncMap) ;
				}
				if ((wr_col == null) ) {
					wr_col = new CachedWeakReference(col) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <syncMap>
					Collections_SynchronizedMapMonitor sourceLeaf = null;
					{
						// FindCode
						Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
						if ((node_syncMap != null) ) {
							Collections_SynchronizedMapMonitor itmdLeaf = node_syncMap.getValue3() ;
							sourceLeaf = itmdLeaf;
						}
					}
					if ((sourceLeaf != null) ) {
						boolean definable = true;
						// D(X) defineTo:1--5 for <syncMap, col>
						if (definable) {
							// FindCode
							Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
							if ((node_syncMap != null) ) {
								Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
								if ((node_syncMap_col != null) ) {
									ICollections_SynchronizedMapMonitor itmdLeaf = node_syncMap_col.getValue3() ;
									if ((itmdLeaf != null) ) {
										if (((itmdLeaf.getDisable() > sourceLeaf.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceLeaf.getTau() ) ) ) ) {
											definable = false;
										}
									}
								}
							}
						}
						if (definable) {
							// D(X) defineTo:6
							Collections_SynchronizedMapMonitor created = (Collections_SynchronizedMapMonitor)sourceLeaf.clone() ;
							matchedEntry.setValue3(created) ;
							matchedLeaf = created;
							Collections_SynchronizedMapMonitor_Set enclosingSet = matchedEntry.getValue2() ;
							enclosingSet.add(created) ;
							// D(X) defineTo:7 for <syncMap>
							{
								// InsertMonitor
								Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
								if ((node_syncMap == null) ) {
									node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
									Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
									node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
									node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
								}
								Collections_SynchronizedMapMonitor_Set targetSet = node_syncMap.getValue2() ;
								targetSet.add(created) ;
							}
							// D(X) defineTo:7 for <col-syncMap, col>
							{
								// InsertMonitor
								Tuple2<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col__To__syncMap_col_Map.getNodeEquivalent(wr_col) ;
								if ((node_col == null) ) {
									node_col = new Tuple2<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
									Collections_SynchronizedMap_col__To__syncMap_col_Map.putNode(wr_col, node_col) ;
									node_col.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
								}
								Collections_SynchronizedMapMonitor_Set targetSet = node_col.getValue1() ;
								targetSet.add(created) ;
							}
						}
					}
				}
				// D(X) main:6
				ICollections_SynchronizedMapMonitor disableUpdatedLeaf = matchedEntry.getValue3() ;
				if ((disableUpdatedLeaf == null) ) {
					Collections_SynchronizedMapDisableHolder holder = new Collections_SynchronizedMapDisableHolder(-1) ;
					matchedEntry.setValue3(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Collections_SynchronizedMap_timestamp++) ;
			}
			// D(X) main:8--9
			Collections_SynchronizedMapMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
			stateTransitionedSet.event_createSet(syncMap, col);

			if ((cachehit == false) ) {
				Collections_SynchronizedMap_syncMap_col_Map_cachekey_col = col;
				Collections_SynchronizedMap_syncMap_col_Map_cachekey_syncMap = syncMap;
				Collections_SynchronizedMap_syncMap_col_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedMap_syncCreateIterEvent(Collection col, Iterator iter) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedMap_activated) {
			CachedWeakReference wr_col = null;
			CachedWeakReference wr_iter = null;
			Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((col == Collections_SynchronizedMap_col_iter_Map_cachekey_col) && (iter == Collections_SynchronizedMap_col_iter_Map_cachekey_iter) ) ) {
				matchedEntry = Collections_SynchronizedMap_col_iter_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_col = new CachedWeakReference(col) ;
				wr_iter = new CachedWeakReference(iter) ;
				{
					// FindOrCreateEntry
					MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col_iter_Map.getNodeEquivalent(wr_col) ;
					if ((node_col == null) ) {
						node_col = new MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ;
						Collections_SynchronizedMap_col_iter_Map.putNode(wr_col, node_col) ;
					}
					Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col_iter = node_col.getNodeEquivalent(wr_iter) ;
					if ((node_col_iter == null) ) {
						node_col_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
						node_col.putNode(wr_iter, node_col_iter) ;
						node_col_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
					}
					matchedEntry = node_col_iter;
				}
			}
			// D(X) main:1
			ICollections_SynchronizedMapMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_col == null) ) {
					wr_col = new CachedWeakReference(col) ;
				}
				if ((wr_iter == null) ) {
					wr_iter = new CachedWeakReference(iter) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <col>
					Collections_SynchronizedMapMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col__To__syncMap_col_Map.getNodeEquivalent(wr_col) ;
						if ((node_col != null) ) {
							Collections_SynchronizedMapMonitor_Set itmdSet = node_col.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							Collections_SynchronizedMapMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_syncMap.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_syncMap = sourceMonitor.RVMRef_syncMap;
								MapOfMonitor<ICollections_SynchronizedMapMonitor> destLastMap = null;
								ICollections_SynchronizedMapMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
									if ((node_syncMap == null) ) {
										node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
										Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
										node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
										node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
									if ((node_syncMap_col == null) ) {
										node_syncMap_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
										node_syncMap.getValue1() .putNode(wr_col, node_syncMap_col) ;
										node_syncMap_col.setValue1(new MapOfMonitor<ICollections_SynchronizedMapMonitor>(2) ) ;
										node_syncMap_col.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
									}
									MapOfMonitor<ICollections_SynchronizedMapMonitor> itmdMap = node_syncMap_col.getValue1() ;
									destLastMap = itmdMap;
									ICollections_SynchronizedMapMonitor node_syncMap_col_iter = node_syncMap_col.getValue1() .getNodeEquivalent(wr_iter) ;
									destLeaf = node_syncMap_col_iter;
								}
								if (((destLeaf == null) || destLeaf instanceof Collections_SynchronizedMapDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <col, iter>
									if (definable) {
										// FindCode
										MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col_iter_Map.getNodeEquivalent(wr_col) ;
										if ((node_col != null) ) {
											Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col_iter = node_col.getNodeEquivalent(wr_iter) ;
											if ((node_col_iter != null) ) {
												ICollections_SynchronizedMapMonitor itmdLeaf = node_col_iter.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <iter>
									if (definable) {
										// FindCode
										Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_iter = Collections_SynchronizedMap_iter_Map.getNodeEquivalent(wr_iter) ;
										if ((node_iter != null) ) {
											ICollections_SynchronizedMapMonitor itmdLeaf = node_iter.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <syncMap, col, iter>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
										if ((node_syncMap != null) ) {
											Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
											if ((node_syncMap_col != null) ) {
												ICollections_SynchronizedMapMonitor node_syncMap_col_iter = node_syncMap_col.getValue1() .getNodeEquivalent(wr_iter) ;
												if ((node_syncMap_col_iter != null) ) {
													if (((node_syncMap_col_iter.getDisable() > sourceMonitor.getTau() ) || ((node_syncMap_col_iter.getTau() > 0) && (node_syncMap_col_iter.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										Collections_SynchronizedMapMonitor created = (Collections_SynchronizedMapMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_iter, created) ;
										// D(X) defineTo:7 for <col, iter>
										{
											// InsertMonitor
											MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col_iter_Map.getNodeEquivalent(wr_col) ;
											if ((node_col == null) ) {
												node_col = new MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ;
												Collections_SynchronizedMap_col_iter_Map.putNode(wr_col, node_col) ;
											}
											Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col_iter = node_col.getNodeEquivalent(wr_iter) ;
											if ((node_col_iter == null) ) {
												node_col_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
												node_col.putNode(wr_iter, node_col_iter) ;
												node_col_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_col_iter.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <iter>
										{
											// InsertMonitor
											Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_iter = Collections_SynchronizedMap_iter_Map.getNodeEquivalent(wr_iter) ;
											if ((node_iter == null) ) {
												node_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
												Collections_SynchronizedMap_iter_Map.putNode(wr_iter, node_iter) ;
												node_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_iter.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <syncMap>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
											if ((node_syncMap == null) ) {
												node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
												Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
												node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
												node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_syncMap.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <syncMap, col>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
											if ((node_syncMap == null) ) {
												node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
												Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
												node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
												node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
											if ((node_syncMap_col == null) ) {
												node_syncMap_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
												node_syncMap.getValue1() .putNode(wr_col, node_syncMap_col) ;
												node_syncMap_col.setValue1(new MapOfMonitor<ICollections_SynchronizedMapMonitor>(2) ) ;
												node_syncMap_col.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_syncMap_col.getValue2() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				ICollections_SynchronizedMapMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					Collections_SynchronizedMapDisableHolder holder = new Collections_SynchronizedMapDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Collections_SynchronizedMap_timestamp++) ;
			}
			// D(X) main:8--9
			Collections_SynchronizedMapMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_syncCreateIter(col, iter);

			if ((cachehit == false) ) {
				Collections_SynchronizedMap_col_iter_Map_cachekey_col = col;
				Collections_SynchronizedMap_col_iter_Map_cachekey_iter = iter;
				Collections_SynchronizedMap_col_iter_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedMap_asyncCreateIterEvent(Collection col, Iterator iter) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedMap_activated) {
			CachedWeakReference wr_col = null;
			CachedWeakReference wr_iter = null;
			Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> matchedEntry = null;
			boolean cachehit = false;
			if (((col == Collections_SynchronizedMap_col_iter_Map_cachekey_col) && (iter == Collections_SynchronizedMap_col_iter_Map_cachekey_iter) ) ) {
				matchedEntry = Collections_SynchronizedMap_col_iter_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_col = new CachedWeakReference(col) ;
				wr_iter = new CachedWeakReference(iter) ;
				{
					// FindOrCreateEntry
					MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col_iter_Map.getNodeEquivalent(wr_col) ;
					if ((node_col == null) ) {
						node_col = new MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ;
						Collections_SynchronizedMap_col_iter_Map.putNode(wr_col, node_col) ;
					}
					Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col_iter = node_col.getNodeEquivalent(wr_iter) ;
					if ((node_col_iter == null) ) {
						node_col_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
						node_col.putNode(wr_iter, node_col_iter) ;
						node_col_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
					}
					matchedEntry = node_col_iter;
				}
			}
			// D(X) main:1
			ICollections_SynchronizedMapMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_col == null) ) {
					wr_col = new CachedWeakReference(col) ;
				}
				if ((wr_iter == null) ) {
					wr_iter = new CachedWeakReference(iter) ;
				}
				{
					// D(X) createNewMonitorStates:4 when Dom(theta'') = <col>
					Collections_SynchronizedMapMonitor_Set sourceSet = null;
					{
						// FindCode
						Tuple2<Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col__To__syncMap_col_Map.getNodeEquivalent(wr_col) ;
						if ((node_col != null) ) {
							Collections_SynchronizedMapMonitor_Set itmdSet = node_col.getValue1() ;
							sourceSet = itmdSet;
						}
					}
					if ((sourceSet != null) ) {
						int numalive = 0;
						int setlen = sourceSet.getSize() ;
						for (int ielem = 0; (ielem < setlen) ;++ielem) {
							Collections_SynchronizedMapMonitor sourceMonitor = sourceSet.get(ielem) ;
							if ((!sourceMonitor.isTerminated() && (sourceMonitor.RVMRef_syncMap.get() != null) ) ) {
								sourceSet.set(numalive++, sourceMonitor) ;
								CachedWeakReference wr_syncMap = sourceMonitor.RVMRef_syncMap;
								MapOfMonitor<ICollections_SynchronizedMapMonitor> destLastMap = null;
								ICollections_SynchronizedMapMonitor destLeaf = null;
								{
									// FindOrCreate
									Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
									if ((node_syncMap == null) ) {
										node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
										Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
										node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
										node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
									}
									Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
									if ((node_syncMap_col == null) ) {
										node_syncMap_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
										node_syncMap.getValue1() .putNode(wr_col, node_syncMap_col) ;
										node_syncMap_col.setValue1(new MapOfMonitor<ICollections_SynchronizedMapMonitor>(2) ) ;
										node_syncMap_col.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
									}
									MapOfMonitor<ICollections_SynchronizedMapMonitor> itmdMap = node_syncMap_col.getValue1() ;
									destLastMap = itmdMap;
									ICollections_SynchronizedMapMonitor node_syncMap_col_iter = node_syncMap_col.getValue1() .getNodeEquivalent(wr_iter) ;
									destLeaf = node_syncMap_col_iter;
								}
								if (((destLeaf == null) || destLeaf instanceof Collections_SynchronizedMapDisableHolder) ) {
									boolean definable = true;
									// D(X) defineTo:1--5 for <col, iter>
									if (definable) {
										// FindCode
										MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col_iter_Map.getNodeEquivalent(wr_col) ;
										if ((node_col != null) ) {
											Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col_iter = node_col.getNodeEquivalent(wr_iter) ;
											if ((node_col_iter != null) ) {
												ICollections_SynchronizedMapMonitor itmdLeaf = node_col_iter.getValue2() ;
												if ((itmdLeaf != null) ) {
													if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <iter>
									if (definable) {
										// FindCode
										Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_iter = Collections_SynchronizedMap_iter_Map.getNodeEquivalent(wr_iter) ;
										if ((node_iter != null) ) {
											ICollections_SynchronizedMapMonitor itmdLeaf = node_iter.getValue2() ;
											if ((itmdLeaf != null) ) {
												if (((itmdLeaf.getDisable() > sourceMonitor.getTau() ) || ((itmdLeaf.getTau() > 0) && (itmdLeaf.getTau() < sourceMonitor.getTau() ) ) ) ) {
													definable = false;
												}
											}
										}
									}
									// D(X) defineTo:1--5 for <syncMap, col, iter>
									if (definable) {
										// FindCode
										Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
										if ((node_syncMap != null) ) {
											Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
											if ((node_syncMap_col != null) ) {
												ICollections_SynchronizedMapMonitor node_syncMap_col_iter = node_syncMap_col.getValue1() .getNodeEquivalent(wr_iter) ;
												if ((node_syncMap_col_iter != null) ) {
													if (((node_syncMap_col_iter.getDisable() > sourceMonitor.getTau() ) || ((node_syncMap_col_iter.getTau() > 0) && (node_syncMap_col_iter.getTau() < sourceMonitor.getTau() ) ) ) ) {
														definable = false;
													}
												}
											}
										}
									}
									if (definable) {
										// D(X) defineTo:6
										Collections_SynchronizedMapMonitor created = (Collections_SynchronizedMapMonitor)sourceMonitor.clone() ;
										destLastMap.putNode(wr_iter, created) ;
										// D(X) defineTo:7 for <col, iter>
										{
											// InsertMonitor
											MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col = Collections_SynchronizedMap_col_iter_Map.getNodeEquivalent(wr_col) ;
											if ((node_col == null) ) {
												node_col = new MapOfSetMonitor<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ;
												Collections_SynchronizedMap_col_iter_Map.putNode(wr_col, node_col) ;
											}
											Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_col_iter = node_col.getNodeEquivalent(wr_iter) ;
											if ((node_col_iter == null) ) {
												node_col_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
												node_col.putNode(wr_iter, node_col_iter) ;
												node_col_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_col_iter.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <iter>
										{
											// InsertMonitor
											Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_iter = Collections_SynchronizedMap_iter_Map.getNodeEquivalent(wr_iter) ;
											if ((node_iter == null) ) {
												node_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
												Collections_SynchronizedMap_iter_Map.putNode(wr_iter, node_iter) ;
												node_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_iter.getValue1() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <syncMap>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
											if ((node_syncMap == null) ) {
												node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
												Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
												node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
												node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_syncMap.getValue2() ;
											targetSet.add(created) ;
										}
										// D(X) defineTo:7 for <syncMap, col>
										{
											// InsertMonitor
											Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor> node_syncMap = Collections_SynchronizedMap_syncMap_col_iter_Map.getNodeEquivalent(wr_syncMap) ;
											if ((node_syncMap == null) ) {
												node_syncMap = new Tuple3<MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, Collections_SynchronizedMapMonitor>() ;
												Collections_SynchronizedMap_syncMap_col_iter_Map.putNode(wr_syncMap, node_syncMap) ;
												node_syncMap.setValue1(new MapOfAll<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>(1) ) ;
												node_syncMap.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_syncMap_col = node_syncMap.getValue1() .getNodeEquivalent(wr_col) ;
											if ((node_syncMap_col == null) ) {
												node_syncMap_col = new Tuple3<MapOfMonitor<ICollections_SynchronizedMapMonitor>, Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
												node_syncMap.getValue1() .putNode(wr_col, node_syncMap_col) ;
												node_syncMap_col.setValue1(new MapOfMonitor<ICollections_SynchronizedMapMonitor>(2) ) ;
												node_syncMap_col.setValue2(new Collections_SynchronizedMapMonitor_Set() ) ;
											}
											Collections_SynchronizedMapMonitor_Set targetSet = node_syncMap_col.getValue2() ;
											targetSet.add(created) ;
										}
									}
								}
							}
						}
						sourceSet.eraseRange(numalive) ;
					}
				}
				// D(X) main:6
				ICollections_SynchronizedMapMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					Collections_SynchronizedMapDisableHolder holder = new Collections_SynchronizedMapDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Collections_SynchronizedMap_timestamp++) ;
			}
			// D(X) main:8--9
			Collections_SynchronizedMapMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_asyncCreateIter(col, iter);

			if ((cachehit == false) ) {
				Collections_SynchronizedMap_col_iter_Map_cachekey_col = col;
				Collections_SynchronizedMap_col_iter_Map_cachekey_iter = iter;
				Collections_SynchronizedMap_col_iter_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Collections_SynchronizedMap_accessIterEvent(Iterator iter) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Collections_SynchronizedMap_activated) {
			CachedWeakReference wr_iter = null;
			Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> matchedEntry = null;
			boolean cachehit = false;
			if ((iter == Collections_SynchronizedMap_iter_Map_cachekey_iter) ) {
				matchedEntry = Collections_SynchronizedMap_iter_Map_cachevalue;
				cachehit = true;
			}
			else {
				wr_iter = new CachedWeakReference(iter) ;
				{
					// FindOrCreateEntry
					Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor> node_iter = Collections_SynchronizedMap_iter_Map.getNodeEquivalent(wr_iter) ;
					if ((node_iter == null) ) {
						node_iter = new Tuple2<Collections_SynchronizedMapMonitor_Set, ICollections_SynchronizedMapMonitor>() ;
						Collections_SynchronizedMap_iter_Map.putNode(wr_iter, node_iter) ;
						node_iter.setValue1(new Collections_SynchronizedMapMonitor_Set() ) ;
					}
					matchedEntry = node_iter;
				}
			}
			// D(X) main:1
			ICollections_SynchronizedMapMonitor matchedLeaf = matchedEntry.getValue2() ;
			if ((matchedLeaf == null) ) {
				if ((wr_iter == null) ) {
					wr_iter = new CachedWeakReference(iter) ;
				}
				// D(X) main:6
				ICollections_SynchronizedMapMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
				if ((disableUpdatedLeaf == null) ) {
					Collections_SynchronizedMapDisableHolder holder = new Collections_SynchronizedMapDisableHolder(-1) ;
					matchedEntry.setValue2(holder) ;
					disableUpdatedLeaf = holder;
				}
				disableUpdatedLeaf.setDisable(Collections_SynchronizedMap_timestamp++) ;
			}
			// D(X) main:8--9
			Collections_SynchronizedMapMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
			stateTransitionedSet.event_accessIter(iter);

			if ((cachehit == false) ) {
				Collections_SynchronizedMap_iter_Map_cachekey_iter = iter;
				Collections_SynchronizedMap_iter_Map_cachevalue = matchedEntry;
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void TreeMap_Comparable_createEvent(Map src) {
		TreeMap_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		TreeMap_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = TreeMap_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			TreeMap_ComparableRawMonitor created = new TreeMap_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_create(src);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void TreeMap_Comparable_putEvent(Object key) {
		TreeMap_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		TreeMap_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = TreeMap_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			TreeMap_ComparableRawMonitor created = new TreeMap_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_put(key);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void TreeMap_Comparable_putallEvent(Map src) {
		TreeMap_Comparable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		TreeMap_ComparableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = TreeMap_Comparable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			TreeMap_ComparableRawMonitor created = new TreeMap_ComparableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_putall(src);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_ReuseAddress_create_boundEvent(ServerSocket sock) {
		ServerSocket_ReuseAddress_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_ReuseAddressMonitor> matchedLastMap = null;
		ServerSocket_ReuseAddressMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_ReuseAddress_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_ReuseAddress_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_ReuseAddressMonitor> itmdMap = ServerSocket_ReuseAddress_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_ReuseAddressMonitor node_sock = ServerSocket_ReuseAddress_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_ReuseAddressMonitor created = new ServerSocket_ReuseAddressMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_bound(sock);
		if(matchedEntryfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServerSocket_ReuseAddress_sock_Map_cachekey_sock = sock;
			ServerSocket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_ReuseAddress_create_unboundEvent(ServerSocket sock) {
		ServerSocket_ReuseAddress_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_ReuseAddressMonitor> matchedLastMap = null;
		ServerSocket_ReuseAddressMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_ReuseAddress_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_ReuseAddress_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_ReuseAddressMonitor> itmdMap = ServerSocket_ReuseAddress_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_ReuseAddressMonitor node_sock = ServerSocket_ReuseAddress_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_ReuseAddressMonitor created = new ServerSocket_ReuseAddressMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unbound(sock);
		if(matchedEntryfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServerSocket_ReuseAddress_sock_Map_cachekey_sock = sock;
			ServerSocket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_ReuseAddress_bindEvent(ServerSocket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_ReuseAddress_activated) {
			ServerSocket_ReuseAddressMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_ReuseAddress_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_ReuseAddress_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_ReuseAddressMonitor node_sock = ServerSocket_ReuseAddress_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_bind(sock);
				if(matchedEntryfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServerSocket_ReuseAddress_sock_Map_cachekey_sock = sock;
					ServerSocket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_ReuseAddress_setEvent(ServerSocket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_ReuseAddress_activated) {
			ServerSocket_ReuseAddressMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_ReuseAddress_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_ReuseAddress_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_ReuseAddressMonitor node_sock = ServerSocket_ReuseAddress_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock);
				if(matchedEntryfinalMonitor.ServerSocket_ReuseAddressMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServerSocket_ReuseAddress_sock_Map_cachekey_sock = sock;
					ServerSocket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLEncoder_EncodeUTF8_encodeEvent(String enc) {
		URLEncoder_EncodeUTF8_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		URLEncoder_EncodeUTF8RawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = URLEncoder_EncodeUTF8__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			URLEncoder_EncodeUTF8RawMonitor created = new URLEncoder_EncodeUTF8RawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_encode(enc);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InetAddress_IsReachable_isreachableEvent(int timeout) {
		InetAddress_IsReachable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		InetAddress_IsReachableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = InetAddress_IsReachable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			InetAddress_IsReachableRawMonitor created = new InetAddress_IsReachableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_isreachable(timeout);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InetAddress_IsReachable_isreachableEvent(int ttl, int timeout) {
		InetAddress_IsReachable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		InetAddress_IsReachableRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = InetAddress_IsReachable__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			InetAddress_IsReachableRawMonitor created = new InetAddress_IsReachableRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_isreachable(ttl, timeout);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_CloseInput_getinputEvent(Socket sock, InputStream input) {
		Socket_CloseInput_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		CachedWeakReference wr_input = null;
		MapOfMonitor<Socket_CloseInputMonitor> matchedLastMap = null;
		Socket_CloseInputMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((input == Socket_CloseInput_sock_input_Map_cachekey_input) && (sock == Socket_CloseInput_sock_input_Map_cachekey_sock) ) ) {
			matchedEntry = Socket_CloseInput_sock_input_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			wr_input = new CachedWeakReference(input) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set> node_sock = Socket_CloseInput_sock_input_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set>() ;
					Socket_CloseInput_sock_input_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_CloseInputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_CloseInputMonitor_Set() ) ;
				}
				MapOfMonitor<Socket_CloseInputMonitor> itmdMap = node_sock.getValue1() ;
				matchedLastMap = itmdMap;
				Socket_CloseInputMonitor node_sock_input = node_sock.getValue1() .getNodeEquivalent(wr_input) ;
				matchedEntry = node_sock_input;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			if ((wr_input == null) ) {
				wr_input = new CachedWeakReference(input) ;
			}
			// D(X) main:4
			Socket_CloseInputMonitor created = new Socket_CloseInputMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_input, created) ;
			// D(X) defineNew:5 for <input>
			{
				// InsertMonitor
				Socket_CloseInputMonitor_Set node_input = Socket_CloseInput_input_Map.getNodeEquivalent(wr_input) ;
				if ((node_input == null) ) {
					node_input = new Socket_CloseInputMonitor_Set() ;
					Socket_CloseInput_input_Map.putNode(wr_input, node_input) ;
				}
				node_input.add(created) ;
			}
			// D(X) defineNew:5 for <sock>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set> node_sock = Socket_CloseInput_sock_input_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set>() ;
					Socket_CloseInput_sock_input_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_CloseInputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_CloseInputMonitor_Set() ) ;
				}
				Socket_CloseInputMonitor_Set targetSet = node_sock.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final Socket_CloseInputMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getinput(sock, input);
		if(matchedEntryfinalMonitor.Socket_CloseInputMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_CloseInput_sock_input_Map_cachekey_input = input;
			Socket_CloseInput_sock_input_Map_cachekey_sock = sock;
			Socket_CloseInput_sock_input_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_CloseInput_closeEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_CloseInput_activated) {
			Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_CloseInput_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_CloseInput_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<Socket_CloseInputMonitor>, Socket_CloseInputMonitor_Set> node_sock = Socket_CloseInput_sock_input_Map.getNodeWithStrongRef(sock) ;
				if ((node_sock != null) ) {
					matchedEntry = node_sock;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				Socket_CloseInputMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_close(sock);

					if ((cachehit == false) ) {
						Socket_CloseInput_sock_Map_cachekey_sock = sock;
						Socket_CloseInput_sock_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_CloseInput_useEvent(InputStream input) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_CloseInput_activated) {
			Socket_CloseInputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((input == Socket_CloseInput_input_Map_cachekey_input) ) {
				matchedEntry = Socket_CloseInput_input_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_CloseInputMonitor_Set node_input = Socket_CloseInput_input_Map.getNodeWithStrongRef(input) ;
				if ((node_input != null) ) {
					matchedEntry = node_input;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_use(input);

				if ((cachehit == false) ) {
					Socket_CloseInput_input_Map_cachekey_input = input;
					Socket_CloseInput_input_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void HttpCookie_Name_constructEvent(String name) {
		HttpCookie_Name_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		HttpCookie_NameRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = HttpCookie_Name__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			HttpCookie_NameRawMonitor created = new HttpCookie_NameRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct(name);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void DatagramPacket_Length_construct_lenEvent(byte[] buffer, int length) {
		DatagramPacket_Length_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		DatagramPacket_LengthRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = DatagramPacket_Length__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			DatagramPacket_LengthRawMonitor created = new DatagramPacket_LengthRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct_len(buffer, length);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void DatagramPacket_Length_construct_offlenEvent(byte[] buffer, int offset, int length) {
		DatagramPacket_Length_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		DatagramPacket_LengthRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = DatagramPacket_Length__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			DatagramPacket_LengthRawMonitor created = new DatagramPacket_LengthRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct_offlen(buffer, offset, length);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_LargeReceiveBuffer_create_boundEvent(ServerSocket sock) {
		ServerSocket_LargeReceiveBuffer_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_LargeReceiveBufferMonitor> matchedLastMap = null;
		ServerSocket_LargeReceiveBufferMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_LargeReceiveBufferMonitor> itmdMap = ServerSocket_LargeReceiveBuffer_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_LargeReceiveBufferMonitor node_sock = ServerSocket_LargeReceiveBuffer_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_LargeReceiveBufferMonitor created = new ServerSocket_LargeReceiveBufferMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_bound(sock);
		if(matchedEntryfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
			ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_LargeReceiveBuffer_create_unboundEvent(ServerSocket sock) {
		ServerSocket_LargeReceiveBuffer_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_LargeReceiveBufferMonitor> matchedLastMap = null;
		ServerSocket_LargeReceiveBufferMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_LargeReceiveBufferMonitor> itmdMap = ServerSocket_LargeReceiveBuffer_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_LargeReceiveBufferMonitor node_sock = ServerSocket_LargeReceiveBuffer_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_LargeReceiveBufferMonitor created = new ServerSocket_LargeReceiveBufferMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unbound(sock);
		if(matchedEntryfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
			ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_LargeReceiveBuffer_bindEvent(ServerSocket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_LargeReceiveBuffer_activated) {
			ServerSocket_LargeReceiveBufferMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_LargeReceiveBufferMonitor node_sock = ServerSocket_LargeReceiveBuffer_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_bind(sock);
				if(matchedEntryfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
					ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_LargeReceiveBuffer_setEvent(ServerSocket sock, int size) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_LargeReceiveBuffer_activated) {
			ServerSocket_LargeReceiveBufferMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_LargeReceiveBufferMonitor node_sock = ServerSocket_LargeReceiveBuffer_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock, size);
				if(matchedEntryfinalMonitor.ServerSocket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServerSocket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
					ServerSocket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingInput_getinputEvent(Socket sock, InputStream input) {
		Socket_SetTimeoutBeforeBlockingInput_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		CachedWeakReference wr_input = null;
		MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor> matchedLastMap = null;
		Socket_SetTimeoutBeforeBlockingInputMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((input == Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachekey_input) && (sock == Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachekey_sock) ) ) {
			matchedEntry = Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			wr_input = new CachedWeakReference(input) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set> node_sock = Socket_SetTimeoutBeforeBlockingInput_sock_input_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set>() ;
					Socket_SetTimeoutBeforeBlockingInput_sock_input_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_SetTimeoutBeforeBlockingInputMonitor_Set() ) ;
				}
				MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor> itmdMap = node_sock.getValue1() ;
				matchedLastMap = itmdMap;
				Socket_SetTimeoutBeforeBlockingInputMonitor node_sock_input = node_sock.getValue1() .getNodeEquivalent(wr_input) ;
				matchedEntry = node_sock_input;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			if ((wr_input == null) ) {
				wr_input = new CachedWeakReference(input) ;
			}
			// D(X) main:4
			Socket_SetTimeoutBeforeBlockingInputMonitor created = new Socket_SetTimeoutBeforeBlockingInputMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_input, created) ;
			// D(X) defineNew:5 for <input>
			{
				// InsertMonitor
				Socket_SetTimeoutBeforeBlockingInputMonitor_Set node_input = Socket_SetTimeoutBeforeBlockingInput_input_Map.getNodeEquivalent(wr_input) ;
				if ((node_input == null) ) {
					node_input = new Socket_SetTimeoutBeforeBlockingInputMonitor_Set() ;
					Socket_SetTimeoutBeforeBlockingInput_input_Map.putNode(wr_input, node_input) ;
				}
				node_input.add(created) ;
			}
			// D(X) defineNew:5 for <sock>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set> node_sock = Socket_SetTimeoutBeforeBlockingInput_sock_input_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set>() ;
					Socket_SetTimeoutBeforeBlockingInput_sock_input_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_SetTimeoutBeforeBlockingInputMonitor_Set() ) ;
				}
				Socket_SetTimeoutBeforeBlockingInputMonitor_Set targetSet = node_sock.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final Socket_SetTimeoutBeforeBlockingInputMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getinput(sock, input);
		if(matchedEntryfinalMonitor.Socket_SetTimeoutBeforeBlockingInputMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachekey_input = input;
			Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachekey_sock = sock;
			Socket_SetTimeoutBeforeBlockingInput_sock_input_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingInput_enterEvent(InputStream input) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_SetTimeoutBeforeBlockingInput_activated) {
			Socket_SetTimeoutBeforeBlockingInputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((input == Socket_SetTimeoutBeforeBlockingInput_input_Map_cachekey_input) ) {
				matchedEntry = Socket_SetTimeoutBeforeBlockingInput_input_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_SetTimeoutBeforeBlockingInputMonitor_Set node_input = Socket_SetTimeoutBeforeBlockingInput_input_Map.getNodeWithStrongRef(input) ;
				if ((node_input != null) ) {
					matchedEntry = node_input;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_enter(input);

				if ((cachehit == false) ) {
					Socket_SetTimeoutBeforeBlockingInput_input_Map_cachekey_input = input;
					Socket_SetTimeoutBeforeBlockingInput_input_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingInput_leaveEvent(InputStream input) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_SetTimeoutBeforeBlockingInput_activated) {
			Socket_SetTimeoutBeforeBlockingInputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((input == Socket_SetTimeoutBeforeBlockingInput_input_Map_cachekey_input) ) {
				matchedEntry = Socket_SetTimeoutBeforeBlockingInput_input_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_SetTimeoutBeforeBlockingInputMonitor_Set node_input = Socket_SetTimeoutBeforeBlockingInput_input_Map.getNodeWithStrongRef(input) ;
				if ((node_input != null) ) {
					matchedEntry = node_input;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_leave(input);

				if ((cachehit == false) ) {
					Socket_SetTimeoutBeforeBlockingInput_input_Map_cachekey_input = input;
					Socket_SetTimeoutBeforeBlockingInput_input_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingInput_setEvent(Socket sock, int timeout) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_SetTimeoutBeforeBlockingInput_activated) {
			Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_SetTimeoutBeforeBlockingInput_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_SetTimeoutBeforeBlockingInput_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingInputMonitor>, Socket_SetTimeoutBeforeBlockingInputMonitor_Set> node_sock = Socket_SetTimeoutBeforeBlockingInput_sock_input_Map.getNodeWithStrongRef(sock) ;
				if ((node_sock != null) ) {
					matchedEntry = node_sock;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				Socket_SetTimeoutBeforeBlockingInputMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_set(sock, timeout);

					if ((cachehit == false) ) {
						Socket_SetTimeoutBeforeBlockingInput_sock_Map_cachekey_sock = sock;
						Socket_SetTimeoutBeforeBlockingInput_sock_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void DatagramSocket_Port_construct_portEvent(int port) {
		DatagramSocket_Port_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		DatagramSocket_PortRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = DatagramSocket_Port__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			DatagramSocket_PortRawMonitor created = new DatagramSocket_PortRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct_port(port);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseSocket_closeEvent(Socket sock) {
		Socket_ReuseSocket_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_ReuseSocketMonitor> matchedLastMap = null;
		Socket_ReuseSocketMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_ReuseSocket_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_ReuseSocket_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_ReuseSocketMonitor> itmdMap = Socket_ReuseSocket_sock_Map;
				matchedLastMap = itmdMap;
				Socket_ReuseSocketMonitor node_sock = Socket_ReuseSocket_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_ReuseSocketMonitor created = new Socket_ReuseSocketMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_ReuseSocketMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_close(sock);
		if(matchedEntryfinalMonitor.Socket_ReuseSocketMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_ReuseSocket_sock_Map_cachekey_sock = sock;
			Socket_ReuseSocket_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseSocket_bindEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_ReuseSocket_activated) {
			Socket_ReuseSocketMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_ReuseSocket_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_ReuseSocket_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_ReuseSocketMonitor node_sock = Socket_ReuseSocket_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_ReuseSocketMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_bind(sock);
				if(matchedEntryfinalMonitor.Socket_ReuseSocketMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_ReuseSocket_sock_Map_cachekey_sock = sock;
					Socket_ReuseSocket_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseSocket_connectEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_ReuseSocket_activated) {
			Socket_ReuseSocketMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_ReuseSocket_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_ReuseSocket_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_ReuseSocketMonitor node_sock = Socket_ReuseSocket_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_ReuseSocketMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect(sock);
				if(matchedEntryfinalMonitor.Socket_ReuseSocketMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_ReuseSocket_sock_Map_cachekey_sock = sock;
					Socket_ReuseSocket_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PasswordAuthentication_FillZeroPassword_readEvent(Object pwd) {
		PasswordAuthentication_FillZeroPassword_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_pwd = null;
		MapOfMonitor<PasswordAuthentication_FillZeroPasswordMonitor> matchedLastMap = null;
		PasswordAuthentication_FillZeroPasswordMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((pwd == PasswordAuthentication_FillZeroPassword_pwd_Map_cachekey_pwd) ) {
			matchedEntry = PasswordAuthentication_FillZeroPassword_pwd_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_pwd = new CachedWeakReference(pwd) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PasswordAuthentication_FillZeroPasswordMonitor> itmdMap = PasswordAuthentication_FillZeroPassword_pwd_Map;
				matchedLastMap = itmdMap;
				PasswordAuthentication_FillZeroPasswordMonitor node_pwd = PasswordAuthentication_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
				matchedEntry = node_pwd;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_pwd == null) ) {
				wr_pwd = new CachedWeakReference(pwd) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				PasswordAuthentication_FillZeroPasswordMonitor sourceLeaf = null;
				{
					// FindCode
					PasswordAuthentication_FillZeroPasswordMonitor itmdLeaf = PasswordAuthentication_FillZeroPassword__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <pwd>
					if (definable) {
						// FindCode
						PasswordAuthentication_FillZeroPasswordMonitor node_pwd = PasswordAuthentication_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
						if ((node_pwd != null) ) {
							if (((node_pwd.getDisable() > sourceLeaf.getTau() ) || ((node_pwd.getTau() > 0) && (node_pwd.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						PasswordAuthentication_FillZeroPasswordMonitor created = (PasswordAuthentication_FillZeroPasswordMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_pwd, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							PasswordAuthentication_FillZeroPasswordMonitor_Set targetSet = PasswordAuthentication_FillZeroPassword__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				PasswordAuthentication_FillZeroPasswordMonitor created = new PasswordAuthentication_FillZeroPasswordMonitor(PasswordAuthentication_FillZeroPassword_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_pwd, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					PasswordAuthentication_FillZeroPasswordMonitor_Set targetSet = PasswordAuthentication_FillZeroPassword__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(PasswordAuthentication_FillZeroPassword_timestamp++) ;
		}
		// D(X) main:8--9
		final PasswordAuthentication_FillZeroPasswordMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_read(pwd);
		if(matchedEntryfinalMonitor.PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			PasswordAuthentication_FillZeroPassword_pwd_Map_cachekey_pwd = pwd;
			PasswordAuthentication_FillZeroPassword_pwd_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PasswordAuthentication_FillZeroPassword_obliterateEvent(Object pwd) {
		PasswordAuthentication_FillZeroPassword_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_pwd = null;
		MapOfMonitor<PasswordAuthentication_FillZeroPasswordMonitor> matchedLastMap = null;
		PasswordAuthentication_FillZeroPasswordMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((pwd == PasswordAuthentication_FillZeroPassword_pwd_Map_cachekey_pwd) ) {
			matchedEntry = PasswordAuthentication_FillZeroPassword_pwd_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_pwd = new CachedWeakReference(pwd) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<PasswordAuthentication_FillZeroPasswordMonitor> itmdMap = PasswordAuthentication_FillZeroPassword_pwd_Map;
				matchedLastMap = itmdMap;
				PasswordAuthentication_FillZeroPasswordMonitor node_pwd = PasswordAuthentication_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
				matchedEntry = node_pwd;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_pwd == null) ) {
				wr_pwd = new CachedWeakReference(pwd) ;
			}
			{
				// D(X) createNewMonitorStates:4 when Dom(theta'') = <>
				PasswordAuthentication_FillZeroPasswordMonitor sourceLeaf = null;
				{
					// FindCode
					PasswordAuthentication_FillZeroPasswordMonitor itmdLeaf = PasswordAuthentication_FillZeroPassword__Map.getValue2() ;
					sourceLeaf = itmdLeaf;
				}
				if ((sourceLeaf != null) ) {
					boolean definable = true;
					// D(X) defineTo:1--5 for <pwd>
					if (definable) {
						// FindCode
						PasswordAuthentication_FillZeroPasswordMonitor node_pwd = PasswordAuthentication_FillZeroPassword_pwd_Map.getNodeEquivalent(wr_pwd) ;
						if ((node_pwd != null) ) {
							if (((node_pwd.getDisable() > sourceLeaf.getTau() ) || ((node_pwd.getTau() > 0) && (node_pwd.getTau() < sourceLeaf.getTau() ) ) ) ) {
								definable = false;
							}
						}
					}
					if (definable) {
						// D(X) defineTo:6
						PasswordAuthentication_FillZeroPasswordMonitor created = (PasswordAuthentication_FillZeroPasswordMonitor)sourceLeaf.clone() ;
						matchedEntry = created;
						matchedLastMap.putNode(wr_pwd, created) ;
						// D(X) defineTo:7 for <>
						{
							// InsertMonitor
							PasswordAuthentication_FillZeroPasswordMonitor_Set targetSet = PasswordAuthentication_FillZeroPassword__Map.getValue1() ;
							targetSet.add(created) ;
						}
					}
				}
			}
			if ((matchedEntry == null) ) {
				// D(X) main:4
				PasswordAuthentication_FillZeroPasswordMonitor created = new PasswordAuthentication_FillZeroPasswordMonitor(PasswordAuthentication_FillZeroPassword_timestamp++) ;
				matchedEntry = created;
				matchedLastMap.putNode(wr_pwd, created) ;
				// D(X) defineNew:5 for <>
				{
					// InsertMonitor
					PasswordAuthentication_FillZeroPasswordMonitor_Set targetSet = PasswordAuthentication_FillZeroPassword__Map.getValue1() ;
					targetSet.add(created) ;
				}
			}
			// D(X) main:6
			matchedEntry.setDisable(PasswordAuthentication_FillZeroPassword_timestamp++) ;
		}
		// D(X) main:8--9
		final PasswordAuthentication_FillZeroPasswordMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_obliterate(pwd);
		if(matchedEntryfinalMonitor.PasswordAuthentication_FillZeroPasswordMonitor_Prop_1_Category_violation) {
			matchedEntryfinalMonitor.Prop_1_handler_violation();
		}

		if ((cachehit == false) ) {
			PasswordAuthentication_FillZeroPassword_pwd_Map_cachekey_pwd = pwd;
			PasswordAuthentication_FillZeroPassword_pwd_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void PasswordAuthentication_FillZeroPassword_endProgEvent() {
		PasswordAuthentication_FillZeroPassword_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Tuple2<PasswordAuthentication_FillZeroPasswordMonitor_Set, PasswordAuthentication_FillZeroPasswordMonitor> matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = PasswordAuthentication_FillZeroPassword__Map;
		}
		// D(X) main:1
		PasswordAuthentication_FillZeroPasswordMonitor matchedLeaf = matchedEntry.getValue2() ;
		if ((matchedLeaf == null) ) {
			if ((matchedLeaf == null) ) {
				// D(X) main:4
				PasswordAuthentication_FillZeroPasswordMonitor created = new PasswordAuthentication_FillZeroPasswordMonitor(PasswordAuthentication_FillZeroPassword_timestamp++) ;
				matchedEntry.setValue2(created) ;
				PasswordAuthentication_FillZeroPasswordMonitor_Set enclosingSet = matchedEntry.getValue1() ;
				enclosingSet.add(created) ;
			}
			// D(X) main:6
			PasswordAuthentication_FillZeroPasswordMonitor disableUpdatedLeaf = matchedEntry.getValue2() ;
			disableUpdatedLeaf.setDisable(PasswordAuthentication_FillZeroPassword_timestamp++) ;
		}
		// D(X) main:8--9
		PasswordAuthentication_FillZeroPasswordMonitor_Set stateTransitionedSet = matchedEntry.getValue1() ;
		stateTransitionedSet.event_endProg();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ContentHandler_GetContent_get_contentEvent() {
		ContentHandler_GetContent_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ContentHandler_GetContentRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ContentHandler_GetContent__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ContentHandler_GetContentRawMonitor created = new ContentHandler_GetContentRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_get_content();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_PerformancePreferences_create_boundEvent(ServerSocket sock) {
		ServerSocket_PerformancePreferences_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_PerformancePreferencesMonitor> matchedLastMap = null;
		ServerSocket_PerformancePreferencesMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_PerformancePreferences_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_PerformancePreferences_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_PerformancePreferencesMonitor> itmdMap = ServerSocket_PerformancePreferences_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_PerformancePreferencesMonitor node_sock = ServerSocket_PerformancePreferences_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_PerformancePreferencesMonitor created = new ServerSocket_PerformancePreferencesMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_bound(sock);
		if(matchedEntryfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServerSocket_PerformancePreferences_sock_Map_cachekey_sock = sock;
			ServerSocket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_PerformancePreferences_create_unboundEvent(ServerSocket sock) {
		ServerSocket_PerformancePreferences_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_PerformancePreferencesMonitor> matchedLastMap = null;
		ServerSocket_PerformancePreferencesMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_PerformancePreferences_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_PerformancePreferences_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_PerformancePreferencesMonitor> itmdMap = ServerSocket_PerformancePreferences_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_PerformancePreferencesMonitor node_sock = ServerSocket_PerformancePreferences_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_PerformancePreferencesMonitor created = new ServerSocket_PerformancePreferencesMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unbound(sock);
		if(matchedEntryfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ServerSocket_PerformancePreferences_sock_Map_cachekey_sock = sock;
			ServerSocket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_PerformancePreferences_bindEvent(ServerSocket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_PerformancePreferences_activated) {
			ServerSocket_PerformancePreferencesMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_PerformancePreferences_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_PerformancePreferences_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_PerformancePreferencesMonitor node_sock = ServerSocket_PerformancePreferences_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_bind(sock);
				if(matchedEntryfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServerSocket_PerformancePreferences_sock_Map_cachekey_sock = sock;
					ServerSocket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_PerformancePreferences_setEvent(ServerSocket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_PerformancePreferences_activated) {
			ServerSocket_PerformancePreferencesMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_PerformancePreferences_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_PerformancePreferences_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_PerformancePreferencesMonitor node_sock = ServerSocket_PerformancePreferences_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock);
				if(matchedEntryfinalMonitor.ServerSocket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ServerSocket_PerformancePreferences_sock_Map_cachekey_sock = sock;
					ServerSocket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void DatagramSocket_TrafficClass_settcEvent(DatagramSocket socket, int tc) {
		DatagramSocket_TrafficClass_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		DatagramSocket_TrafficClassRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = DatagramSocket_TrafficClass__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			DatagramSocket_TrafficClassRawMonitor created = new DatagramSocket_TrafficClassRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_settc(socket, tc);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SocketPermission_Actions_constructEvent(String actions) {
		SocketPermission_Actions_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		SocketPermission_ActionsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = SocketPermission_Actions__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			SocketPermission_ActionsRawMonitor created = new SocketPermission_ActionsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct(actions);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingOutput_getoutputEvent(Socket sock, OutputStream output) {
		Socket_SetTimeoutBeforeBlockingOutput_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_output = null;
		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor> matchedLastMap = null;
		Socket_SetTimeoutBeforeBlockingOutputMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((output == Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachekey_output) && (sock == Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachekey_sock) ) ) {
			matchedEntry = Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			wr_output = new CachedWeakReference(output) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> node_sock = Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set>() ;
					Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_SetTimeoutBeforeBlockingOutputMonitor_Set() ) ;
				}
				MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor> itmdMap = node_sock.getValue1() ;
				matchedLastMap = itmdMap;
				Socket_SetTimeoutBeforeBlockingOutputMonitor node_sock_output = node_sock.getValue1() .getNodeEquivalent(wr_output) ;
				matchedEntry = node_sock_output;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			if ((wr_output == null) ) {
				wr_output = new CachedWeakReference(output) ;
			}
			// D(X) main:4
			Socket_SetTimeoutBeforeBlockingOutputMonitor created = new Socket_SetTimeoutBeforeBlockingOutputMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_output, created) ;
			// D(X) defineNew:5 for <output>
			{
				// InsertMonitor
				Socket_SetTimeoutBeforeBlockingOutputMonitor_Set node_output = Socket_SetTimeoutBeforeBlockingOutput_output_Map.getNodeEquivalent(wr_output) ;
				if ((node_output == null) ) {
					node_output = new Socket_SetTimeoutBeforeBlockingOutputMonitor_Set() ;
					Socket_SetTimeoutBeforeBlockingOutput_output_Map.putNode(wr_output, node_output) ;
				}
				node_output.add(created) ;
			}
			// D(X) defineNew:5 for <sock>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> node_sock = Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set>() ;
					Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_SetTimeoutBeforeBlockingOutputMonitor_Set() ) ;
				}
				Socket_SetTimeoutBeforeBlockingOutputMonitor_Set targetSet = node_sock.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final Socket_SetTimeoutBeforeBlockingOutputMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getoutput(sock, output);
		if(matchedEntryfinalMonitor.Socket_SetTimeoutBeforeBlockingOutputMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachekey_output = output;
			Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachekey_sock = sock;
			Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingOutput_enterEvent(OutputStream output) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_SetTimeoutBeforeBlockingOutput_activated) {
			Socket_SetTimeoutBeforeBlockingOutputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((output == Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachekey_output) ) {
				matchedEntry = Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_SetTimeoutBeforeBlockingOutputMonitor_Set node_output = Socket_SetTimeoutBeforeBlockingOutput_output_Map.getNodeWithStrongRef(output) ;
				if ((node_output != null) ) {
					matchedEntry = node_output;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_enter(output);

				if ((cachehit == false) ) {
					Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachekey_output = output;
					Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingOutput_leaveEvent(OutputStream output) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_SetTimeoutBeforeBlockingOutput_activated) {
			Socket_SetTimeoutBeforeBlockingOutputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((output == Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachekey_output) ) {
				matchedEntry = Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_SetTimeoutBeforeBlockingOutputMonitor_Set node_output = Socket_SetTimeoutBeforeBlockingOutput_output_Map.getNodeWithStrongRef(output) ;
				if ((node_output != null) ) {
					matchedEntry = node_output;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_leave(output);

				if ((cachehit == false) ) {
					Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachekey_output = output;
					Socket_SetTimeoutBeforeBlockingOutput_output_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_SetTimeoutBeforeBlockingOutput_setEvent(Socket sock, int timeout) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_SetTimeoutBeforeBlockingOutput_activated) {
			Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_SetTimeoutBeforeBlockingOutput_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_SetTimeoutBeforeBlockingOutput_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<Socket_SetTimeoutBeforeBlockingOutputMonitor>, Socket_SetTimeoutBeforeBlockingOutputMonitor_Set> node_sock = Socket_SetTimeoutBeforeBlockingOutput_sock_output_Map.getNodeWithStrongRef(sock) ;
				if ((node_sock != null) ) {
					matchedEntry = node_sock;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				Socket_SetTimeoutBeforeBlockingOutputMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_set(sock, timeout);

					if ((cachehit == false) ) {
						Socket_SetTimeoutBeforeBlockingOutput_sock_Map_cachekey_sock = sock;
						Socket_SetTimeoutBeforeBlockingOutput_sock_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_LargeReceiveBuffer_create_connectedEvent(Socket sock) {
		Socket_LargeReceiveBuffer_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_LargeReceiveBufferMonitor> matchedLastMap = null;
		Socket_LargeReceiveBufferMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_LargeReceiveBuffer_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_LargeReceiveBufferMonitor> itmdMap = Socket_LargeReceiveBuffer_sock_Map;
				matchedLastMap = itmdMap;
				Socket_LargeReceiveBufferMonitor node_sock = Socket_LargeReceiveBuffer_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_LargeReceiveBufferMonitor created = new Socket_LargeReceiveBufferMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_connected(sock);
		if(matchedEntryfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
			Socket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_LargeReceiveBuffer_create_unconnectedEvent(Socket sock) {
		Socket_LargeReceiveBuffer_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_LargeReceiveBufferMonitor> matchedLastMap = null;
		Socket_LargeReceiveBufferMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_LargeReceiveBuffer_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_LargeReceiveBufferMonitor> itmdMap = Socket_LargeReceiveBuffer_sock_Map;
				matchedLastMap = itmdMap;
				Socket_LargeReceiveBufferMonitor node_sock = Socket_LargeReceiveBuffer_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_LargeReceiveBufferMonitor created = new Socket_LargeReceiveBufferMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unconnected(sock);
		if(matchedEntryfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
			Socket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_LargeReceiveBuffer_connectEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_LargeReceiveBuffer_activated) {
			Socket_LargeReceiveBufferMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_LargeReceiveBuffer_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_LargeReceiveBufferMonitor node_sock = Socket_LargeReceiveBuffer_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect(sock);
				if(matchedEntryfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
					Socket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_LargeReceiveBuffer_setEvent(Socket sock, int size) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_LargeReceiveBuffer_activated) {
			Socket_LargeReceiveBufferMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_LargeReceiveBuffer_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_LargeReceiveBuffer_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_LargeReceiveBufferMonitor node_sock = Socket_LargeReceiveBuffer_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_LargeReceiveBufferMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock, size);
				if(matchedEntryfinalMonitor.Socket_LargeReceiveBufferMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_LargeReceiveBuffer_sock_Map_cachekey_sock = sock;
					Socket_LargeReceiveBuffer_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_PerformancePreferences_create_connectedEvent(Socket sock) {
		Socket_PerformancePreferences_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_PerformancePreferencesMonitor> matchedLastMap = null;
		Socket_PerformancePreferencesMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_PerformancePreferences_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_PerformancePreferences_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_PerformancePreferencesMonitor> itmdMap = Socket_PerformancePreferences_sock_Map;
				matchedLastMap = itmdMap;
				Socket_PerformancePreferencesMonitor node_sock = Socket_PerformancePreferences_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_PerformancePreferencesMonitor created = new Socket_PerformancePreferencesMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_connected(sock);
		if(matchedEntryfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_PerformancePreferences_sock_Map_cachekey_sock = sock;
			Socket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_PerformancePreferences_create_unconnectedEvent(Socket sock) {
		Socket_PerformancePreferences_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_PerformancePreferencesMonitor> matchedLastMap = null;
		Socket_PerformancePreferencesMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_PerformancePreferences_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_PerformancePreferences_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_PerformancePreferencesMonitor> itmdMap = Socket_PerformancePreferences_sock_Map;
				matchedLastMap = itmdMap;
				Socket_PerformancePreferencesMonitor node_sock = Socket_PerformancePreferences_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_PerformancePreferencesMonitor created = new Socket_PerformancePreferencesMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unconnected(sock);
		if(matchedEntryfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_PerformancePreferences_sock_Map_cachekey_sock = sock;
			Socket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_PerformancePreferences_connectEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_PerformancePreferences_activated) {
			Socket_PerformancePreferencesMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_PerformancePreferences_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_PerformancePreferences_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_PerformancePreferencesMonitor node_sock = Socket_PerformancePreferences_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect(sock);
				if(matchedEntryfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_PerformancePreferences_sock_Map_cachekey_sock = sock;
					Socket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_PerformancePreferences_setEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_PerformancePreferences_activated) {
			Socket_PerformancePreferencesMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_PerformancePreferences_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_PerformancePreferences_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_PerformancePreferencesMonitor node_sock = Socket_PerformancePreferences_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_PerformancePreferencesMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock);
				if(matchedEntryfinalMonitor.Socket_PerformancePreferencesMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_PerformancePreferences_sock_Map_cachekey_sock = sock;
					Socket_PerformancePreferences_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLDecoder_DecodeUTF8_decodeEvent(String enc) {
		URLDecoder_DecodeUTF8_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		URLDecoder_DecodeUTF8RawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = URLDecoder_DecodeUTF8__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			URLDecoder_DecodeUTF8RawMonitor created = new URLDecoder_DecodeUTF8RawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_decode(enc);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void DatagramSocket_SoTimeout_settimeoutEvent(int timeout) {
		DatagramSocket_SoTimeout_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		DatagramSocket_SoTimeoutRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = DatagramSocket_SoTimeout__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			DatagramSocket_SoTimeoutRawMonitor created = new DatagramSocket_SoTimeoutRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_settimeout(timeout);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseAddress_create_connectedEvent(Socket sock) {
		Socket_ReuseAddress_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_ReuseAddressMonitor> matchedLastMap = null;
		Socket_ReuseAddressMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_ReuseAddress_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_ReuseAddress_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_ReuseAddressMonitor> itmdMap = Socket_ReuseAddress_sock_Map;
				matchedLastMap = itmdMap;
				Socket_ReuseAddressMonitor node_sock = Socket_ReuseAddress_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_ReuseAddressMonitor created = new Socket_ReuseAddressMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_connected(sock);
		if(matchedEntryfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_ReuseAddress_sock_Map_cachekey_sock = sock;
			Socket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseAddress_create_unconnectedEvent(Socket sock) {
		Socket_ReuseAddress_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_ReuseAddressMonitor> matchedLastMap = null;
		Socket_ReuseAddressMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_ReuseAddress_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_ReuseAddress_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_ReuseAddressMonitor> itmdMap = Socket_ReuseAddress_sock_Map;
				matchedLastMap = itmdMap;
				Socket_ReuseAddressMonitor node_sock = Socket_ReuseAddress_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_ReuseAddressMonitor created = new Socket_ReuseAddressMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unconnected(sock);
		if(matchedEntryfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_ReuseAddress_sock_Map_cachekey_sock = sock;
			Socket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseAddress_bindEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_ReuseAddress_activated) {
			Socket_ReuseAddressMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_ReuseAddress_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_ReuseAddress_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_ReuseAddressMonitor node_sock = Socket_ReuseAddress_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_bind(sock);
				if(matchedEntryfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_ReuseAddress_sock_Map_cachekey_sock = sock;
					Socket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_ReuseAddress_setEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_ReuseAddress_activated) {
			Socket_ReuseAddressMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_ReuseAddress_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_ReuseAddress_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_ReuseAddressMonitor node_sock = Socket_ReuseAddress_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_ReuseAddressMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock);
				if(matchedEntryfinalMonitor.Socket_ReuseAddressMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					Socket_ReuseAddress_sock_Map_cachekey_sock = sock;
					Socket_ReuseAddress_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void MulticastSocket_TTL_set1Event(byte ttl) {
		MulticastSocket_TTL_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		MulticastSocket_TTLRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = MulticastSocket_TTL__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			MulticastSocket_TTLRawMonitor created = new MulticastSocket_TTLRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set1(ttl);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void MulticastSocket_TTL_set2Event(int ttl) {
		MulticastSocket_TTL_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		MulticastSocket_TTLRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = MulticastSocket_TTL__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			MulticastSocket_TTLRawMonitor created = new MulticastSocket_TTLRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set2(ttl);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void InetSocketAddress_Port_constructEvent(int port) {
		InetSocketAddress_Port_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		InetSocketAddress_PortRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = InetSocketAddress_Port__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			InetSocketAddress_PortRawMonitor created = new InetSocketAddress_PortRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct(port);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_CloseOutput_getoutputEvent(Socket sock, OutputStream output) {
		Socket_CloseOutput_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_output = null;
		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_CloseOutputMonitor> matchedLastMap = null;
		Socket_CloseOutputMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((output == Socket_CloseOutput_sock_output_Map_cachekey_output) && (sock == Socket_CloseOutput_sock_output_Map_cachekey_sock) ) ) {
			matchedEntry = Socket_CloseOutput_sock_output_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			wr_output = new CachedWeakReference(output) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set> node_sock = Socket_CloseOutput_sock_output_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set>() ;
					Socket_CloseOutput_sock_output_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_CloseOutputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_CloseOutputMonitor_Set() ) ;
				}
				MapOfMonitor<Socket_CloseOutputMonitor> itmdMap = node_sock.getValue1() ;
				matchedLastMap = itmdMap;
				Socket_CloseOutputMonitor node_sock_output = node_sock.getValue1() .getNodeEquivalent(wr_output) ;
				matchedEntry = node_sock_output;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			if ((wr_output == null) ) {
				wr_output = new CachedWeakReference(output) ;
			}
			// D(X) main:4
			Socket_CloseOutputMonitor created = new Socket_CloseOutputMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_output, created) ;
			// D(X) defineNew:5 for <output>
			{
				// InsertMonitor
				Socket_CloseOutputMonitor_Set node_output = Socket_CloseOutput_output_Map.getNodeEquivalent(wr_output) ;
				if ((node_output == null) ) {
					node_output = new Socket_CloseOutputMonitor_Set() ;
					Socket_CloseOutput_output_Map.putNode(wr_output, node_output) ;
				}
				node_output.add(created) ;
			}
			// D(X) defineNew:5 for <sock>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set> node_sock = Socket_CloseOutput_sock_output_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set>() ;
					Socket_CloseOutput_sock_output_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<Socket_CloseOutputMonitor>(1) ) ;
					node_sock.setValue2(new Socket_CloseOutputMonitor_Set() ) ;
				}
				Socket_CloseOutputMonitor_Set targetSet = node_sock.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final Socket_CloseOutputMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getoutput(sock, output);
		if(matchedEntryfinalMonitor.Socket_CloseOutputMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Socket_CloseOutput_sock_output_Map_cachekey_output = output;
			Socket_CloseOutput_sock_output_Map_cachekey_sock = sock;
			Socket_CloseOutput_sock_output_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_CloseOutput_closeEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_CloseOutput_activated) {
			Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_CloseOutput_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_CloseOutput_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<Socket_CloseOutputMonitor>, Socket_CloseOutputMonitor_Set> node_sock = Socket_CloseOutput_sock_output_Map.getNodeWithStrongRef(sock) ;
				if ((node_sock != null) ) {
					matchedEntry = node_sock;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				Socket_CloseOutputMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_close(sock);

					if ((cachehit == false) ) {
						Socket_CloseOutput_sock_Map_cachekey_sock = sock;
						Socket_CloseOutput_sock_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_CloseOutput_useEvent(OutputStream output) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_CloseOutput_activated) {
			Socket_CloseOutputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((output == Socket_CloseOutput_output_Map_cachekey_output) ) {
				matchedEntry = Socket_CloseOutput_output_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_CloseOutputMonitor_Set node_output = Socket_CloseOutput_output_Map.getNodeWithStrongRef(output) ;
				if ((node_output != null) ) {
					matchedEntry = node_output;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_use(output);

				if ((cachehit == false) ) {
					Socket_CloseOutput_output_Map_cachekey_output = output;
					Socket_CloseOutput_output_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void HttpURLConnection_SetBeforeConnect_setEvent(HttpURLConnection c) {
		HttpURLConnection_SetBeforeConnect_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<HttpURLConnection_SetBeforeConnectMonitor> matchedLastMap = null;
		HttpURLConnection_SetBeforeConnectMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == HttpURLConnection_SetBeforeConnect_c_Map_cachekey_c) ) {
			matchedEntry = HttpURLConnection_SetBeforeConnect_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<HttpURLConnection_SetBeforeConnectMonitor> itmdMap = HttpURLConnection_SetBeforeConnect_c_Map;
				matchedLastMap = itmdMap;
				HttpURLConnection_SetBeforeConnectMonitor node_c = HttpURLConnection_SetBeforeConnect_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			HttpURLConnection_SetBeforeConnectMonitor created = new HttpURLConnection_SetBeforeConnectMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final HttpURLConnection_SetBeforeConnectMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_set(c);
		if(matchedEntryfinalMonitor.HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			HttpURLConnection_SetBeforeConnect_c_Map_cachekey_c = c;
			HttpURLConnection_SetBeforeConnect_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void HttpURLConnection_SetBeforeConnect_connectEvent(HttpURLConnection c) {
		HttpURLConnection_SetBeforeConnect_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<HttpURLConnection_SetBeforeConnectMonitor> matchedLastMap = null;
		HttpURLConnection_SetBeforeConnectMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == HttpURLConnection_SetBeforeConnect_c_Map_cachekey_c) ) {
			matchedEntry = HttpURLConnection_SetBeforeConnect_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<HttpURLConnection_SetBeforeConnectMonitor> itmdMap = HttpURLConnection_SetBeforeConnect_c_Map;
				matchedLastMap = itmdMap;
				HttpURLConnection_SetBeforeConnectMonitor node_c = HttpURLConnection_SetBeforeConnect_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			HttpURLConnection_SetBeforeConnectMonitor created = new HttpURLConnection_SetBeforeConnectMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final HttpURLConnection_SetBeforeConnectMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_connect(c);
		if(matchedEntryfinalMonitor.HttpURLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			HttpURLConnection_SetBeforeConnect_c_Map_cachekey_c = c;
			HttpURLConnection_SetBeforeConnect_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NetPermission_Actions_constructEvent(String actions) {
		NetPermission_Actions_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		NetPermission_ActionsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = NetPermission_Actions__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			NetPermission_ActionsRawMonitor created = new NetPermission_ActionsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct(actions);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_Timeout_setEvent(int timeout) {
		ServerSocket_Timeout_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ServerSocket_TimeoutRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ServerSocket_Timeout__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ServerSocket_TimeoutRawMonitor created = new ServerSocket_TimeoutRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set(timeout);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_SetTimeoutBeforeBlocking_enterEvent(ServerSocket sock) {
		ServerSocket_SetTimeoutBeforeBlocking_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<ServerSocket_SetTimeoutBeforeBlockingMonitor> matchedLastMap = null;
		ServerSocket_SetTimeoutBeforeBlockingMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock) ) {
			matchedEntry = ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ServerSocket_SetTimeoutBeforeBlockingMonitor> itmdMap = ServerSocket_SetTimeoutBeforeBlocking_sock_Map;
				matchedLastMap = itmdMap;
				ServerSocket_SetTimeoutBeforeBlockingMonitor node_sock = ServerSocket_SetTimeoutBeforeBlocking_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			ServerSocket_SetTimeoutBeforeBlockingMonitor created = new ServerSocket_SetTimeoutBeforeBlockingMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final ServerSocket_SetTimeoutBeforeBlockingMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_enter(sock);
		if(matchedEntryfinalMonitor.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock = sock;
			ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_SetTimeoutBeforeBlocking_leaveEvent(ServerSocket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_SetTimeoutBeforeBlocking_activated) {
			ServerSocket_SetTimeoutBeforeBlockingMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_SetTimeoutBeforeBlockingMonitor node_sock = ServerSocket_SetTimeoutBeforeBlocking_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_SetTimeoutBeforeBlockingMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_leave(sock);
				if(matchedEntryfinalMonitor.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock = sock;
					ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_SetTimeoutBeforeBlocking_setEvent(ServerSocket sock, int timeout) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ServerSocket_SetTimeoutBeforeBlocking_activated) {
			ServerSocket_SetTimeoutBeforeBlockingMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock) ) {
				matchedEntry = ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ServerSocket_SetTimeoutBeforeBlockingMonitor node_sock = ServerSocket_SetTimeoutBeforeBlocking_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ServerSocket_SetTimeoutBeforeBlockingMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_set(sock, timeout);
				if(matchedEntryfinalMonitor.ServerSocket_SetTimeoutBeforeBlockingMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachekey_sock = sock;
					ServerSocket_SetTimeoutBeforeBlocking_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void HttpCookie_Domain_setdomainEvent(String domain) {
		HttpCookie_Domain_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		HttpCookie_DomainRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = HttpCookie_Domain__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			HttpCookie_DomainRawMonitor created = new HttpCookie_DomainRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_setdomain(domain);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_Port_construct_portEvent(int port) {
		ServerSocket_Port_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ServerSocket_PortRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ServerSocket_Port__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ServerSocket_PortRawMonitor created = new ServerSocket_PortRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct_port(port);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void DatagramPacket_SetLength_setlengthEvent(DatagramPacket packet, int length) {
		DatagramPacket_SetLength_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		DatagramPacket_SetLengthRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = DatagramPacket_SetLength__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			DatagramPacket_SetLengthRawMonitor created = new DatagramPacket_SetLengthRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_setlength(packet, length);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_TrafficClass_settcEvent(Socket socket, int tc) {
		Socket_TrafficClass_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Socket_TrafficClassRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Socket_TrafficClass__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Socket_TrafficClassRawMonitor created = new Socket_TrafficClassRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_settc(socket, tc);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SocketImpl_CloseOutput_getoutputEvent(SocketImpl sock, OutputStream output) {
		SocketImpl_CloseOutput_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_output = null;
		CachedWeakReference wr_sock = null;
		MapOfMonitor<SocketImpl_CloseOutputMonitor> matchedLastMap = null;
		SocketImpl_CloseOutputMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((output == SocketImpl_CloseOutput_sock_output_Map_cachekey_output) && (sock == SocketImpl_CloseOutput_sock_output_Map_cachekey_sock) ) ) {
			matchedEntry = SocketImpl_CloseOutput_sock_output_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			wr_output = new CachedWeakReference(output) ;
			{
				// FindOrCreateEntry
				Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set> node_sock = SocketImpl_CloseOutput_sock_output_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set>() ;
					SocketImpl_CloseOutput_sock_output_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<SocketImpl_CloseOutputMonitor>(1) ) ;
					node_sock.setValue2(new SocketImpl_CloseOutputMonitor_Set() ) ;
				}
				MapOfMonitor<SocketImpl_CloseOutputMonitor> itmdMap = node_sock.getValue1() ;
				matchedLastMap = itmdMap;
				SocketImpl_CloseOutputMonitor node_sock_output = node_sock.getValue1() .getNodeEquivalent(wr_output) ;
				matchedEntry = node_sock_output;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			if ((wr_output == null) ) {
				wr_output = new CachedWeakReference(output) ;
			}
			// D(X) main:4
			SocketImpl_CloseOutputMonitor created = new SocketImpl_CloseOutputMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_output, created) ;
			// D(X) defineNew:5 for <output>
			{
				// InsertMonitor
				SocketImpl_CloseOutputMonitor_Set node_output = SocketImpl_CloseOutput_output_Map.getNodeEquivalent(wr_output) ;
				if ((node_output == null) ) {
					node_output = new SocketImpl_CloseOutputMonitor_Set() ;
					SocketImpl_CloseOutput_output_Map.putNode(wr_output, node_output) ;
				}
				node_output.add(created) ;
			}
			// D(X) defineNew:5 for <sock>
			{
				// InsertMonitor
				Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set> node_sock = SocketImpl_CloseOutput_sock_output_Map.getNodeEquivalent(wr_sock) ;
				if ((node_sock == null) ) {
					node_sock = new Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set>() ;
					SocketImpl_CloseOutput_sock_output_Map.putNode(wr_sock, node_sock) ;
					node_sock.setValue1(new MapOfMonitor<SocketImpl_CloseOutputMonitor>(1) ) ;
					node_sock.setValue2(new SocketImpl_CloseOutputMonitor_Set() ) ;
				}
				SocketImpl_CloseOutputMonitor_Set targetSet = node_sock.getValue2() ;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final SocketImpl_CloseOutputMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_getoutput(sock, output);
		if(matchedEntryfinalMonitor.SocketImpl_CloseOutputMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			SocketImpl_CloseOutput_sock_output_Map_cachekey_output = output;
			SocketImpl_CloseOutput_sock_output_Map_cachekey_sock = sock;
			SocketImpl_CloseOutput_sock_output_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SocketImpl_CloseOutput_closeEvent(SocketImpl sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (SocketImpl_CloseOutput_activated) {
			Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set> matchedEntry = null;
			boolean cachehit = false;
			if ((sock == SocketImpl_CloseOutput_sock_Map_cachekey_sock) ) {
				matchedEntry = SocketImpl_CloseOutput_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Tuple2<MapOfMonitor<SocketImpl_CloseOutputMonitor>, SocketImpl_CloseOutputMonitor_Set> node_sock = SocketImpl_CloseOutput_sock_output_Map.getNodeWithStrongRef(sock) ;
				if ((node_sock != null) ) {
					matchedEntry = node_sock;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				SocketImpl_CloseOutputMonitor_Set stateTransitionedSet = matchedEntry.getValue2() ;
				if ((stateTransitionedSet != null) ) {
					stateTransitionedSet.event_close(sock);

					if ((cachehit == false) ) {
						SocketImpl_CloseOutput_sock_Map_cachekey_sock = sock;
						SocketImpl_CloseOutput_sock_Map_cachevalue = matchedEntry;
					}
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SocketImpl_CloseOutput_useEvent(OutputStream output) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (SocketImpl_CloseOutput_activated) {
			SocketImpl_CloseOutputMonitor_Set matchedEntry = null;
			boolean cachehit = false;
			if ((output == SocketImpl_CloseOutput_output_Map_cachekey_output) ) {
				matchedEntry = SocketImpl_CloseOutput_output_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				SocketImpl_CloseOutputMonitor_Set node_output = SocketImpl_CloseOutput_output_Map.getNodeWithStrongRef(output) ;
				if ((node_output != null) ) {
					matchedEntry = node_output;
				}
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_use(output);

				if ((cachehit == false) ) {
					SocketImpl_CloseOutput_output_Map_cachekey_output = output;
					SocketImpl_CloseOutput_output_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Authenticator_OverrideGetPasswordAuthentication_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Authenticator_OverrideGetPasswordAuthentication_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Authenticator_OverrideGetPasswordAuthenticationRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Authenticator_OverrideGetPasswordAuthentication__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Authenticator_OverrideGetPasswordAuthenticationRawMonitor created = new Authenticator_OverrideGetPasswordAuthenticationRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLConnection_Connect_explicitEvent(URLConnection c) {
		URLConnection_Connect_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<URLConnection_ConnectMonitor> matchedLastMap = null;
		URLConnection_ConnectMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == URLConnection_Connect_c_Map_cachekey_c) ) {
			matchedEntry = URLConnection_Connect_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<URLConnection_ConnectMonitor> itmdMap = URLConnection_Connect_c_Map;
				matchedLastMap = itmdMap;
				URLConnection_ConnectMonitor node_c = URLConnection_Connect_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			URLConnection_ConnectMonitor created = new URLConnection_ConnectMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final URLConnection_ConnectMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_explicit(c);
		if(matchedEntryfinalMonitor.URLConnection_ConnectMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			URLConnection_Connect_c_Map_cachekey_c = c;
			URLConnection_Connect_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLConnection_Connect_implicitEvent(URLConnection c) {
		URLConnection_Connect_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<URLConnection_ConnectMonitor> matchedLastMap = null;
		URLConnection_ConnectMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == URLConnection_Connect_c_Map_cachekey_c) ) {
			matchedEntry = URLConnection_Connect_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<URLConnection_ConnectMonitor> itmdMap = URLConnection_Connect_c_Map;
				matchedLastMap = itmdMap;
				URLConnection_ConnectMonitor node_c = URLConnection_Connect_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			URLConnection_ConnectMonitor created = new URLConnection_ConnectMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final URLConnection_ConnectMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_implicit(c);
		if(matchedEntryfinalMonitor.URLConnection_ConnectMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			URLConnection_Connect_c_Map_cachekey_c = c;
			URLConnection_Connect_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_Timeout_setEvent(int timeout) {
		Socket_Timeout_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Socket_TimeoutRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Socket_Timeout__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Socket_TimeoutRawMonitor created = new Socket_TimeoutRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set(timeout);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void NetPermission_Name_constructEvent(String name) {
		NetPermission_Name_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		NetPermission_NameRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = NetPermission_Name__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			NetPermission_NameRawMonitor created = new NetPermission_NameRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct(name);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_InputStreamUnavailable_create_connectedEvent(Socket sock) {
		Socket_InputStreamUnavailable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_InputStreamUnavailableMonitor> matchedLastMap = null;
		Socket_InputStreamUnavailableMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_InputStreamUnavailable_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_InputStreamUnavailable_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_InputStreamUnavailableMonitor> itmdMap = Socket_InputStreamUnavailable_sock_Map;
				matchedLastMap = itmdMap;
				Socket_InputStreamUnavailableMonitor node_sock = Socket_InputStreamUnavailable_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_InputStreamUnavailableMonitor created = new Socket_InputStreamUnavailableMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_InputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_connected(sock);
		if(matchedEntryfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Socket_InputStreamUnavailable_sock_Map_cachekey_sock = sock;
			Socket_InputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_InputStreamUnavailable_create_unconnectedEvent(Socket sock) {
		Socket_InputStreamUnavailable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_InputStreamUnavailableMonitor> matchedLastMap = null;
		Socket_InputStreamUnavailableMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_InputStreamUnavailable_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_InputStreamUnavailable_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_InputStreamUnavailableMonitor> itmdMap = Socket_InputStreamUnavailable_sock_Map;
				matchedLastMap = itmdMap;
				Socket_InputStreamUnavailableMonitor node_sock = Socket_InputStreamUnavailable_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_InputStreamUnavailableMonitor created = new Socket_InputStreamUnavailableMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_InputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unconnected(sock);
		if(matchedEntryfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Socket_InputStreamUnavailable_sock_Map_cachekey_sock = sock;
			Socket_InputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_InputStreamUnavailable_connectEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_InputStreamUnavailable_activated) {
			Socket_InputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_InputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_InputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_InputStreamUnavailableMonitor node_sock = Socket_InputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_InputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect(sock);
				if(matchedEntryfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_InputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_InputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_InputStreamUnavailable_getEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_InputStreamUnavailable_activated) {
			Socket_InputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_InputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_InputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_InputStreamUnavailableMonitor node_sock = Socket_InputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_InputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_get(sock);
				if(matchedEntryfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_InputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_InputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_InputStreamUnavailable_closeEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_InputStreamUnavailable_activated) {
			Socket_InputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_InputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_InputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_InputStreamUnavailableMonitor node_sock = Socket_InputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_InputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_close(sock);
				if(matchedEntryfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_InputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_InputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_InputStreamUnavailable_shutdownEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_InputStreamUnavailable_activated) {
			Socket_InputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_InputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_InputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_InputStreamUnavailableMonitor node_sock = Socket_InputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_InputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_shutdown(sock);
				if(matchedEntryfinalMonitor.Socket_InputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_InputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_InputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLConnection_OverrideGetPermission_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		URLConnection_OverrideGetPermission_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		URLConnection_OverrideGetPermissionRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = URLConnection_OverrideGetPermission__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			URLConnection_OverrideGetPermissionRawMonitor created = new URLConnection_OverrideGetPermissionRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void IDN_ToAscii_toasciiEvent(String input) {
		IDN_ToAscii_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		IDN_ToAsciiRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = IDN_ToAscii__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			IDN_ToAsciiRawMonitor created = new IDN_ToAsciiRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_toascii(input);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_OutputStreamUnavailable_create_connectedEvent(Socket sock) {
		Socket_OutputStreamUnavailable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_OutputStreamUnavailableMonitor> matchedLastMap = null;
		Socket_OutputStreamUnavailableMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_OutputStreamUnavailable_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_OutputStreamUnavailable_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_OutputStreamUnavailableMonitor> itmdMap = Socket_OutputStreamUnavailable_sock_Map;
				matchedLastMap = itmdMap;
				Socket_OutputStreamUnavailableMonitor node_sock = Socket_OutputStreamUnavailable_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_OutputStreamUnavailableMonitor created = new Socket_OutputStreamUnavailableMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_OutputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_connected(sock);
		if(matchedEntryfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Socket_OutputStreamUnavailable_sock_Map_cachekey_sock = sock;
			Socket_OutputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_OutputStreamUnavailable_create_unconnectedEvent(Socket sock) {
		Socket_OutputStreamUnavailable_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_sock = null;
		MapOfMonitor<Socket_OutputStreamUnavailableMonitor> matchedLastMap = null;
		Socket_OutputStreamUnavailableMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((sock == Socket_OutputStreamUnavailable_sock_Map_cachekey_sock) ) {
			matchedEntry = Socket_OutputStreamUnavailable_sock_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_sock = new CachedWeakReference(sock) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Socket_OutputStreamUnavailableMonitor> itmdMap = Socket_OutputStreamUnavailable_sock_Map;
				matchedLastMap = itmdMap;
				Socket_OutputStreamUnavailableMonitor node_sock = Socket_OutputStreamUnavailable_sock_Map.getNodeEquivalent(wr_sock) ;
				matchedEntry = node_sock;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_sock == null) ) {
				wr_sock = new CachedWeakReference(sock) ;
			}
			// D(X) main:4
			Socket_OutputStreamUnavailableMonitor created = new Socket_OutputStreamUnavailableMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_sock, created) ;
		}
		// D(X) main:8--9
		final Socket_OutputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_create_unconnected(sock);
		if(matchedEntryfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Socket_OutputStreamUnavailable_sock_Map_cachekey_sock = sock;
			Socket_OutputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_OutputStreamUnavailable_connectEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_OutputStreamUnavailable_activated) {
			Socket_OutputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_OutputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_OutputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_OutputStreamUnavailableMonitor node_sock = Socket_OutputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_OutputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_connect(sock);
				if(matchedEntryfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_OutputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_OutputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_OutputStreamUnavailable_getEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_OutputStreamUnavailable_activated) {
			Socket_OutputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_OutputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_OutputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_OutputStreamUnavailableMonitor node_sock = Socket_OutputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_OutputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_get(sock);
				if(matchedEntryfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_OutputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_OutputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_OutputStreamUnavailable_closeEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_OutputStreamUnavailable_activated) {
			Socket_OutputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_OutputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_OutputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_OutputStreamUnavailableMonitor node_sock = Socket_OutputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_OutputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_close(sock);
				if(matchedEntryfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_OutputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_OutputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Socket_OutputStreamUnavailable_shutdownEvent(Socket sock) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (Socket_OutputStreamUnavailable_activated) {
			Socket_OutputStreamUnavailableMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((sock == Socket_OutputStreamUnavailable_sock_Map_cachekey_sock) ) {
				matchedEntry = Socket_OutputStreamUnavailable_sock_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				Socket_OutputStreamUnavailableMonitor node_sock = Socket_OutputStreamUnavailable_sock_Map.getNodeWithStrongRef(sock) ;
				matchedEntry = node_sock;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final Socket_OutputStreamUnavailableMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_shutdown(sock);
				if(matchedEntryfinalMonitor.Socket_OutputStreamUnavailableMonitor_Prop_1_Category_fail) {
					matchedEntryfinalMonitor.Prop_1_handler_fail();
				}

				if ((cachehit == false) ) {
					Socket_OutputStreamUnavailable_sock_Map_cachekey_sock = sock;
					Socket_OutputStreamUnavailable_sock_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_Backlog_constructEvent(int backlog) {
		ServerSocket_Backlog_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ServerSocket_BacklogRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ServerSocket_Backlog__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ServerSocket_BacklogRawMonitor created = new ServerSocket_BacklogRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_construct(backlog);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ServerSocket_Backlog_setEvent(int backlog) {
		ServerSocket_Backlog_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ServerSocket_BacklogRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ServerSocket_Backlog__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ServerSocket_BacklogRawMonitor created = new ServerSocket_BacklogRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set(backlog);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URL_SetURLStreamHandlerFactory_setEvent() {
		URL_SetURLStreamHandlerFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		URL_SetURLStreamHandlerFactoryMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = URL_SetURLStreamHandlerFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			URL_SetURLStreamHandlerFactoryMonitor created = new URL_SetURLStreamHandlerFactoryMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final URL_SetURLStreamHandlerFactoryMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_set();
		if(matchedEntryfinalMonitor.URL_SetURLStreamHandlerFactoryMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLConnection_SetBeforeConnect_setEvent(URLConnection c) {
		URLConnection_SetBeforeConnect_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<URLConnection_SetBeforeConnectMonitor> matchedLastMap = null;
		URLConnection_SetBeforeConnectMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == URLConnection_SetBeforeConnect_c_Map_cachekey_c) ) {
			matchedEntry = URLConnection_SetBeforeConnect_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<URLConnection_SetBeforeConnectMonitor> itmdMap = URLConnection_SetBeforeConnect_c_Map;
				matchedLastMap = itmdMap;
				URLConnection_SetBeforeConnectMonitor node_c = URLConnection_SetBeforeConnect_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			URLConnection_SetBeforeConnectMonitor created = new URLConnection_SetBeforeConnectMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final URLConnection_SetBeforeConnectMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_set(c);
		if(matchedEntryfinalMonitor.URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			URLConnection_SetBeforeConnect_c_Map_cachekey_c = c;
			URLConnection_SetBeforeConnect_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void URLConnection_SetBeforeConnect_connectEvent(URLConnection c) {
		URLConnection_SetBeforeConnect_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_c = null;
		MapOfMonitor<URLConnection_SetBeforeConnectMonitor> matchedLastMap = null;
		URLConnection_SetBeforeConnectMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((c == URLConnection_SetBeforeConnect_c_Map_cachekey_c) ) {
			matchedEntry = URLConnection_SetBeforeConnect_c_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_c = new CachedWeakReference(c) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<URLConnection_SetBeforeConnectMonitor> itmdMap = URLConnection_SetBeforeConnect_c_Map;
				matchedLastMap = itmdMap;
				URLConnection_SetBeforeConnectMonitor node_c = URLConnection_SetBeforeConnect_c_Map.getNodeEquivalent(wr_c) ;
				matchedEntry = node_c;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_c == null) ) {
				wr_c = new CachedWeakReference(c) ;
			}
			// D(X) main:4
			URLConnection_SetBeforeConnectMonitor created = new URLConnection_SetBeforeConnectMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_c, created) ;
		}
		// D(X) main:8--9
		final URLConnection_SetBeforeConnectMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_connect(c);
		if(matchedEntryfinalMonitor.URLConnection_SetBeforeConnectMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			URLConnection_SetBeforeConnect_c_Map_cachekey_c = c;
			URLConnection_SetBeforeConnect_c_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void CharSequence_NotInSet_set_addEvent() {
		CharSequence_NotInSet_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CharSequence_NotInSetRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = CharSequence_NotInSet__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			CharSequence_NotInSetRawMonitor created = new CharSequence_NotInSetRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set_add();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void CharSequence_NotInSet_set_addallEvent(Collection c) {
		CharSequence_NotInSet_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CharSequence_NotInSetRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = CharSequence_NotInSet__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			CharSequence_NotInSetRawMonitor created = new CharSequence_NotInSetRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_set_addall(c);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Integer_StaticFactory_constructor_createEvent(Integer i) {
		Integer_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Integer_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Integer_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Integer_StaticFactoryRawMonitor created = new Integer_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(i);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Throwable_InitCauseOnce_createWithoutThrowableEvent(Throwable t) {
		Throwable_InitCauseOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<Throwable_InitCauseOnceMonitor> matchedLastMap = null;
		Throwable_InitCauseOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == Throwable_InitCauseOnce_t_Map_cachekey_t) ) {
			matchedEntry = Throwable_InitCauseOnce_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Throwable_InitCauseOnceMonitor> itmdMap = Throwable_InitCauseOnce_t_Map;
				matchedLastMap = itmdMap;
				Throwable_InitCauseOnceMonitor node_t = Throwable_InitCauseOnce_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			Throwable_InitCauseOnceMonitor created = new Throwable_InitCauseOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final Throwable_InitCauseOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_createWithoutThrowable(t);
		if(matchedEntryfinalMonitor.Throwable_InitCauseOnceMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Throwable_InitCauseOnce_t_Map_cachekey_t = t;
			Throwable_InitCauseOnce_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Throwable_InitCauseOnce_createWithThrowableEvent(Throwable t) {
		Throwable_InitCauseOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<Throwable_InitCauseOnceMonitor> matchedLastMap = null;
		Throwable_InitCauseOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == Throwable_InitCauseOnce_t_Map_cachekey_t) ) {
			matchedEntry = Throwable_InitCauseOnce_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Throwable_InitCauseOnceMonitor> itmdMap = Throwable_InitCauseOnce_t_Map;
				matchedLastMap = itmdMap;
				Throwable_InitCauseOnceMonitor node_t = Throwable_InitCauseOnce_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			Throwable_InitCauseOnceMonitor created = new Throwable_InitCauseOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final Throwable_InitCauseOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_createWithThrowable(t);
		if(matchedEntryfinalMonitor.Throwable_InitCauseOnceMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Throwable_InitCauseOnce_t_Map_cachekey_t = t;
			Throwable_InitCauseOnce_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Throwable_InitCauseOnce_initCauseEvent(Throwable t) {
		Throwable_InitCauseOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<Throwable_InitCauseOnceMonitor> matchedLastMap = null;
		Throwable_InitCauseOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == Throwable_InitCauseOnce_t_Map_cachekey_t) ) {
			matchedEntry = Throwable_InitCauseOnce_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Throwable_InitCauseOnceMonitor> itmdMap = Throwable_InitCauseOnce_t_Map;
				matchedLastMap = itmdMap;
				Throwable_InitCauseOnceMonitor node_t = Throwable_InitCauseOnce_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			Throwable_InitCauseOnceMonitor created = new Throwable_InitCauseOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final Throwable_InitCauseOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_initCause(t);
		if(matchedEntryfinalMonitor.Throwable_InitCauseOnceMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Throwable_InitCauseOnce_t_Map_cachekey_t = t;
			Throwable_InitCauseOnce_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Integer_BadDecodeArg_decodeEvent(Integer i, String nm) {
		Integer_BadDecodeArg_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Integer_BadDecodeArgRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Integer_BadDecodeArg__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Integer_BadDecodeArgRawMonitor created = new Integer_BadDecodeArgRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_decode(i, nm);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Byte_BadDecodeArg_decodeEvent(Byte b, String nm) {
		Byte_BadDecodeArg_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Byte_BadDecodeArgRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Byte_BadDecodeArg__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Byte_BadDecodeArgRawMonitor created = new Byte_BadDecodeArgRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_decode(b, nm);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void CharSequence_UndefinedHashCode_equalsEvent() {
		CharSequence_UndefinedHashCode_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CharSequence_UndefinedHashCodeRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = CharSequence_UndefinedHashCode__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			CharSequence_UndefinedHashCodeRawMonitor created = new CharSequence_UndefinedHashCodeRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_equals();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void CharSequence_UndefinedHashCode_hashCodeEvent() {
		CharSequence_UndefinedHashCode_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CharSequence_UndefinedHashCodeRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = CharSequence_UndefinedHashCode__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			CharSequence_UndefinedHashCodeRawMonitor created = new CharSequence_UndefinedHashCodeRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_hashCode();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Enum_UserFriendlyName_nameEvent() {
		Enum_UserFriendlyName_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Enum_UserFriendlyNameRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Enum_UserFriendlyName__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Enum_UserFriendlyNameRawMonitor created = new Enum_UserFriendlyNameRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_name();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Object_NoClone_cloneEvent(Object o) {
		Object_NoClone_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Object_NoCloneRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Object_NoClone__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Object_NoCloneRawMonitor created = new Object_NoCloneRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_clone(o);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Enum_NoOrdinal_ordinalEvent() {
		Enum_NoOrdinal_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Enum_NoOrdinalRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Enum_NoOrdinal__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Enum_NoOrdinalRawMonitor created = new Enum_NoOrdinalRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_ordinal();

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void CharSequence_NotInMap_map_putEvent(Map map) {
		CharSequence_NotInMap_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_map = null;
		MapOfMonitor<CharSequence_NotInMapRawMonitor> matchedLastMap = null;
		CharSequence_NotInMapRawMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((map == CharSequence_NotInMap_map_Map_cachekey_map) ) {
			matchedEntry = CharSequence_NotInMap_map_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_map = new CachedWeakReference(map) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<CharSequence_NotInMapRawMonitor> itmdMap = CharSequence_NotInMap_map_Map;
				matchedLastMap = itmdMap;
				CharSequence_NotInMapRawMonitor node_map = CharSequence_NotInMap_map_Map.getNodeEquivalent(wr_map) ;
				matchedEntry = node_map;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_map == null) ) {
				wr_map = new CachedWeakReference(map) ;
			}
			// D(X) main:4
			CharSequence_NotInMapRawMonitor created = new CharSequence_NotInMapRawMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_map, created) ;
		}
		// D(X) main:8--9
		matchedEntry.event_map_put(map);

		if ((cachehit == false) ) {
			CharSequence_NotInMap_map_Map_cachekey_map = map;
			CharSequence_NotInMap_map_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void CharSequence_NotInMap_map_putallEvent(Map map, Map m) {
		CharSequence_NotInMap_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_map = null;
		MapOfMonitor<CharSequence_NotInMapRawMonitor> matchedLastMap = null;
		CharSequence_NotInMapRawMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((map == CharSequence_NotInMap_map_Map_cachekey_map) ) {
			matchedEntry = CharSequence_NotInMap_map_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_map = new CachedWeakReference(map) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<CharSequence_NotInMapRawMonitor> itmdMap = CharSequence_NotInMap_map_Map;
				matchedLastMap = itmdMap;
				CharSequence_NotInMapRawMonitor node_map = CharSequence_NotInMap_map_Map.getNodeEquivalent(wr_map) ;
				matchedEntry = node_map;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_map == null) ) {
				wr_map = new CachedWeakReference(map) ;
			}
			// D(X) main:4
			CharSequence_NotInMapRawMonitor created = new CharSequence_NotInMapRawMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_map, created) ;
		}
		// D(X) main:8--9
		matchedEntry.event_map_putall(map, m);

		if ((cachehit == false) ) {
			CharSequence_NotInMap_map_Map_cachekey_map = map;
			CharSequence_NotInMap_map_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeSwingCall_registerEvent(Thread t) {
		ShutdownHook_UnsafeSwingCall_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_UnsafeSwingCallMonitor> matchedLastMap = null;
		ShutdownHook_UnsafeSwingCallMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_UnsafeSwingCall_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_UnsafeSwingCallMonitor> itmdMap = ShutdownHook_UnsafeSwingCall_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_UnsafeSwingCallMonitor node_t = ShutdownHook_UnsafeSwingCall_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_UnsafeSwingCallMonitor created = new ShutdownHook_UnsafeSwingCallMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_UnsafeSwingCallMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_register(t);
		if(matchedEntryfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
			matchedEntryfinalMonitor.Prop_1_handler_unsafe();
		}
		skipEvent |= matchedEntryfinalMonitor.skipEvent;
		matchedEntryfinalMonitor.skipEvent = false;

		if ((cachehit == false) ) {
			ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t = t;
			ShutdownHook_UnsafeSwingCall_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeSwingCall_unregisterEvent(Thread t) {
		ShutdownHook_UnsafeSwingCall_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_UnsafeSwingCallMonitor> matchedLastMap = null;
		ShutdownHook_UnsafeSwingCallMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_UnsafeSwingCall_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_UnsafeSwingCallMonitor> itmdMap = ShutdownHook_UnsafeSwingCall_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_UnsafeSwingCallMonitor node_t = ShutdownHook_UnsafeSwingCall_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_UnsafeSwingCallMonitor created = new ShutdownHook_UnsafeSwingCallMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_UnsafeSwingCallMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unregister(t);
		if(matchedEntryfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
			matchedEntryfinalMonitor.Prop_1_handler_unsafe();
		}
		skipEvent |= matchedEntryfinalMonitor.skipEvent;
		matchedEntryfinalMonitor.skipEvent = false;

		if ((cachehit == false) ) {
			ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t = t;
			ShutdownHook_UnsafeSwingCall_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeSwingCall_startEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_UnsafeSwingCall_activated) {
			ShutdownHook_UnsafeSwingCallMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_UnsafeSwingCall_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_UnsafeSwingCallMonitor node_t = ShutdownHook_UnsafeSwingCall_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_UnsafeSwingCallMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_start(t);
				if(matchedEntryfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t = t;
					ShutdownHook_UnsafeSwingCall_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeSwingCall_swingcall1Event(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_UnsafeSwingCall_activated) {
			ShutdownHook_UnsafeSwingCallMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_UnsafeSwingCall_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_UnsafeSwingCallMonitor node_t = ShutdownHook_UnsafeSwingCall_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_UnsafeSwingCallMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_swingcall1(t);
				if(matchedEntryfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t = t;
					ShutdownHook_UnsafeSwingCall_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeSwingCall_swingcall2Event(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_UnsafeSwingCall_activated) {
			ShutdownHook_UnsafeSwingCallMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_UnsafeSwingCall_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_UnsafeSwingCallMonitor node_t = ShutdownHook_UnsafeSwingCall_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_UnsafeSwingCallMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_swingcall2(t);
				if(matchedEntryfinalMonitor.ShutdownHook_UnsafeSwingCallMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_UnsafeSwingCall_t_Map_cachekey_t = t;
					ShutdownHook_UnsafeSwingCall_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Character_StaticFactory_constructor_createEvent(Character b) {
		Character_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Character_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Character_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Character_StaticFactoryRawMonitor created = new Character_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(b);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringBuilder_ThreadSafe_safe_operEvent(StringBuilder b, Thread t) {
		StringBuilder_ThreadSafe_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_b = null;
		MapOfMonitor<StringBuilder_ThreadSafeMonitor> matchedLastMap = null;
		StringBuilder_ThreadSafeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((b == StringBuilder_ThreadSafe_b_Map_cachekey_b) ) {
			matchedEntry = StringBuilder_ThreadSafe_b_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_b = new CachedWeakReference(b) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StringBuilder_ThreadSafeMonitor> itmdMap = StringBuilder_ThreadSafe_b_Map;
				matchedLastMap = itmdMap;
				StringBuilder_ThreadSafeMonitor node_b = StringBuilder_ThreadSafe_b_Map.getNodeEquivalent(wr_b) ;
				matchedEntry = node_b;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_b == null) ) {
				wr_b = new CachedWeakReference(b) ;
			}
			// D(X) main:4
			StringBuilder_ThreadSafeMonitor created = new StringBuilder_ThreadSafeMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_b, created) ;
		}
		// D(X) main:8--9
		final StringBuilder_ThreadSafeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_safe_oper(b, t);
		if(matchedEntryfinalMonitor.StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StringBuilder_ThreadSafe_b_Map_cachekey_b = b;
			StringBuilder_ThreadSafe_b_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringBuilder_ThreadSafe_unsafe_operEvent(StringBuilder b, Thread t) {
		StringBuilder_ThreadSafe_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_b = null;
		MapOfMonitor<StringBuilder_ThreadSafeMonitor> matchedLastMap = null;
		StringBuilder_ThreadSafeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((b == StringBuilder_ThreadSafe_b_Map_cachekey_b) ) {
			matchedEntry = StringBuilder_ThreadSafe_b_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_b = new CachedWeakReference(b) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StringBuilder_ThreadSafeMonitor> itmdMap = StringBuilder_ThreadSafe_b_Map;
				matchedLastMap = itmdMap;
				StringBuilder_ThreadSafeMonitor node_b = StringBuilder_ThreadSafe_b_Map.getNodeEquivalent(wr_b) ;
				matchedEntry = node_b;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_b == null) ) {
				wr_b = new CachedWeakReference(b) ;
			}
			// D(X) main:4
			StringBuilder_ThreadSafeMonitor created = new StringBuilder_ThreadSafeMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_b, created) ;
		}
		// D(X) main:8--9
		final StringBuilder_ThreadSafeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unsafe_oper(b, t);
		if(matchedEntryfinalMonitor.StringBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			StringBuilder_ThreadSafe_b_Map_cachekey_b = b;
			StringBuilder_ThreadSafe_b_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void String_UseStringBuilder_constructor_createEvent(String b) {
		String_UseStringBuilder_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		String_UseStringBuilderRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = String_UseStringBuilder__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			String_UseStringBuilderRawMonitor created = new String_UseStringBuilderRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(b);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void RuntimePermission_NullAction_constructor_runtimepermEvent(String name, String actions, RuntimePermission r) {
		RuntimePermission_NullAction_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		RuntimePermission_NullActionRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = RuntimePermission_NullAction__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			RuntimePermission_NullActionRawMonitor created = new RuntimePermission_NullActionRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_runtimeperm(name, actions, r);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Double_StaticFactory_constructor_createEvent(Double d) {
		Double_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Double_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Double_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Double_StaticFactoryRawMonitor created = new Double_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(d);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ProcessBuilder_NullKeyOrValue_createMapEvent(Map map) {
		ProcessBuilder_NullKeyOrValue_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_map = null;
		MapOfMonitor<ProcessBuilder_NullKeyOrValueMonitor> matchedLastMap = null;
		ProcessBuilder_NullKeyOrValueMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((map == ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map) ) {
			matchedEntry = ProcessBuilder_NullKeyOrValue_map_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_map = new CachedWeakReference(map) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ProcessBuilder_NullKeyOrValueMonitor> itmdMap = ProcessBuilder_NullKeyOrValue_map_Map;
				matchedLastMap = itmdMap;
				ProcessBuilder_NullKeyOrValueMonitor node_map = ProcessBuilder_NullKeyOrValue_map_Map.getNodeEquivalent(wr_map) ;
				matchedEntry = node_map;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_map == null) ) {
				wr_map = new CachedWeakReference(map) ;
			}
			// D(X) main:4
			ProcessBuilder_NullKeyOrValueMonitor created = new ProcessBuilder_NullKeyOrValueMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_map, created) ;
		}
		// D(X) main:8--9
		final ProcessBuilder_NullKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_createMap(map);
		if(matchedEntryfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map = map;
			ProcessBuilder_NullKeyOrValue_map_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ProcessBuilder_NullKeyOrValue_nullPutEvent(Map map, Object key, Object value) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ProcessBuilder_NullKeyOrValue_activated) {
			ProcessBuilder_NullKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = ProcessBuilder_NullKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ProcessBuilder_NullKeyOrValueMonitor node_map = ProcessBuilder_NullKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ProcessBuilder_NullKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_nullPut(map, key, value);
				if(matchedEntryfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map = map;
					ProcessBuilder_NullKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ProcessBuilder_NullKeyOrValue_nullPutEvent(Map map, Map map2) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ProcessBuilder_NullKeyOrValue_activated) {
			ProcessBuilder_NullKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = ProcessBuilder_NullKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ProcessBuilder_NullKeyOrValueMonitor node_map = ProcessBuilder_NullKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ProcessBuilder_NullKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_nullPut(map, map2);
				if(matchedEntryfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map = map;
					ProcessBuilder_NullKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ProcessBuilder_NullKeyOrValue_nullQueryEvent(Map map, Object o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ProcessBuilder_NullKeyOrValue_activated) {
			ProcessBuilder_NullKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = ProcessBuilder_NullKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ProcessBuilder_NullKeyOrValueMonitor node_map = ProcessBuilder_NullKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ProcessBuilder_NullKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_nullQuery(map, o);
				if(matchedEntryfinalMonitor.ProcessBuilder_NullKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					ProcessBuilder_NullKeyOrValue_map_Map_cachekey_map = map;
					ProcessBuilder_NullKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Thread_SetDaemonBeforeStart_startEvent(Thread t) {
		Thread_SetDaemonBeforeStart_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<Thread_SetDaemonBeforeStartMonitor> matchedLastMap = null;
		Thread_SetDaemonBeforeStartMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == Thread_SetDaemonBeforeStart_t_Map_cachekey_t) ) {
			matchedEntry = Thread_SetDaemonBeforeStart_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Thread_SetDaemonBeforeStartMonitor> itmdMap = Thread_SetDaemonBeforeStart_t_Map;
				matchedLastMap = itmdMap;
				Thread_SetDaemonBeforeStartMonitor node_t = Thread_SetDaemonBeforeStart_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			Thread_SetDaemonBeforeStartMonitor created = new Thread_SetDaemonBeforeStartMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final Thread_SetDaemonBeforeStartMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_start(t);
		if(matchedEntryfinalMonitor.Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Thread_SetDaemonBeforeStart_t_Map_cachekey_t = t;
			Thread_SetDaemonBeforeStart_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Thread_SetDaemonBeforeStart_setDaemonEvent(Thread t) {
		Thread_SetDaemonBeforeStart_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<Thread_SetDaemonBeforeStartMonitor> matchedLastMap = null;
		Thread_SetDaemonBeforeStartMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == Thread_SetDaemonBeforeStart_t_Map_cachekey_t) ) {
			matchedEntry = Thread_SetDaemonBeforeStart_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Thread_SetDaemonBeforeStartMonitor> itmdMap = Thread_SetDaemonBeforeStart_t_Map;
				matchedLastMap = itmdMap;
				Thread_SetDaemonBeforeStartMonitor node_t = Thread_SetDaemonBeforeStart_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			Thread_SetDaemonBeforeStartMonitor created = new Thread_SetDaemonBeforeStartMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final Thread_SetDaemonBeforeStartMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_setDaemon(t);
		if(matchedEntryfinalMonitor.Thread_SetDaemonBeforeStartMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Thread_SetDaemonBeforeStart_t_Map_cachekey_t = t;
			Thread_SetDaemonBeforeStart_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Comparable_CompareToNullException_badexceptionEvent(Object o, Exception e) {
		Comparable_CompareToNullException_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Comparable_CompareToNullExceptionRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Comparable_CompareToNullException__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Comparable_CompareToNullExceptionRawMonitor created = new Comparable_CompareToNullExceptionRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_badexception(o, e);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Comparable_CompareToNullException_badcompareEvent(Object o, int i) {
		Comparable_CompareToNullException_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Comparable_CompareToNullExceptionRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Comparable_CompareToNullException__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Comparable_CompareToNullExceptionRawMonitor created = new Comparable_CompareToNullExceptionRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_badcompare(o, i);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Boolean_StaticFactory_constructor_createEvent(Boolean b) {
		Boolean_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Boolean_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Boolean_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Boolean_StaticFactoryRawMonitor created = new Boolean_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(b);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeAWTCall_registerEvent(Thread t) {
		ShutdownHook_UnsafeAWTCall_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_UnsafeAWTCallMonitor> matchedLastMap = null;
		ShutdownHook_UnsafeAWTCallMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_UnsafeAWTCall_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_UnsafeAWTCallMonitor> itmdMap = ShutdownHook_UnsafeAWTCall_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_UnsafeAWTCallMonitor node_t = ShutdownHook_UnsafeAWTCall_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_UnsafeAWTCallMonitor created = new ShutdownHook_UnsafeAWTCallMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_UnsafeAWTCallMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_register(t);
		if(matchedEntryfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
			matchedEntryfinalMonitor.Prop_1_handler_unsafe();
		}
		skipEvent |= matchedEntryfinalMonitor.skipEvent;
		matchedEntryfinalMonitor.skipEvent = false;

		if ((cachehit == false) ) {
			ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t = t;
			ShutdownHook_UnsafeAWTCall_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeAWTCall_unregisterEvent(Thread t) {
		ShutdownHook_UnsafeAWTCall_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_UnsafeAWTCallMonitor> matchedLastMap = null;
		ShutdownHook_UnsafeAWTCallMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_UnsafeAWTCall_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_UnsafeAWTCallMonitor> itmdMap = ShutdownHook_UnsafeAWTCall_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_UnsafeAWTCallMonitor node_t = ShutdownHook_UnsafeAWTCall_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_UnsafeAWTCallMonitor created = new ShutdownHook_UnsafeAWTCallMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_UnsafeAWTCallMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unregister(t);
		if(matchedEntryfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
			matchedEntryfinalMonitor.Prop_1_handler_unsafe();
		}
		skipEvent |= matchedEntryfinalMonitor.skipEvent;
		matchedEntryfinalMonitor.skipEvent = false;

		if ((cachehit == false) ) {
			ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t = t;
			ShutdownHook_UnsafeAWTCall_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeAWTCall_startEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_UnsafeAWTCall_activated) {
			ShutdownHook_UnsafeAWTCallMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_UnsafeAWTCall_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_UnsafeAWTCallMonitor node_t = ShutdownHook_UnsafeAWTCall_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_UnsafeAWTCallMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_start(t);
				if(matchedEntryfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t = t;
					ShutdownHook_UnsafeAWTCall_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_UnsafeAWTCall_awtcallEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_UnsafeAWTCall_activated) {
			ShutdownHook_UnsafeAWTCallMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_UnsafeAWTCall_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_UnsafeAWTCallMonitor node_t = ShutdownHook_UnsafeAWTCall_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_UnsafeAWTCallMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_awtcall(t);
				if(matchedEntryfinalMonitor.ShutdownHook_UnsafeAWTCallMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_UnsafeAWTCall_t_Map_cachekey_t = t;
					ShutdownHook_UnsafeAWTCall_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ClassLoader_UnsafeClassDefinition_defineClassEvent(String name) {
		ClassLoader_UnsafeClassDefinition_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ClassLoader_UnsafeClassDefinitionRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ClassLoader_UnsafeClassDefinition__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ClassLoader_UnsafeClassDefinitionRawMonitor created = new ClassLoader_UnsafeClassDefinitionRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_defineClass(name);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_PrematureStart_good_registerEvent(Thread t) {
		ShutdownHook_PrematureStart_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_PrematureStartMonitor> matchedLastMap = null;
		ShutdownHook_PrematureStartMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_PrematureStart_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_PrematureStart_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_PrematureStartMonitor> itmdMap = ShutdownHook_PrematureStart_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_PrematureStartMonitor node_t = ShutdownHook_PrematureStart_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_PrematureStartMonitor created = new ShutdownHook_PrematureStartMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_PrematureStartMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_good_register(t);
		if(matchedEntryfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
			matchedEntryfinalMonitor.Prop_1_handler_err();
		}

		if ((cachehit == false) ) {
			ShutdownHook_PrematureStart_t_Map_cachekey_t = t;
			ShutdownHook_PrematureStart_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_PrematureStart_bad_registerEvent(Thread t) {
		ShutdownHook_PrematureStart_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_PrematureStartMonitor> matchedLastMap = null;
		ShutdownHook_PrematureStartMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_PrematureStart_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_PrematureStart_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_PrematureStartMonitor> itmdMap = ShutdownHook_PrematureStart_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_PrematureStartMonitor node_t = ShutdownHook_PrematureStart_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_PrematureStartMonitor created = new ShutdownHook_PrematureStartMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_PrematureStartMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_bad_register(t);
		if(matchedEntryfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
			matchedEntryfinalMonitor.Prop_1_handler_err();
		}

		if ((cachehit == false) ) {
			ShutdownHook_PrematureStart_t_Map_cachekey_t = t;
			ShutdownHook_PrematureStart_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_PrematureStart_unregisterEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_PrematureStart_activated) {
			ShutdownHook_PrematureStartMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_PrematureStart_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_PrematureStart_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_PrematureStartMonitor node_t = ShutdownHook_PrematureStart_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_PrematureStartMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_unregister(t);
				if(matchedEntryfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
					matchedEntryfinalMonitor.Prop_1_handler_err();
				}

				if ((cachehit == false) ) {
					ShutdownHook_PrematureStart_t_Map_cachekey_t = t;
					ShutdownHook_PrematureStart_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_PrematureStart_userstartEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_PrematureStart_activated) {
			ShutdownHook_PrematureStartMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_PrematureStart_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_PrematureStart_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_PrematureStartMonitor node_t = ShutdownHook_PrematureStart_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_PrematureStartMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_userstart(t);
				if(matchedEntryfinalMonitor.ShutdownHook_PrematureStartMonitor_Prop_1_Category_err) {
					matchedEntryfinalMonitor.Prop_1_handler_err();
				}

				if ((cachehit == false) ) {
					ShutdownHook_PrematureStart_t_Map_cachekey_t = t;
					ShutdownHook_PrematureStart_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Short_StaticFactory_constructor_createEvent(Short l) {
		Short_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Short_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Short_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Short_StaticFactoryRawMonitor created = new Short_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(l);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Long_StaticFactory_constructor_createEvent(Long l) {
		Long_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Long_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Long_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Long_StaticFactoryRawMonitor created = new Long_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(l);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Short_BadParsingArgs_bad_argEvent(String s, int radix) {
		Short_BadParsingArgs_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Short_BadParsingArgsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Short_BadParsingArgs__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Short_BadParsingArgsRawMonitor created = new Short_BadParsingArgsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_arg(s, radix);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Short_BadParsingArgs_bad_arg2Event(String s) {
		Short_BadParsingArgs_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Short_BadParsingArgsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Short_BadParsingArgs__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Short_BadParsingArgsRawMonitor created = new Short_BadParsingArgsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_arg2(s);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Runnable_OverrideRun_staticinitEvent(org.aspectj.lang.Signature staticsig) {
		Runnable_OverrideRun_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Runnable_OverrideRunRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Runnable_OverrideRun__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Runnable_OverrideRunRawMonitor created = new Runnable_OverrideRunRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_staticinit(staticsig);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Enum_NoExtraWhiteSpace_valueOfEvent(Class c, String name) {
		Enum_NoExtraWhiteSpace_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Enum_NoExtraWhiteSpaceRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Enum_NoExtraWhiteSpace__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Enum_NoExtraWhiteSpaceRawMonitor created = new Enum_NoExtraWhiteSpaceRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_valueOf(c, name);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Object_MonitorOwner_bad_notifyEvent(Object o) {
		Object_MonitorOwner_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Object_MonitorOwnerRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Object_MonitorOwner__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Object_MonitorOwnerRawMonitor created = new Object_MonitorOwnerRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_notify(o);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Object_MonitorOwner_bad_waitEvent(Object o) {
		Object_MonitorOwner_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Object_MonitorOwnerRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Object_MonitorOwner__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Object_MonitorOwnerRawMonitor created = new Object_MonitorOwnerRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_wait(o);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Thread_StartOnce_startEvent(Thread t) {
		Thread_StartOnce_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<Thread_StartOnceMonitor> matchedLastMap = null;
		Thread_StartOnceMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == Thread_StartOnce_t_Map_cachekey_t) ) {
			matchedEntry = Thread_StartOnce_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Thread_StartOnceMonitor> itmdMap = Thread_StartOnce_t_Map;
				matchedLastMap = itmdMap;
				Thread_StartOnceMonitor node_t = Thread_StartOnce_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			Thread_StartOnceMonitor created = new Thread_StartOnceMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final Thread_StartOnceMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_start(t);
		if(matchedEntryfinalMonitor.Thread_StartOnceMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			Thread_StartOnce_t_Map_cachekey_t = t;
			Thread_StartOnce_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_SystemExit_registerEvent(Thread t) {
		ShutdownHook_SystemExit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_SystemExitMonitor> matchedLastMap = null;
		ShutdownHook_SystemExitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_SystemExit_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_SystemExit_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_SystemExitMonitor> itmdMap = ShutdownHook_SystemExit_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_SystemExitMonitor node_t = ShutdownHook_SystemExit_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_SystemExitMonitor created = new ShutdownHook_SystemExitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_SystemExitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_register(t);
		if(matchedEntryfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
			matchedEntryfinalMonitor.Prop_1_handler_unsafe();
		}
		skipEvent |= matchedEntryfinalMonitor.skipEvent;
		matchedEntryfinalMonitor.skipEvent = false;

		if ((cachehit == false) ) {
			ShutdownHook_SystemExit_t_Map_cachekey_t = t;
			ShutdownHook_SystemExit_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_SystemExit_unregisterEvent(Thread t) {
		ShutdownHook_SystemExit_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_t = null;
		MapOfMonitor<ShutdownHook_SystemExitMonitor> matchedLastMap = null;
		ShutdownHook_SystemExitMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((t == ShutdownHook_SystemExit_t_Map_cachekey_t) ) {
			matchedEntry = ShutdownHook_SystemExit_t_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_t = new CachedWeakReference(t) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ShutdownHook_SystemExitMonitor> itmdMap = ShutdownHook_SystemExit_t_Map;
				matchedLastMap = itmdMap;
				ShutdownHook_SystemExitMonitor node_t = ShutdownHook_SystemExit_t_Map.getNodeEquivalent(wr_t) ;
				matchedEntry = node_t;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_t == null) ) {
				wr_t = new CachedWeakReference(t) ;
			}
			// D(X) main:4
			ShutdownHook_SystemExitMonitor created = new ShutdownHook_SystemExitMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_t, created) ;
		}
		// D(X) main:8--9
		final ShutdownHook_SystemExitMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unregister(t);
		if(matchedEntryfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
			matchedEntryfinalMonitor.Prop_1_handler_unsafe();
		}
		skipEvent |= matchedEntryfinalMonitor.skipEvent;
		matchedEntryfinalMonitor.skipEvent = false;

		if ((cachehit == false) ) {
			ShutdownHook_SystemExit_t_Map_cachekey_t = t;
			ShutdownHook_SystemExit_t_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_SystemExit_startEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_SystemExit_activated) {
			ShutdownHook_SystemExitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_SystemExit_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_SystemExit_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_SystemExitMonitor node_t = ShutdownHook_SystemExit_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_SystemExitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_start(t);
				if(matchedEntryfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_SystemExit_t_Map_cachekey_t = t;
					ShutdownHook_SystemExit_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_SystemExit_exitEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_SystemExit_activated) {
			ShutdownHook_SystemExitMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((t == ShutdownHook_SystemExit_t_Map_cachekey_t) ) {
				matchedEntry = ShutdownHook_SystemExit_t_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				ShutdownHook_SystemExitMonitor node_t = ShutdownHook_SystemExit_t_Map.getNodeWithStrongRef(t) ;
				matchedEntry = node_t;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_SystemExitMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_exit(t);
				if(matchedEntryfinalMonitor.ShutdownHook_SystemExitMonitor_Prop_1_Category_unsafe) {
					matchedEntryfinalMonitor.Prop_1_handler_unsafe();
				}
				skipEvent |= matchedEntryfinalMonitor.skipEvent;
				matchedEntryfinalMonitor.skipEvent = false;

				if ((cachehit == false) ) {
					ShutdownHook_SystemExit_t_Map_cachekey_t = t;
					ShutdownHook_SystemExit_t_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Long_BadParsingArgs_bad_argEvent(String s, int radix) {
		Long_BadParsingArgs_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Long_BadParsingArgsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Long_BadParsingArgs__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Long_BadParsingArgsRawMonitor created = new Long_BadParsingArgsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_arg(s, radix);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Long_BadParsingArgs_bad_arg2Event(String s) {
		Long_BadParsingArgs_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Long_BadParsingArgsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Long_BadParsingArgs__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Long_BadParsingArgsRawMonitor created = new Long_BadParsingArgsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_arg2(s);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_LateRegister_registerEvent(Thread t) {
		ShutdownHook_LateRegister_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ShutdownHook_LateRegisterMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ShutdownHook_LateRegister__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ShutdownHook_LateRegisterMonitor created = new ShutdownHook_LateRegisterMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final ShutdownHook_LateRegisterMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_register(t);
		if(matchedEntryfinalMonitor.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_LateRegister_unregisterEvent(Thread t) {
		ShutdownHook_LateRegister_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		ShutdownHook_LateRegisterMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = ShutdownHook_LateRegister__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			ShutdownHook_LateRegisterMonitor created = new ShutdownHook_LateRegisterMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final ShutdownHook_LateRegisterMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unregister(t);
		if(matchedEntryfinalMonitor.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ShutdownHook_LateRegister_startEvent(Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (ShutdownHook_LateRegister_activated) {
			ShutdownHook_LateRegisterMonitor matchedEntry = null;
			{
				// FindEntry
				matchedEntry = ShutdownHook_LateRegister__Map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final ShutdownHook_LateRegisterMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_start(t);
				if(matchedEntryfinalMonitor.ShutdownHook_LateRegisterMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void RuntimePermission_PermName_constructor_runtimepermEvent(String name, RuntimePermission r) {
		RuntimePermission_PermName_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		RuntimePermission_PermNameRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = RuntimePermission_PermName__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			RuntimePermission_PermNameRawMonitor created = new RuntimePermission_PermNameRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_runtimeperm(name, r);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void System_WrongKeyOrValue_createMapEvent(Map map) {
		System_WrongKeyOrValue_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_map = null;
		MapOfMonitor<System_WrongKeyOrValueMonitor> matchedLastMap = null;
		System_WrongKeyOrValueMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((map == System_WrongKeyOrValue_map_Map_cachekey_map) ) {
			matchedEntry = System_WrongKeyOrValue_map_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_map = new CachedWeakReference(map) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<System_WrongKeyOrValueMonitor> itmdMap = System_WrongKeyOrValue_map_Map;
				matchedLastMap = itmdMap;
				System_WrongKeyOrValueMonitor node_map = System_WrongKeyOrValue_map_Map.getNodeEquivalent(wr_map) ;
				matchedEntry = node_map;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_map == null) ) {
				wr_map = new CachedWeakReference(map) ;
			}
			// D(X) main:4
			System_WrongKeyOrValueMonitor created = new System_WrongKeyOrValueMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_map, created) ;
		}
		// D(X) main:8--9
		final System_WrongKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_createMap(map);
		if(matchedEntryfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			System_WrongKeyOrValue_map_Map_cachekey_map = map;
			System_WrongKeyOrValue_map_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void System_WrongKeyOrValue_nullPutEvent(Map map, Object key, Object value) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (System_WrongKeyOrValue_activated) {
			System_WrongKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == System_WrongKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = System_WrongKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				System_WrongKeyOrValueMonitor node_map = System_WrongKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final System_WrongKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_nullPut(map, key, value);
				if(matchedEntryfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					System_WrongKeyOrValue_map_Map_cachekey_map = map;
					System_WrongKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void System_WrongKeyOrValue_nullPutEvent(Map map, Map map2) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (System_WrongKeyOrValue_activated) {
			System_WrongKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == System_WrongKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = System_WrongKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				System_WrongKeyOrValueMonitor node_map = System_WrongKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final System_WrongKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_nullPut(map, map2);
				if(matchedEntryfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					System_WrongKeyOrValue_map_Map_cachekey_map = map;
					System_WrongKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void System_WrongKeyOrValue_nullQueryEvent(Map map, Object o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (System_WrongKeyOrValue_activated) {
			System_WrongKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == System_WrongKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = System_WrongKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				System_WrongKeyOrValueMonitor node_map = System_WrongKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final System_WrongKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_nullQuery(map, o);
				if(matchedEntryfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					System_WrongKeyOrValue_map_Map_cachekey_map = map;
					System_WrongKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void System_WrongKeyOrValue_notStringQueryEvent(Map map, Object o) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (System_WrongKeyOrValue_activated) {
			System_WrongKeyOrValueMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((map == System_WrongKeyOrValue_map_Map_cachekey_map) ) {
				matchedEntry = System_WrongKeyOrValue_map_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				System_WrongKeyOrValueMonitor node_map = System_WrongKeyOrValue_map_Map.getNodeWithStrongRef(map) ;
				matchedEntry = node_map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final System_WrongKeyOrValueMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_notStringQuery(map, o);
				if(matchedEntryfinalMonitor.System_WrongKeyOrValueMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					System_WrongKeyOrValue_map_Map_cachekey_map = map;
					System_WrongKeyOrValue_map_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ProcessBuilder_ThreadSafe_safe_operEvent(ProcessBuilder p, Thread t) {
		ProcessBuilder_ThreadSafe_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_p = null;
		MapOfMonitor<ProcessBuilder_ThreadSafeMonitor> matchedLastMap = null;
		ProcessBuilder_ThreadSafeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((p == ProcessBuilder_ThreadSafe_p_Map_cachekey_p) ) {
			matchedEntry = ProcessBuilder_ThreadSafe_p_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_p = new CachedWeakReference(p) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ProcessBuilder_ThreadSafeMonitor> itmdMap = ProcessBuilder_ThreadSafe_p_Map;
				matchedLastMap = itmdMap;
				ProcessBuilder_ThreadSafeMonitor node_p = ProcessBuilder_ThreadSafe_p_Map.getNodeEquivalent(wr_p) ;
				matchedEntry = node_p;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_p == null) ) {
				wr_p = new CachedWeakReference(p) ;
			}
			// D(X) main:4
			ProcessBuilder_ThreadSafeMonitor created = new ProcessBuilder_ThreadSafeMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_p, created) ;
		}
		// D(X) main:8--9
		final ProcessBuilder_ThreadSafeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_safe_oper(p, t);
		if(matchedEntryfinalMonitor.ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ProcessBuilder_ThreadSafe_p_Map_cachekey_p = p;
			ProcessBuilder_ThreadSafe_p_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void ProcessBuilder_ThreadSafe_unsafe_operEvent(ProcessBuilder p, Thread t) {
		ProcessBuilder_ThreadSafe_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_p = null;
		MapOfMonitor<ProcessBuilder_ThreadSafeMonitor> matchedLastMap = null;
		ProcessBuilder_ThreadSafeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((p == ProcessBuilder_ThreadSafe_p_Map_cachekey_p) ) {
			matchedEntry = ProcessBuilder_ThreadSafe_p_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_p = new CachedWeakReference(p) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<ProcessBuilder_ThreadSafeMonitor> itmdMap = ProcessBuilder_ThreadSafe_p_Map;
				matchedLastMap = itmdMap;
				ProcessBuilder_ThreadSafeMonitor node_p = ProcessBuilder_ThreadSafe_p_Map.getNodeEquivalent(wr_p) ;
				matchedEntry = node_p;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_p == null) ) {
				wr_p = new CachedWeakReference(p) ;
			}
			// D(X) main:4
			ProcessBuilder_ThreadSafeMonitor created = new ProcessBuilder_ThreadSafeMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_p, created) ;
		}
		// D(X) main:8--9
		final ProcessBuilder_ThreadSafeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unsafe_oper(p, t);
		if(matchedEntryfinalMonitor.ProcessBuilder_ThreadSafeMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			ProcessBuilder_ThreadSafe_p_Map_cachekey_p = p;
			ProcessBuilder_ThreadSafe_p_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SecurityManager_Permission_getEvent(SecurityManager manager, Object context) {
		SecurityManager_Permission_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_manager = null;
		CachedWeakReference wr_context = null;
		MapOfMonitor<SecurityManager_PermissionMonitor> matchedLastMap = null;
		SecurityManager_PermissionMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((context == SecurityManager_Permission_manager_context_Map_cachekey_context) && (manager == SecurityManager_Permission_manager_context_Map_cachekey_manager) ) ) {
			matchedEntry = SecurityManager_Permission_manager_context_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_manager = new CachedWeakReference(manager) ;
			wr_context = new CachedWeakReference(context) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<SecurityManager_PermissionMonitor> node_manager = SecurityManager_Permission_manager_context_Map.getNodeEquivalent(wr_manager) ;
				if ((node_manager == null) ) {
					node_manager = new MapOfMonitor<SecurityManager_PermissionMonitor>(1) ;
					SecurityManager_Permission_manager_context_Map.putNode(wr_manager, node_manager) ;
				}
				matchedLastMap = node_manager;
				SecurityManager_PermissionMonitor node_manager_context = node_manager.getNodeEquivalent(wr_context) ;
				matchedEntry = node_manager_context;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_manager == null) ) {
				wr_manager = new CachedWeakReference(manager) ;
			}
			if ((wr_context == null) ) {
				wr_context = new CachedWeakReference(context) ;
			}
			// D(X) main:4
			SecurityManager_PermissionMonitor created = new SecurityManager_PermissionMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_context, created) ;
		}
		// D(X) main:8--9
		final SecurityManager_PermissionMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_get(manager, context);
		if(matchedEntryfinalMonitor.SecurityManager_PermissionMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			SecurityManager_Permission_manager_context_Map_cachekey_context = context;
			SecurityManager_Permission_manager_context_Map_cachekey_manager = manager;
			SecurityManager_Permission_manager_context_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void SecurityManager_Permission_checkEvent(SecurityManager manager, Object context) {
		SecurityManager_Permission_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_manager = null;
		CachedWeakReference wr_context = null;
		MapOfMonitor<SecurityManager_PermissionMonitor> matchedLastMap = null;
		SecurityManager_PermissionMonitor matchedEntry = null;
		boolean cachehit = false;
		if (((context == SecurityManager_Permission_manager_context_Map_cachekey_context) && (manager == SecurityManager_Permission_manager_context_Map_cachekey_manager) ) ) {
			matchedEntry = SecurityManager_Permission_manager_context_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_manager = new CachedWeakReference(manager) ;
			wr_context = new CachedWeakReference(context) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<SecurityManager_PermissionMonitor> node_manager = SecurityManager_Permission_manager_context_Map.getNodeEquivalent(wr_manager) ;
				if ((node_manager == null) ) {
					node_manager = new MapOfMonitor<SecurityManager_PermissionMonitor>(1) ;
					SecurityManager_Permission_manager_context_Map.putNode(wr_manager, node_manager) ;
				}
				matchedLastMap = node_manager;
				SecurityManager_PermissionMonitor node_manager_context = node_manager.getNodeEquivalent(wr_context) ;
				matchedEntry = node_manager_context;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_manager == null) ) {
				wr_manager = new CachedWeakReference(manager) ;
			}
			if ((wr_context == null) ) {
				wr_context = new CachedWeakReference(context) ;
			}
			// D(X) main:4
			SecurityManager_PermissionMonitor created = new SecurityManager_PermissionMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_context, created) ;
		}
		// D(X) main:8--9
		final SecurityManager_PermissionMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_check(manager, context);
		if(matchedEntryfinalMonitor.SecurityManager_PermissionMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			SecurityManager_Permission_manager_context_Map_cachekey_context = context;
			SecurityManager_Permission_manager_context_Map_cachekey_manager = manager;
			SecurityManager_Permission_manager_context_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringBuffer_SingleThreadUsage_initEvent(Thread t, StringBuffer s) {
		StringBuffer_SingleThreadUsage_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_s = null;
		MapOfMonitor<StringBuffer_SingleThreadUsageMonitor> matchedLastMap = null;
		StringBuffer_SingleThreadUsageMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((s == StringBuffer_SingleThreadUsage_s_Map_cachekey_s) ) {
			matchedEntry = StringBuffer_SingleThreadUsage_s_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_s = new CachedWeakReference(s) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<StringBuffer_SingleThreadUsageMonitor> itmdMap = StringBuffer_SingleThreadUsage_s_Map;
				matchedLastMap = itmdMap;
				StringBuffer_SingleThreadUsageMonitor node_s = StringBuffer_SingleThreadUsage_s_Map.getNodeEquivalent(wr_s) ;
				matchedEntry = node_s;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_s == null) ) {
				wr_s = new CachedWeakReference(s) ;
			}
			// D(X) main:4
			StringBuffer_SingleThreadUsageMonitor created = new StringBuffer_SingleThreadUsageMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_s, created) ;
			// D(X) defineNew:5 for <>
			{
				// InsertMonitor
				StringBuffer_SingleThreadUsageMonitor_Set targetSet = StringBuffer_SingleThreadUsage__Map;
				targetSet.add(created) ;
			}
		}
		// D(X) main:8--9
		final StringBuffer_SingleThreadUsageMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_init(t, s);
		if(matchedEntryfinalMonitor.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match) {
			matchedEntryfinalMonitor.Prop_1_handler_match();
		}

		if ((cachehit == false) ) {
			StringBuffer_SingleThreadUsage_s_Map_cachekey_s = s;
			StringBuffer_SingleThreadUsage_s_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringBuffer_SingleThreadUsage_useEvent(StringBuffer s, Thread t) {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (StringBuffer_SingleThreadUsage_activated) {
			StringBuffer_SingleThreadUsageMonitor matchedEntry = null;
			boolean cachehit = false;
			if ((s == StringBuffer_SingleThreadUsage_s_Map_cachekey_s) ) {
				matchedEntry = StringBuffer_SingleThreadUsage_s_Map_cachevalue;
				cachehit = true;
			}
			else {
				// FindEntry
				StringBuffer_SingleThreadUsageMonitor node_s = StringBuffer_SingleThreadUsage_s_Map.getNodeWithStrongRef(s) ;
				matchedEntry = node_s;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				final StringBuffer_SingleThreadUsageMonitor matchedEntryfinalMonitor = matchedEntry;
				matchedEntry.Prop_1_event_use(s, t);
				if(matchedEntryfinalMonitor.StringBuffer_SingleThreadUsageMonitor_Prop_1_Category_match) {
					matchedEntryfinalMonitor.Prop_1_handler_match();
				}

				if ((cachehit == false) ) {
					StringBuffer_SingleThreadUsage_s_Map_cachekey_s = s;
					StringBuffer_SingleThreadUsage_s_Map_cachevalue = matchedEntry;
				}
			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StringBuffer_SingleThreadUsage_endprogramEvent() {
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		if (StringBuffer_SingleThreadUsage_activated) {
			StringBuffer_SingleThreadUsageMonitor_Set matchedEntry = null;
			{
				// FindEntry
				matchedEntry = StringBuffer_SingleThreadUsage__Map;
			}
			// D(X) main:8--9
			if ((matchedEntry != null) ) {
				matchedEntry.event_endprogram();

			}

		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Math_ContendedRandom_onethread_useEvent(Thread t) {
		Math_ContendedRandom_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Math_ContendedRandomMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Math_ContendedRandom__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Math_ContendedRandomMonitor created = new Math_ContendedRandomMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final Math_ContendedRandomMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_onethread_use(t);
		if(matchedEntryfinalMonitor.Math_ContendedRandomMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Math_ContendedRandom_otherthread_useEvent(Thread t) {
		Math_ContendedRandom_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Math_ContendedRandomMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Math_ContendedRandom__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Math_ContendedRandomMonitor created = new Math_ContendedRandomMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final Math_ContendedRandomMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_otherthread_use(t);
		if(matchedEntryfinalMonitor.Math_ContendedRandomMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Appendable_ThreadSafe_safe_appendEvent(Appendable a, Thread t) {
		Appendable_ThreadSafe_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_a = null;
		MapOfMonitor<Appendable_ThreadSafeMonitor> matchedLastMap = null;
		Appendable_ThreadSafeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((a == Appendable_ThreadSafe_a_Map_cachekey_a) ) {
			matchedEntry = Appendable_ThreadSafe_a_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_a = new CachedWeakReference(a) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Appendable_ThreadSafeMonitor> itmdMap = Appendable_ThreadSafe_a_Map;
				matchedLastMap = itmdMap;
				Appendable_ThreadSafeMonitor node_a = Appendable_ThreadSafe_a_Map.getNodeEquivalent(wr_a) ;
				matchedEntry = node_a;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_a == null) ) {
				wr_a = new CachedWeakReference(a) ;
			}
			// D(X) main:4
			Appendable_ThreadSafeMonitor created = new Appendable_ThreadSafeMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_a, created) ;
		}
		// D(X) main:8--9
		final Appendable_ThreadSafeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_safe_append(a, t);
		if(matchedEntryfinalMonitor.Appendable_ThreadSafeMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Appendable_ThreadSafe_a_Map_cachekey_a = a;
			Appendable_ThreadSafe_a_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Appendable_ThreadSafe_unsafe_appendEvent(Appendable a, Thread t) {
		Appendable_ThreadSafe_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		CachedWeakReference wr_a = null;
		MapOfMonitor<Appendable_ThreadSafeMonitor> matchedLastMap = null;
		Appendable_ThreadSafeMonitor matchedEntry = null;
		boolean cachehit = false;
		if ((a == Appendable_ThreadSafe_a_Map_cachekey_a) ) {
			matchedEntry = Appendable_ThreadSafe_a_Map_cachevalue;
			cachehit = true;
		}
		else {
			wr_a = new CachedWeakReference(a) ;
			{
				// FindOrCreateEntry
				MapOfMonitor<Appendable_ThreadSafeMonitor> itmdMap = Appendable_ThreadSafe_a_Map;
				matchedLastMap = itmdMap;
				Appendable_ThreadSafeMonitor node_a = Appendable_ThreadSafe_a_Map.getNodeEquivalent(wr_a) ;
				matchedEntry = node_a;
			}
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			if ((wr_a == null) ) {
				wr_a = new CachedWeakReference(a) ;
			}
			// D(X) main:4
			Appendable_ThreadSafeMonitor created = new Appendable_ThreadSafeMonitor() ;
			matchedEntry = created;
			matchedLastMap.putNode(wr_a, created) ;
		}
		// D(X) main:8--9
		final Appendable_ThreadSafeMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_unsafe_append(a, t);
		if(matchedEntryfinalMonitor.Appendable_ThreadSafeMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		if ((cachehit == false) ) {
			Appendable_ThreadSafe_a_Map_cachekey_a = a;
			Appendable_ThreadSafe_a_Map_cachevalue = matchedEntry;
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Byte_StaticFactory_constructor_createEvent(Byte b) {
		Byte_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Byte_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Byte_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Byte_StaticFactoryRawMonitor created = new Byte_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(b);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Long_BadDecodeArg_decodeEvent(Long l, String nm) {
		Long_BadDecodeArg_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Long_BadDecodeArgRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Long_BadDecodeArg__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Long_BadDecodeArgRawMonitor created = new Long_BadDecodeArgRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_decode(l, nm);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Short_BadDecodeArg_decodeEvent(Short s, String nm) {
		Short_BadDecodeArg_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Short_BadDecodeArgRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Short_BadDecodeArg__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Short_BadDecodeArgRawMonitor created = new Short_BadDecodeArgRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_decode(s, nm);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Character_ValidateChar_charCountEvent(int codePoint) {
		Character_ValidateChar_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Character_ValidateCharRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Character_ValidateChar__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Character_ValidateCharRawMonitor created = new Character_ValidateCharRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_charCount(codePoint);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Character_ValidateChar_toCodePointEvent(char high, char low) {
		Character_ValidateChar_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Character_ValidateCharRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Character_ValidateChar__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Character_ValidateCharRawMonitor created = new Character_ValidateCharRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_toCodePoint(high, low);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Comparable_CompareToNull_nullcompareEvent(Object o) {
		Comparable_CompareToNull_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Comparable_CompareToNullRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Comparable_CompareToNull__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Comparable_CompareToNullRawMonitor created = new Comparable_CompareToNullRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_nullcompare(o);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StrictMath_ContendedRandom_onethread_useEvent(Thread t) {
		StrictMath_ContendedRandom_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		StrictMath_ContendedRandomMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = StrictMath_ContendedRandom__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			StrictMath_ContendedRandomMonitor created = new StrictMath_ContendedRandomMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final StrictMath_ContendedRandomMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_onethread_use(t);
		if(matchedEntryfinalMonitor.StrictMath_ContendedRandomMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void StrictMath_ContendedRandom_otherthread_useEvent(Thread t) {
		StrictMath_ContendedRandom_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		StrictMath_ContendedRandomMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = StrictMath_ContendedRandom__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			StrictMath_ContendedRandomMonitor created = new StrictMath_ContendedRandomMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		final StrictMath_ContendedRandomMonitor matchedEntryfinalMonitor = matchedEntry;
		matchedEntry.Prop_1_event_otherthread_use(t);
		if(matchedEntryfinalMonitor.StrictMath_ContendedRandomMonitor_Prop_1_Category_fail) {
			matchedEntryfinalMonitor.Prop_1_handler_fail();
		}

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void System_NullArrayCopy_null_arraycopyEvent(Object src, int srcPos, Object dest, int destPos, int length) {
		System_NullArrayCopy_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		System_NullArrayCopyRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = System_NullArrayCopy__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			System_NullArrayCopyRawMonitor created = new System_NullArrayCopyRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_null_arraycopy(src, srcPos, dest, destPos, length);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Float_StaticFactory_constructor_createEvent(Float f) {
		Float_StaticFactory_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Float_StaticFactoryRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Float_StaticFactory__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Float_StaticFactoryRawMonitor created = new Float_StaticFactoryRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_constructor_create(f);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Byte_BadParsingArgs_bad_argEvent(String s, int radix) {
		Byte_BadParsingArgs_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Byte_BadParsingArgsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Byte_BadParsingArgs__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Byte_BadParsingArgsRawMonitor created = new Byte_BadParsingArgsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_arg(s, radix);

		MultiSpec_1_RVMLock.unlock();
	}

	public static final void Byte_BadParsingArgs_bad_arg2Event(String s) {
		Byte_BadParsingArgs_activated = true;
		while (!MultiSpec_1_RVMLock.tryLock()) {
			Thread.yield();
		}

		Byte_BadParsingArgsRawMonitor matchedEntry = null;
		{
			// FindOrCreateEntry
			matchedEntry = Byte_BadParsingArgs__Map;
		}
		// D(X) main:1
		if ((matchedEntry == null) ) {
			// D(X) main:4
			Byte_BadParsingArgsRawMonitor created = new Byte_BadParsingArgsRawMonitor() ;
			matchedEntry = created;
		}
		// D(X) main:8--9
		matchedEntry.event_bad_arg2(s);

		MultiSpec_1_RVMLock.unlock();
	}

}
