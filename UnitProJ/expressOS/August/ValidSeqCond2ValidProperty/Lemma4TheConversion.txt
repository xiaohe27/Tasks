predicate listCond(mySeq: seq<INode>)
reads mySeq, (set nd | nd in mySeq);
{
null !in mySeq &&
(forall i :: 0 <= i < |mySeq|-1 ==> mySeq[i].next == mySeq[i+1]
	&& mySeq[i].footprint == {mySeq[i]} + mySeq[i+1].footprint
	&& mySeq[i].tailContents == [mySeq[i+1].data] + mySeq[i+1].tailContents
	&& mySeq[i].spine == [mySeq[i]] + mySeq[i+1].spine)
&& (forall i, j :: 0 <= i < j < |mySeq| ==> mySeq[i] !in mySeq[j].footprint)
}


predicate validSeqCond(mySeq: seq<INode>)
reads mySeq, (set nd | nd in mySeq);
{
listCond(mySeq) 
&& (mySeq != [] ==> mySeq[|mySeq|-1].next == null
&& mySeq[|mySeq|-1].footprint == {mySeq[|mySeq|-1]}
&& mySeq[|mySeq|-1].tailContents == []
&& mySeq[|mySeq|-1].spine == [mySeq[|mySeq|-1]])
}


predicate validSeqLemma2(mySeq: seq<INode>)
requires mySeq != [];

requires validSeqCond(mySeq);
reads mySeq, (set nd | nd in mySeq);
ensures validSeqLemma2(mySeq);
ensures mySeq[0].spine == mySeq;
ensures validSeqCond(mySeq[0].spine);
{
if |mySeq| == 1 then true
else mySeq[0].spine == [mySeq[0]] + mySeq[1].spine
	&& validSeqLemma2(mySeq[1..])
}


predicate validSeqLenLemma(mySeq: seq<INode>)
requires mySeq != [];

requires validSeqCond(mySeq);
reads mySeq, (set nd | nd in mySeq);
ensures validSeqLenLemma(mySeq);
ensures |mySeq| == |mySeq[0].footprint|;
ensures forall nd :: nd in mySeq ==> nd in mySeq[0].footprint;
{
if |mySeq| == 1 then true
else mySeq[0] in mySeq[0].footprint &&
	{mySeq[0]} + mySeq[1].footprint == mySeq[0].footprint &&
	mySeq[0] !in mySeq[1].footprint &&
	|mySeq[0].footprint| == |mySeq[1].footprint| + 1 &&
	mySeq[0].spine == [mySeq[0]] + mySeq[1].spine &&
	|mySeq[0].spine| == |mySeq[1].spine| + 1 &&
	validSeqLenLemma(mySeq[1..])
}


predicate validSeqGoodLemma(mySeq: seq<INode>)
requires mySeq != [];

requires validSeqCond(mySeq);
reads mySeq, (set nd | nd in mySeq);
ensures validSeqGoodLemma(mySeq);
ensures mySeq[0].good();
{
if |mySeq| == 1 then true
else 
 mySeq[0].next == mySeq[1] &&
 mySeq[0] in mySeq[0].footprint &&
 mySeq[0] !in mySeq[1].footprint &&
 mySeq[1] in mySeq[0].footprint &&
 mySeq[0].spine == [mySeq[0]] + mySeq[1].spine &&
 mySeq[0].tailContents == [mySeq[1].data] + mySeq[1].tailContents

 && validSeqGoodLemma(mySeq[1..])
}



predicate validSeqLemma(mySeq: seq<INode>)
requires mySeq != [];

requires validSeqCond(mySeq);
reads mySeq, (set nd | nd in mySeq);
ensures validSeqLemma(mySeq);
ensures mySeq[0].Valid();
{
if(|mySeq| == 1) then true
else    validSeqLemma2(mySeq)
	&& validSeqGoodLemma(mySeq)
	&& validSeqLenLemma(mySeq)
	&& validSeqLemma(mySeq[1..])
}