invariant -1 <= index <= |mySeq|-1;

invariant listInv(mySeq);

invariant forall i :: 0 <= i < |mySeq| ==> |mySeq|-i <= |mySeq[i].spine|;
invariant forall i :: 0 <= i < |mySeq| ==> |mySeq|-i-1 <= |mySeq[i].tailContents|;

invariant newNd !in mySeq;
invariant newNd != null && newNd.Valid() && newNd.data == d;
invariant newNd.footprint !! (set nd | nd in mySeq);
invariant newNd.data == old(newNd.data) 
  && newNd.next == old(newNd.next)
  && newNd.footprint == old(newNd.footprint)
  && newNd.tailContents == old(newNd.tailContents)
  && newNd.spine == old(newNd.spine);

invariant mySeq[|mySeq|-1].next == newNd;

invariant index == |mySeq|-1 ==> (mySeq[|mySeq|-1].footprint + {newNd} == 
	{mySeq[|mySeq|-1]} + newNd.footprint

&& mySeq[|mySeq|-1].spine[0..1] + [newNd] + mySeq[|mySeq|-1].spine[1..]  == 
	[mySeq[|mySeq|-1]] + newNd.spine

&& [d] + mySeq[|mySeq|-1].tailContents == 
	[newNd.data] + newNd.tailContents);


invariant forall i :: 0 <= i < index ==>
	mySeq[i].tailContents == [mySeq[i+1].data] + mySeq[i+1].tailContents

	&& mySeq[i].footprint == {mySeq[i]} + mySeq[i+1].footprint
	&& mySeq[i].spine == [mySeq[i]] + mySeq[i+1].spine;

invariant 0 <= index < |mySeq| - 1 ==> mySeq[index].tailContents[0..|mySeq|-index-1] + [d]
 + mySeq[index].tailContents[|mySeq|-index-1..] == 
 [mySeq[index+1].data] + mySeq[index+1].tailContents;

invariant 0 <= index < |mySeq| - 1 ==> mySeq[index].footprint + {newNd} == 
	{mySeq[index]} + mySeq[index+1].footprint;

invariant 0 <= index < |mySeq| - 1 ==> mySeq[index].spine[0..|mySeq|-index] + [newNd]
 + mySeq[index].spine[|mySeq|-index..] == [mySeq[index]] + mySeq[index+1].spine;


invariant index < |mySeq| - 1 ==> mySeq[index+1].spine == mySeq[index+1..] +
						newNd.spine;

invariant index < |mySeq| - 1 ==> mySeq[index+1].Valid();
