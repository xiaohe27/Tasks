ghost method updateCurIndex(mySeq:seq<INode>, index:int)
requires 0 <= index <= |mySeq| - 2;
requires listCond(mySeq);
requires mySeq[index+1].Valid();
requires mySeq[index+1].spine == mySeq[index+1..];

modifies mySeq[index];

ensures listCond(mySeq);

ensures mySeq[index].Valid();

ensures mySeq[index].spine == mySeq[index..];
{
mySeq[index].tailContents := [mySeq[index+1].data] + mySeq[index+1].tailContents;

mySeq[index].footprint := {mySeq[index]} + mySeq[index+1].footprint;

mySeq[index].spine := [mySeq[index]] + mySeq[index+1].spine;
}


ghost method updateSeq(mySeq:seq<INode>, mid:int)

requires mySeq != [];
requires listCond(mySeq);

requires 0 <= mid < |mySeq|;
requires mySeq[mid].Valid();
requires mySeq[mid].spine == mySeq[mid..];
requires mySeq[|mySeq|-1].next == null;	
	
modifies mySeq;

ensures listCond(mySeq);
ensures forall nd :: nd in mySeq ==> nd.Valid();
{
ghost var index := mid - 1;

while(index >= 0)
invariant -1 <= index <= mid - 1;
invariant listCond(mySeq);
invariant mySeq[index+1].Valid(); 
invariant mySeq[mid].Valid();
invariant mySeq[index+1].spine == mySeq[index+1..];
invariant mySeq[|mySeq|-1].next == null;
{
updateCurIndex(mySeq, index);

index := index - 1;
}

assert seqV(mySeq);

}
