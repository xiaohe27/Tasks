// Dafny program verifier version 1.9.5.20511, Copyright (c) 2003-2015, Microsoft.
// Command Line Options: /noVerify /print:INode.dfy.bpl INode.dfy

const $$Language$Dafny: bool;

axiom $$Language$Dafny;

type Ty;

const unique TBool: Ty;

const unique TChar: Ty;

const unique TInt: Ty;

const unique TNat: Ty;

const unique TReal: Ty;

function TSet(Ty) : Ty;

function TISet(Ty) : Ty;

function TMultiSet(Ty) : Ty;

function TSeq(Ty) : Ty;

function TMap(Ty, Ty) : Ty;

function TIMap(Ty, Ty) : Ty;

function Inv0_TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

function Inv0_TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

function Inv0_TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

function Inv0_TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

function Inv0_TMap(Ty) : Ty;

function Inv1_TMap(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

function Inv0_TIMap(Ty) : Ty;

function Inv1_TIMap(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

type TyTag;

function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagNat: TyTag;

const unique TagReal: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

axiom Tag(TBool) == TagBool;

axiom Tag(TChar) == TagChar;

axiom Tag(TInt) == TagInt;

axiom Tag(TNat) == TagNat;

axiom Tag(TReal) == TagReal;

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

function {:identity} LitInt(x: int) : int;

axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

function {:identity} LitReal(x: real) : real;

axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

function {:identity} Lit<T>(x: T) : T;

axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

type char;

function char#FromInt(int) : char;

function char#ToInt(char) : int;

axiom (forall ch: char :: { char#ToInt(ch) } char#FromInt(char#ToInt(ch)) == ch);

axiom (forall n: int :: 
  { char#FromInt(n) } 
  0 <= n && n < 65536 ==> char#ToInt(char#FromInt(n)) == n);

type ref;

const null: ref;

const unique NoTraitAtAll: ClassName;

function TraitParent(ClassName) : ClassName;

type Box;

const $ArbitraryBoxValue: Box;

function $Box<T>(T) : Box;

function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TNat) } 
  $IsBox(bx, TNat) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TNat));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set Box) == bx && $Is($Unbox(bx): Set Box, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet Box) == bx && $Is($Unbox(bx): ISet Box, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet Box) == bx
       && $Is($Unbox(bx): MultiSet Box, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq Box) == bx && $Is($Unbox(bx): Seq Box, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map Box Box) == bx && $Is($Unbox(bx): Map Box Box, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap Box Box) == bx
       && $Is($Unbox(bx): IMap Box Box, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

function $Is<T>(T, Ty) : bool;

function $IsAlloc<T>(T, Ty, Heap) : bool;

function $IsBox<T>(T, Ty) : bool;

function $IsAllocBox<T>(T, Ty, Heap) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: int :: { $Is(v, TNat) } $Is(v, TNat) <==> v >= 0);

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TNat, h) } $IsAlloc(v, TNat, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall v: Set Box, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: ISet Box, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq Box, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Set Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx] ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx]
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

function Tclass._System.object() : Ty;

function dtype(ref) : Ty;

function TypeTuple(a: ClassName, b: ClassName) : ClassName;

function TypeTupleCar(ClassName) : ClassName;

function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

function SetRef_to_SetBox(s: [ref]bool) : Set Box;

axiom (forall s: [ref]bool, bx: Box :: 
  { SetRef_to_SetBox(s)[bx] } 
  SetRef_to_SetBox(s)[bx] == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object())));

type DatatypeType;

type DtCtorId;

function DatatypeCtorId(DatatypeType) : DtCtorId;

function DtRank(DatatypeType) : int;

function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

function $LS(LayerType) : LayerType;

function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field _;

function FDim<T>(Field T) : int;

function IndexField(int) : Field Box;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

function IndexField_Inverse<T>(Field T) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

function MultiIndexField(Field Box, int) : Field Box;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

function MultiIndexField_Inverse0<T>(Field T) : Field T;

function MultiIndexField_Inverse1<T>(Field T) : int;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

function DeclType<T>(Field T) : ClassName;

type NameFamily;

function DeclName<T>(Field T) : NameFamily;

function FieldOfDecl<alpha>(ClassName, NameFamily) : Field alpha;

axiom (forall<T> cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field T } 
  DeclType(FieldOfDecl(cl, nm): Field T) == cl
     && DeclName(FieldOfDecl(cl, nm): Field T) == nm);

function $IsGhostField<T>(Field T) : bool;

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field bool;

axiom FDim(alloc) == 0 && !$IsGhostField(alloc);

function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: 0 <= _System.array.Length(o));

function Int(x: real) : int;

axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));

function Real(x: int) : real;

axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

function {:inline true} _System.real.Trunc(x: real) : int
{
  Int(x)
}

type Heap = <alpha>[ref,Field alpha]alpha;

function {:inline true} read<alpha>(H: Heap, r: ref, f: Field alpha) : alpha
{
  H[r, f]
}

function {:inline true} update<alpha>(H: Heap, r: ref, f: Field alpha, v: alpha) : Heap
{
  H[r, f := v]
}

function $IsGoodHeap(Heap) : bool;

function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

function $HeapSucc(Heap, Heap) : bool;

axiom (forall<alpha> h: Heap, r: ref, f: Field alpha, x: alpha :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: { read(k, o, alloc) } read(h, o, alloc) ==> read(k, o, alloc)));

function $HeapSuccGhost(Heap, Heap) : bool;

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall<alpha> o: ref, f: Field alpha :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

type TickType;

var $Tick: TickType;

procedure $YieldHavoc(this: ref, rds: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> 
    $o == this || rds[$Box($o)] || nw[$Box($o)]
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set Box, modi: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> 
    rds[$Box($o)] && !modi[$Box($o)] && $o != this
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || $o == this
       || modi[$Box($o)]
       || nw[$Box($o)]);
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field (Set Box))
   returns (s: Set Box);
  ensures (forall bx: Box :: 
  { s[bx] } 
  s[bx]
     <==> read(newHeap, this, NW)[bx]
       || (
        $Unbox(bx) != null
         && !read(prevHeap, $Unbox(bx): ref, alloc)
         && read(newHeap, $Unbox(bx): ref, alloc)));



type Set T = [T]bool;

function Set#Card<T>(Set T) : int;

axiom (forall<T> s: Set T :: { Set#Card(s) } 0 <= Set#Card(s));

function Set#Empty<T>() : Set T;

axiom (forall<T> o: T :: { Set#Empty()[o] } !Set#Empty()[o]);

axiom (forall<T> s: Set T :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0 ==> (exists x: T :: s[x])));

function Set#Singleton<T>(T) : Set T;

axiom (forall<T> r: T :: { Set#Singleton(r) } Set#Singleton(r)[r]);

axiom (forall<T> r: T, o: T :: 
  { Set#Singleton(r)[o] } 
  Set#Singleton(r)[o] <==> r == o);

axiom (forall<T> r: T :: 
  { Set#Card(Set#Singleton(r)) } 
  Set#Card(Set#Singleton(r)) == 1);

function Set#UnionOne<T>(Set T, T) : Set T;

axiom (forall<T> a: Set T, x: T, o: T :: 
  { Set#UnionOne(a, x)[o] } 
  Set#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: Set T, x: T :: { Set#UnionOne(a, x) } Set#UnionOne(a, x)[x]);

axiom (forall<T> a: Set T, x: T, y: T :: 
  { Set#UnionOne(a, x), a[y] } 
  a[y] ==> Set#UnionOne(a, x)[y]);

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

function Set#Union<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Union(a, b)[o] } 
  Set#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), a[y] } 
  a[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), b[y] } 
  b[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

function Set#Intersection<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Intersection(a, b)[o] } 
  Set#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

function Set#Difference<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Difference(a, b)[o] } 
  Set#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Difference(a, b), b[y] } 
  b[y] ==> !Set#Difference(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

function Set#Subset<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function Set#Equal<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: Set T, b: Set T :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

function Set#Disjoint<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

type ISet T = [T]bool;

function ISet#Empty<T>() : Set T;

axiom (forall<T> o: T :: { ISet#Empty()[o] } !ISet#Empty()[o]);

function ISet#UnionOne<T>(ISet T, T) : ISet T;

axiom (forall<T> a: ISet T, x: T, o: T :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: ISet T, x: T :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall<T> a: ISet T, x: T, y: T :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

function ISet#Union<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

function ISet#Intersection<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

function ISet#Difference<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

function ISet#Subset<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function ISet#Equal<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) ==> a == b);

function ISet#Disjoint<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet T = [T]int;

function $IsGoodMultiSet<T>(ms: MultiSet T) : bool;

axiom (forall<T> ms: MultiSet T :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: T :: { ms[bx] } 0 <= ms[bx] && ms[bx] <= MultiSet#Card(ms)));

function MultiSet#Card<T>(MultiSet T) : int;

axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall<T> s: MultiSet T, x: T, n: int :: 
  { MultiSet#Card(s[x := n]) } 
  0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);

function MultiSet#Empty<T>() : MultiSet T;

axiom (forall<T> o: T :: { MultiSet#Empty()[o] } MultiSet#Empty()[o] == 0);

axiom (forall<T> s: MultiSet T :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0 ==> (exists x: T :: 0 < s[x])));

function MultiSet#Singleton<T>(T) : MultiSet T;

axiom (forall<T> r: T, o: T :: 
  { MultiSet#Singleton(r)[o] } 
  (MultiSet#Singleton(r)[o] == 1 <==> r == o)
     && (MultiSet#Singleton(r)[o] == 0 <==> r != o));

axiom (forall<T> r: T :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

function MultiSet#UnionOne<T>(MultiSet T, T) : MultiSet T;

axiom (forall<T> a: MultiSet T, x: T, o: T :: 
  { MultiSet#UnionOne(a, x)[o] } 
  0 < MultiSet#UnionOne(a, x)[o] <==> o == x || 0 < a[o]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#UnionOne(a, x)[x] == a[x] + 1);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  0 < a[y] ==> 0 < MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  x != y ==> a[y] == MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

function MultiSet#Union<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Union(a, b)[o] } 
  MultiSet#Union(a, b)[o] == a[o] + b[o]);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Intersection(a, b)[o] } 
  MultiSet#Intersection(a, b)[o] == Math#min(a[o], b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

function MultiSet#Difference<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Difference(a, b)[o] } 
  MultiSet#Difference(a, b)[o] == Math#clip(a[o] - b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T, y: T :: 
  { MultiSet#Difference(a, b), b[y], a[y] } 
  a[y] <= b[y] ==> MultiSet#Difference(a, b)[y] == 0);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

function MultiSet#Subset<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <= b[o]));

function MultiSet#Equal<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] == b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: T :: { a[o] } { b[o] } a[o] == 0 || b[o] == 0));

function MultiSet#FromSet<T>(Set T) : MultiSet T;

axiom (forall<T> s: Set T, a: T :: 
  { MultiSet#FromSet(s)[a] } 
  (MultiSet#FromSet(s)[a] == 0 <==> !s[a])
     && (MultiSet#FromSet(s)[a] == 1 <==> s[a]));

axiom (forall<T> s: Set T :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

function MultiSet#FromSeq<T>(Seq T) : MultiSet T;

axiom (forall<T> s: Seq T :: 
  { MultiSet#FromSeq(s) } 
  $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall<T> s: Seq T :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall<T> s: Seq T, v: T :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall<T>  :: 
  MultiSet#FromSeq(Seq#Empty(): Seq T) == MultiSet#Empty(): MultiSet T);

axiom (forall<T> a: Seq T, b: Seq T :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall<T> s: Seq T, i: int, v: T, x: T :: 
  { MultiSet#FromSeq(Seq#Update(s, i, v))[x] } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#FromSeq(Seq#Update(s, i, v))[x]
       == MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
        MultiSet#Singleton(v))[x]);

axiom (forall<T> s: Seq T, x: T :: 
  { MultiSet#FromSeq(s)[x] } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#FromSeq(s)[x]);

type Seq _;

function Seq#Length<T>(Seq T) : int;

axiom (forall<T> s: Seq T :: { Seq#Length(s) } 0 <= Seq#Length(s));

function Seq#Empty<T>() : Seq T;

axiom (forall<T>  :: Seq#Length(Seq#Empty(): Seq T) == 0);

axiom (forall<T> s: Seq T :: 
  { Seq#Length(s) } 
  Seq#Length(s) == 0 ==> s == Seq#Empty());

axiom (forall<T> t: Ty :: { $Is(Seq#Empty(): Seq T, t) } $Is(Seq#Empty(): Seq T, t));

function Seq#Singleton<T>(T) : Seq T;

axiom (forall<T> t: T :: 
  { Seq#Length(Seq#Singleton(t)) } 
  Seq#Length(Seq#Singleton(t)) == 1);

function Seq#Build<T>(s: Seq T, val: T) : Seq T;

axiom (forall<T> s: Seq T, v: T :: 
  { Seq#Length(Seq#Build(s, v)) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s: Seq Box, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

function Seq#Append<T>(Seq T, Seq T) : Seq T;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

axiom (forall s0: Seq Box, s1: Seq Box, t: Ty :: 
  { $Is(Seq#Append(s0, s1), t) } 
  $Is(s0, t) && $Is(s1, t) ==> $Is(Seq#Append(s0, s1), t));

function Seq#Index<T>(Seq T, int) : T;

axiom (forall<T> t: T :: 
  { Seq#Index(Seq#Singleton(t), 0) } 
  Seq#Index(Seq#Singleton(t), 0) == t);

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

function Seq#Update<T>(Seq T, int, T) : Seq T;

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

function Seq#Contains<T>(Seq T, T) : bool;

axiom (forall<T> s: Seq T, x: T :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> x: T :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall<T> s0: Seq T, s1: Seq T, x: T :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall<T> s: Seq T, v: T, x: T :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

function Seq#Equal<T>(Seq T, Seq T) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall<T> a: Seq T, b: Seq T :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

function Seq#SameUntil<T>(Seq T, Seq T, int) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

function Seq#Take<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

function Seq#Drop<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall<T> s: Seq T, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall<T> s: Seq T, t: Seq T :: 
  { Seq#Append(s, t) } 
  Seq#Take(Seq#Append(s, t), Seq#Length(s)) == s
     && Seq#Drop(Seq#Append(s, t), Seq#Length(s)) == t);

function Seq#FromArray(h: Heap, a: ref) : Seq Box;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq Box, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $HeapSucc(h0, h1)
       && (forall i: int :: 
        0 <= i && i < _System.array.Length(a)
           ==> read(h0, a, IndexField(i)) == read(h1, a, IndexField(i)))
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field Box)));

axiom (forall<T> s: Seq T, v: T, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

function Seq#Rank<T>(Seq T) : int;

axiom (forall s: Seq Box, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Drop(s, n) } 
  n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall<T> s: Seq T, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

type Map _ _;

function Map#Domain<U,V>(Map U V) : [U]bool;

function Map#Elements<U,V>(Map U V) : [U]V;

function Map#Card<U,V>(Map U V) : int;

axiom (forall<U,V> m: Map U V :: { Map#Card(m) } 0 <= Map#Card(m));

function Map#Empty<U,V>() : Map U V;

axiom (forall<U,V> u: U :: 
  { Map#Domain(Map#Empty(): Map U V)[u] } 
  !Map#Domain(Map#Empty(): Map U V)[u]);

axiom (forall<U,V> m: Map U V :: 
  { Map#Card(m) } 
  (Map#Card(m) == 0 <==> m == Map#Empty())
     && (Map#Card(m) != 0 ==> (exists x: U :: Map#Domain(m)[x])));

function Map#Glue<U,V>([U]bool, [U]V, Ty) : Map U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { $Is(Map#Glue(a, b, t), t) } 
  $Is(Map#Glue(a, b, t), t));

function Map#Build<U,V>(Map U V, U, V) : Map U V;

axiom (forall<U,V> m: Map U V, u: U, u': U, v: V :: 
  { Map#Domain(Map#Build(m, u, v))[u'] } { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Map#Domain(Map#Build(m, u, v))[u'] && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Map#Domain(Map#Build(m, u, v))[u'] == Map#Domain(m)[u']
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

function Map#Equal<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: U :: Map#Domain(m)[u] == Map#Domain(m')[u])
       && (forall u: U :: Map#Domain(m)[u] ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m') ==> m == m');

function Map#Disjoint<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: U :: 
      { Map#Domain(m)[o] } { Map#Domain(m')[o] } 
      !Map#Domain(m)[o] || !Map#Domain(m')[o]));

type IMap _ _;

function IMap#Domain<U,V>(IMap U V) : [U]bool;

function IMap#Elements<U,V>(IMap U V) : [U]V;

function IMap#Empty<U,V>() : IMap U V;

axiom (forall<U,V> u: U :: 
  { IMap#Domain(IMap#Empty(): IMap U V)[u] } 
  !IMap#Domain(IMap#Empty(): IMap U V)[u]);

function IMap#Glue<U,V>([U]bool, [U]V, Ty) : IMap U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { $Is(IMap#Glue(a, b, t), t) } 
  $Is(IMap#Glue(a, b, t), t));

function IMap#Build<U,V>(IMap U V, U, V) : IMap U V;

axiom (forall<U,V> m: IMap U V, u: U, u': U, v: V :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

function IMap#Equal<U,V>(IMap U V, IMap U V) : bool;

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: U :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: U :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

function INTERNAL_add_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);

function INTERNAL_sub_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);

function INTERNAL_mul_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);

function INTERNAL_div_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);

function INTERNAL_mod_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);

function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));

function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));

function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));

function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));

const unique class._System.object: ClassName;

// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object;

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// object: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object()) } 
  $Is($o, Tclass._System.object()));

// object: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object(), $h) } 
  $IsAlloc($o, Tclass._System.object(), $h) <==> $o == null || read($h, $o, alloc));

const unique class._System.array: ClassName;

function Tclass._System.array(Ty) : Ty;

// Tclass._System.array Tag
axiom (forall #$arg: Ty :: 
  { Tclass._System.array(#$arg) } 
  Tag(Tclass._System.array(#$arg)) == Tagclass._System.array);

const unique Tagclass._System.array: TyTag;

// Tclass._System.array injectivity 0
axiom (forall #$arg: Ty :: 
  { Tclass._System.array(#$arg) } 
  Tclass._System.array_0(Tclass._System.array(#$arg)) == #$arg);

function Tclass._System.array_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.array
axiom (forall #$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(#$arg)) } 
  $IsBox(bx, Tclass._System.array(#$arg))
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.array(#$arg)));

// array.: Allocation axiom
axiom (forall #$arg: Ty, $i0: int, $h: Heap, $o: ref :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array(#$arg) } 
  $IsGoodHeap($h)
       && $o != null
       && dtype($o) == Tclass._System.array(#$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), #$arg)
       && (read($h, $o, alloc) ==> $IsAllocBox(read($h, $o, IndexField($i0)), #$arg, $h)));

// array: Class $Is
axiom (forall #$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array(#$arg)) } 
  $Is($o, Tclass._System.array(#$arg))
     <==> $o == null || dtype($o) == Tclass._System.array(#$arg));

// array: Class $IsAlloc
axiom (forall #$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array(#$arg), $h) } 
  $IsAlloc($o, Tclass._System.array(#$arg), $h)
     <==> $o == null || read($h, $o, alloc));

// array.Length: Allocation axiom
axiom (forall #$arg: Ty, $h: Heap, $o: ref :: 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._System.array(#$arg)
     ==> $Is(_System.array.Length($o), TInt)
       && (read($h, $o, alloc) ==> $IsAlloc(_System.array.Length($o), TInt, $h)));

function Tclass._System.___hFunc0(Ty) : Ty;

// Tclass._System.___hFunc0 Tag
axiom (forall #$T0: Ty :: 
  { Tclass._System.___hFunc0(#$T0) } 
  Tag(Tclass._System.___hFunc0(#$T0)) == Tagclass._System.___hFunc0);

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$T0: Ty :: 
  { Tclass._System.___hFunc0(#$T0) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$T0)) == #$T0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$T0: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$T0)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$T0))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$T0)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set Box) : HandleType;

function Apply0(Ty, HandleType, Heap) : Box;

function Requires0(Ty, HandleType, Heap) : bool;

function Reads0(Ty, HandleType, Heap) : Set Box;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Apply0(t0, Handle0(h, r, rd), heap) } 
  Apply0(t0, Handle0(h, r, rd), heap) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Requires0(t0, Handle0(h, r, rd), heap) } 
  r[heap] ==> Requires0(t0, Handle0(h, r, rd), heap));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box, bx: Box :: 
  { Reads0(t0, Handle0(h, r, rd), heap)[bx] } 
  Reads0(t0, Handle0(h, r, rd), heap)[bx] == rd[heap][bx]);

function {:inline true} _System.___hFunc0.requires(t0: Ty, heap: Heap, f: HandleType) : bool
{
  Requires0(t0, f, heap)
}

function {:inline true} _System.___hFunc0.requires#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline true} _System.___hFunc0.reads(t0: Ty, heap: Heap, f: HandleType) : Set Box
{
  Reads0(t0, f, heap)
}

function {:inline true} _System.___hFunc0.reads#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads0(t0, f, h0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, f, h0) == Reads0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads0(t0, f, h1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, f, h0) == Reads0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads0(t0, f, h0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, f, h0) == Requires0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads0(t0, f, h1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, f, h0) == Requires0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads0(t0, f, h0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, f, h0) == Apply0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads0(t0, f, h1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, f, h0) == Apply0(t0, f, h1));

axiom (forall t0: Ty, h: Heap, f: HandleType :: 
  { Apply0(t0, f, h) } 
  $IsGoodHeap(h)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> $IsBox(Apply0(t0, f, h), t0) && $IsAllocBox(Apply0(t0, f, h), t0, h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$T1) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$T1)) == Tagclass._System.___hFunc1);

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$T1) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$T1)) == #$T0);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$T1) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$T1)) == #$T1);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$T1)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$T1))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$T1)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set Box) : HandleType;

function Apply1(Ty, Ty, HandleType, Heap, Box) : Box;

function Requires1(Ty, Ty, HandleType, Heap, Box) : bool;

function Reads1(Ty, Ty, HandleType, Heap, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Apply1(t0, t1, Handle1(h, r, rd), heap, bx0) } 
  Apply1(t0, t1, Handle1(h, r, rd), heap, bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Requires1(t0, t1, Handle1(h, r, rd), heap, bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, Handle1(h, r, rd), heap, bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box, 
    bx: Box :: 
  { Reads1(t0, t1, Handle1(h, r, rd), heap, bx0)[bx] } 
  Reads1(t0, t1, Handle1(h, r, rd), heap, bx0)[bx] == rd[heap, bx0][bx]);

function {:inline true} _System.___hFunc1.requires(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  Requires1(t0, t1, f, heap, bx0)
}

function {:inline true} _System.___hFunc1.requires#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline true} _System.___hFunc1.reads(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : Set Box
{
  Reads1(t0, t1, f, heap, bx0)
}

function {:inline true} _System.___hFunc1.reads#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads1(t0, t1, f, h0, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, f, h0, bx0) == Reads1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads1(t0, t1, f, h1, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, f, h0, bx0) == Reads1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads1(t0, t1, f, h0, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, f, h0, bx0) == Requires1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads1(t0, t1, f, h1, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, f, h0, bx0) == Requires1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads1(t0, t1, f, h0, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, f, h0, bx0) == Apply1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads1(t0, t1, f, h1, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, f, h0, bx0) == Apply1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h: Heap, f: HandleType, bx0: Box :: 
  { Apply1(t0, t1, f, h, bx0) } 
  $IsGoodHeap(h)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> $IsBox(Apply1(t0, t1, f, h, bx0), t1)
       && $IsAllocBox(Apply1(t0, t1, f, h, bx0), t1, h));

function Tclass._System.___hFunc14(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hFunc14 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tag(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == Tagclass._System.___hFunc14);

const unique Tagclass._System.___hFunc14: TyTag;

// Tclass._System.___hFunc14 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_0(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T0);

function Tclass._System.___hFunc14_0(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_1(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T1);

function Tclass._System.___hFunc14_1(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_2(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T2);

function Tclass._System.___hFunc14_2(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_3(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T3);

function Tclass._System.___hFunc14_3(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_4(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T4);

function Tclass._System.___hFunc14_4(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_5(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T5);

function Tclass._System.___hFunc14_5(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_6(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T6);

function Tclass._System.___hFunc14_6(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_7(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T7);

function Tclass._System.___hFunc14_7(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_8(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T8);

function Tclass._System.___hFunc14_8(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_9(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T9);

function Tclass._System.___hFunc14_9(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_10(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T10);

function Tclass._System.___hFunc14_10(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_11(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T11);

function Tclass._System.___hFunc14_11(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_12(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T12);

function Tclass._System.___hFunc14_12(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_13(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T13);

function Tclass._System.___hFunc14_13(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14) } 
  Tclass._System.___hFunc14_14(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     == #$T14);

function Tclass._System.___hFunc14_14(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14)));

function Handle14([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set Box)
   : HandleType;

function Apply14(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    HandleType, 
    Heap, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires14(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    HandleType, 
    Heap, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads14(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    HandleType, 
    Heap, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      Handle14(h, r, rd), 
      heap, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      Handle14(h, r, rd), 
      heap, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      Handle14(h, r, rd), 
      heap, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13]
     ==> Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      Handle14(h, r, rd), 
      heap, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx: Box :: 
  { Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      Handle14(h, r, rd), 
      heap, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13)[bx] } 
  Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      Handle14(h, r, rd), 
      heap, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13)[bx]
     == rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13][bx]);

function {:inline true} _System.___hFunc14.requires(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box)
   : bool
{
  Requires14(t0, 
  t1, 
  t2, 
  t3, 
  t4, 
  t5, 
  t6, 
  t7, 
  t8, 
  t9, 
  t10, 
  t11, 
  t12, 
  t13, 
  t14, 
  f, 
  heap, 
  bx0, 
  bx1, 
  bx2, 
  bx3, 
  bx4, 
  bx5, 
  bx6, 
  bx7, 
  bx8, 
  bx9, 
  bx10, 
  bx11, 
  bx12, 
  bx13)
}

function {:inline true} _System.___hFunc14.requires#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box)
   : bool
{
  true
}

function {:inline true} _System.___hFunc14.reads(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box)
   : Set Box
{
  Reads14(t0, 
  t1, 
  t2, 
  t3, 
  t4, 
  t5, 
  t6, 
  t7, 
  t8, 
  t9, 
  t10, 
  t11, 
  t12, 
  t13, 
  t14, 
  f, 
  heap, 
  bx0, 
  bx1, 
  bx2, 
  bx3, 
  bx4, 
  bx5, 
  bx6, 
  bx7, 
  bx8, 
  bx9, 
  bx10, 
  bx11, 
  bx12, 
  bx13)
}

function {:inline true} _System.___hFunc14.reads#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box)
   : bool
{
  true
}

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h1, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h0)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h0)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h0)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h0)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h0)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h0)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h0)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h0)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h0)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h0)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h0)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h0)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              f, 
              h0, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h0, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h1, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h1, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h0)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h0)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h0)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h0)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h0)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h0)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h0)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h0)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h0)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h0)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h0)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h0)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              f, 
              h1, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h0, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h1, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h1, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h0)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h0)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h0)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h0)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h0)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h0)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h0)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h0)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h0)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h0)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h0)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h0)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              f, 
              h0, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h0, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h1, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h1, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h0)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h0)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h0)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h0)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h0)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h0)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h0)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h0)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h0)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h0)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h0)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h0)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              f, 
              h1, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h0, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h1, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h1, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h0)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h0)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h0)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h0)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h0)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h0)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h0)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h0)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h0)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h0)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h0)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h0)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              f, 
              h0, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h0, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h1, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h1, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h0)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h0)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h0)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h0)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h0)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h0)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h0)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h0)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h0)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h0)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h0)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h0)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && read(h0, o, alloc)
             && read(h1, o, alloc)
             && Reads14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              f, 
              h1, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h0, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        f, 
        h1, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      f, 
      h, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $IsGoodHeap(h)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h)
       && 
      $IsBox(bx2, t2)
       && $IsAllocBox(bx2, t2, h)
       && 
      $IsBox(bx3, t3)
       && $IsAllocBox(bx3, t3, h)
       && 
      $IsBox(bx4, t4)
       && $IsAllocBox(bx4, t4, h)
       && 
      $IsBox(bx5, t5)
       && $IsAllocBox(bx5, t5, h)
       && 
      $IsBox(bx6, t6)
       && $IsAllocBox(bx6, t6, h)
       && 
      $IsBox(bx7, t7)
       && $IsAllocBox(bx7, t7, h)
       && 
      $IsBox(bx8, t8)
       && $IsAllocBox(bx8, t8, h)
       && 
      $IsBox(bx9, t9)
       && $IsAllocBox(bx9, t9, h)
       && 
      $IsBox(bx10, t10)
       && $IsAllocBox(bx10, t10, h)
       && 
      $IsBox(bx11, t11)
       && $IsAllocBox(bx11, t11, h)
       && 
      $IsBox(bx12, t12)
       && $IsAllocBox(bx12, t12, h)
       && 
      $IsBox(bx13, t13)
       && $IsAllocBox(bx13, t13, h)
       && 
      $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h)
     ==> $IsBox(Apply14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          f, 
          h, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13), 
        t14)
       && $IsAllocBox(Apply14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          f, 
          h, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13), 
        t14, 
        h));

const unique class._module.Data: ClassName;

function Tclass._module.Data() : Ty;

// Tclass._module.Data Tag
axiom Tag(Tclass._module.Data()) == Tagclass._module.Data;

const unique Tagclass._module.Data: TyTag;

// Box/unbox axiom for Tclass._module.Data
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Data()) } 
  $IsBox(bx, Tclass._module.Data())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Data()));

// Data: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Data()) } 
  $Is($o, Tclass._module.Data())
     <==> $o == null || dtype($o) == Tclass._module.Data());

// Data: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Data(), $h) } 
  $IsAlloc($o, Tclass._module.Data(), $h) <==> $o == null || read($h, $o, alloc));

const unique class._module.INode: ClassName;

function Tclass._module.INode() : Ty;

// Tclass._module.INode Tag
axiom Tag(Tclass._module.INode()) == Tagclass._module.INode;

const unique Tagclass._module.INode: TyTag;

// Box/unbox axiom for Tclass._module.INode
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.INode()) } 
  $IsBox(bx, Tclass._module.INode())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.INode()));

// INode: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.INode()) } 
  $Is($o, Tclass._module.INode())
     <==> $o == null || dtype($o) == Tclass._module.INode());

// INode: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.INode(), $h) } 
  $IsAlloc($o, Tclass._module.INode(), $h) <==> $o == null || read($h, $o, alloc));

axiom FDim(_module.INode.tailContents) == 0
   && FieldOfDecl(class._module.INode, field$tailContents)
     == _module.INode.tailContents
   && $IsGhostField(_module.INode.tailContents);

const _module.INode.tailContents: Field (Seq Box);

// INode.tailContents: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.INode.tailContents) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.INode()
     ==> $Is(read($h, $o, _module.INode.tailContents), TSeq(Tclass._module.Data()))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.INode.tailContents), TSeq(Tclass._module.Data()), $h)));

axiom FDim(_module.INode.spine) == 0
   && FieldOfDecl(class._module.INode, field$spine) == _module.INode.spine
   && $IsGhostField(_module.INode.spine);

const _module.INode.spine: Field (Seq Box);

// INode.spine: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.INode.spine) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.INode()
     ==> $Is(read($h, $o, _module.INode.spine), TSeq(Tclass._module.INode()))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.INode.spine), TSeq(Tclass._module.INode()), $h)));

axiom FDim(_module.INode.footprint) == 0
   && FieldOfDecl(class._module.INode, field$footprint) == _module.INode.footprint
   && $IsGhostField(_module.INode.footprint);

const _module.INode.footprint: Field (Set Box);

// INode.footprint: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.INode.footprint) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.INode()
     ==> $Is(read($h, $o, _module.INode.footprint), TSet(Tclass._module.INode()))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.INode.footprint), TSet(Tclass._module.INode()), $h)));

axiom FDim(_module.INode.data) == 0
   && FieldOfDecl(class._module.INode, field$data) == _module.INode.data
   && !$IsGhostField(_module.INode.data);

const _module.INode.data: Field ref;

// INode.data: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.INode.data) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.INode()
     ==> $Is(read($h, $o, _module.INode.data), Tclass._module.Data())
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.INode.data), Tclass._module.Data(), $h)));

axiom FDim(_module.INode.next) == 0
   && FieldOfDecl(class._module.INode, field$next) == _module.INode.next
   && !$IsGhostField(_module.INode.next);

const _module.INode.next: Field ref;

// INode.next: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.INode.next) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.INode()
     ==> $Is(read($h, $o, _module.INode.next), Tclass._module.INode())
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.INode.next), Tclass._module.INode(), $h)));

// function declaration for _module.INode.len
function _module.INode.len($ly: LayerType, $heap: Heap, this: ref) : int;

function _module.INode.len#canCall($heap: Heap, this: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.len($LS($ly), $Heap, this) } 
  _module.INode.len($LS($ly), $Heap, this) == _module.INode.len($ly, $Heap, this));

// frame axiom for _module.INode.len
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.len($ly, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.INode.footprint)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.len($ly, $h0, this) == _module.INode.len($ly, $h1, this));

// consequence axiom for _module.INode.len
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 2 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.len($LS($ly), $Heap, this) } 
    _module.INode.len#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 2 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> _module.INode.len($LS($LZ), $Heap, this)
           == Set#Card(read($Heap, this, _module.INode.footprint))
         && Set#Card(read($Heap, this, _module.INode.footprint))
           == Seq#Length(read($Heap, this, _module.INode.tailContents)) + 1);

function _module.INode.len#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.len#requires($ly, $Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
     ==> _module.INode.len#requires($ly, $Heap, this)
       == _module.INode.Valid($LS($LZ), $Heap, this));

// definition axiom for _module.INode.len (intra-module)
axiom 0 == $ModuleContextHeight && 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.len($LS($ly), $Heap, this) } 
    _module.INode.len#canCall($Heap, this)
         || (2 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null ==> true)
         && (read($Heap, this, _module.INode.next) != null
           ==> _module.INode.len#canCall($Heap, read($Heap, this, _module.INode.next)))
         && _module.INode.len($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then 1
             else 1 + _module.INode.len($ly, $Heap, read($Heap, this, _module.INode.next))));

// definition axiom for _module.INode.len (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.len($LS($ly), $Heap, this) } 
    _module.INode.len#canCall($Heap, this)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null ==> true)
         && (read($Heap, this, _module.INode.next) != null
           ==> _module.INode.len#canCall($Heap, read($Heap, this, _module.INode.next)))
         && _module.INode.len($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then 1
             else 1 + _module.INode.len($ly, $Heap, read($Heap, this, _module.INode.next))));

procedure CheckWellformed$$_module.INode.len(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures _module.INode.len($LS($LS($LZ)), $Heap, this)
   == Set#Card(read($Heap, this, _module.INode.footprint));
  ensures Set#Card(read($Heap, this, _module.INode.footprint))
   == Seq#Length(read($Heap, this, _module.INode.tailContents)) + 1;



implementation CheckWellformed$$_module.INode.len(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    // AddWellformednessCheck for function len
    assume {:captureState "INode.dfy(12,16): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == this || read($Heap, this, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.INode.Valid#canCall($Heap, this);
    assume _module.INode.Valid($LS($LZ), $Heap, this);
    assert b$reqreads#0;
    b$reqreads#1 := $_Frame[this, _module.INode.footprint];
    assert b$reqreads#1;
    if (*)
    {
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || read($Heap, this, _module.INode.footprint)[$Box(this)]);
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (read($Heap, this, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.INode.next)));
        assume _module.INode.Valid($LS($LZ), $Heap, this);
        assert this == this
   || (Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
     && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assume this == this || _module.INode.len#canCall($Heap, this);
        if (_module.INode.len($LS($LZ), $Heap, this)
   == Set#Card(read($Heap, this, _module.INode.footprint)))
        {
        }

        assume _module.INode.len($LS($LZ), $Heap, this)
     == Set#Card(read($Heap, this, _module.INode.footprint))
   && Set#Card(read($Heap, this, _module.INode.footprint))
     == Seq#Length(read($Heap, this, _module.INode.tailContents)) + 1;
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
        b$reqreads#2 := $_Frame[this, _module.INode.next];
        if (read($Heap, this, _module.INode.next) == null)
        {
            assert true;
            assume _module.INode.len($LS($LZ), $Heap, this) == LitInt(1);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.len($LS($LZ), $Heap, this), TInt, $Heap);
            assume $Is(_module.INode.len($LS($LZ), $Heap, this), TInt);
        }
        else
        {
            b$reqreads#3 := $_Frame[this, _module.INode.next];
            assert read($Heap, this, _module.INode.next) != null;
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]);
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.next))]));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
            _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.footprint)))));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.spine)))));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                    _module.INode.data))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.tailContents)))));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Empty(): Seq Box)));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))))));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))))));
            assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.next)));
            assume _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next));
            b$reqreads#4 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == read($Heap, this, _module.INode.next)
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
            assert Set#Subset(Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))), 
    Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
   && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
    Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))));
            assume _module.INode.len#canCall($Heap, read($Heap, this, _module.INode.next));
            assert true;
            assume _module.INode.len($LS($LZ), $Heap, this)
   == 1 + _module.INode.len($LS($LZ), $Heap, read($Heap, this, _module.INode.next));
            assume _module.INode.len#canCall($Heap, read($Heap, this, _module.INode.next));
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.len($LS($LZ), $Heap, this), TInt, $Heap);
            assume $Is(_module.INode.len($LS($LZ), $Heap, this), TInt);
        }

        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
    }
}



// function declaration for _module.INode.good
function _module.INode.good($heap: Heap, this: ref) : bool;

function _module.INode.good#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.INode.good
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.good($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.INode.footprint)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.good($h0, this) == _module.INode.good($h1, this));

// consequence axiom for _module.INode.good
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 0 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.INode.good($Heap, this) } 
    _module.INode.good#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 0 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap))
       ==> true);

function _module.INode.good#requires(Heap, ref) : bool;

axiom (forall $Heap: Heap, this: ref :: 
  { _module.INode.good#requires($Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
     ==> _module.INode.good#requires($Heap, this) == true);

// definition axiom for _module.INode.good (intra-module)
axiom 0 == $ModuleContextHeight && 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.INode.good($Heap, this) } 
    _module.INode.good#canCall($Heap, this)
         || (0 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap))
       ==> (read($Heap, this, _module.INode.footprint)[$Box(this)]
           ==> 
          read($Heap, this, _module.INode.next) != null
           ==> (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
               ==> true)
             && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
               ==> true)
             && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               ==> true)
             && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               ==> true))
         && (read($Heap, this, _module.INode.footprint)[$Box(this)]
             && (read($Heap, this, _module.INode.next) != null
               ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
           ==> 
          read($Heap, this, _module.INode.next) == null
           ==> (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
               ==> true)
             && (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
               ==> true))
         && _module.INode.good($Heap, this)
           == (
            read($Heap, this, _module.INode.footprint)[$Box(this)]
             && (read($Heap, this, _module.INode.next) != null
               ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
             && (read($Heap, this, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Build(Seq#Empty(): Seq Box, $Box(this))))));

// definition axiom for _module.INode.good (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.INode.good($Heap, this) } 
    _module.INode.good#canCall($Heap, this)
         || ($IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap))
       ==> (read($Heap, this, _module.INode.footprint)[$Box(this)]
           ==> 
          read($Heap, this, _module.INode.next) != null
           ==> (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
               ==> true)
             && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
               ==> true)
             && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               ==> true)
             && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               ==> true))
         && (read($Heap, this, _module.INode.footprint)[$Box(this)]
             && (read($Heap, this, _module.INode.next) != null
               ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
           ==> 
          read($Heap, this, _module.INode.next) == null
           ==> (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
               ==> true)
             && (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
               ==> true))
         && _module.INode.good($Heap, this)
           == (
            read($Heap, this, _module.INode.footprint)[$Box(this)]
             && (read($Heap, this, _module.INode.next) != null
               ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
                 && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
             && (read($Heap, this, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Build(Seq#Empty(): Seq Box, $Box(this))))));

procedure CheckWellformed$$_module.INode.good(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.good(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;
  var b$reqreads#16: bool;
  var b$reqreads#17: bool;
  var b$reqreads#18: bool;
  var b$reqreads#19: bool;
  var b$reqreads#20: bool;
  var b$reqreads#21: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;
    b$reqreads#16 := true;
    b$reqreads#17 := true;
    b$reqreads#18 := true;
    b$reqreads#19 := true;
    b$reqreads#20 := true;
    b$reqreads#21 := true;

    // AddWellformednessCheck for function good
    assume {:captureState "INode.dfy(22,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
    b$reqreads#0 := $_Frame[this, _module.INode.footprint];
    assert b$reqreads#0;
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
        b$reqreads#1 := $_Frame[this, _module.INode.footprint];
        if (read($Heap, this, _module.INode.footprint)[$Box(this)])
        {
            b$reqreads#2 := $_Frame[this, _module.INode.next];
            if (read($Heap, this, _module.INode.next) != null)
            {
                b$reqreads#3 := $_Frame[this, _module.INode.next];
                b$reqreads#4 := $_Frame[this, _module.INode.footprint];
                if (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))])
                {
                    b$reqreads#5 := $_Frame[this, _module.INode.next];
                    assert read($Heap, this, _module.INode.next) != null;
                    b$reqreads#6 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.footprint];
                }

                if (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
   && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)])
                {
                    b$reqreads#7 := $_Frame[this, _module.INode.footprint];
                    b$reqreads#8 := $_Frame[this, _module.INode.next];
                    assert read($Heap, this, _module.INode.next) != null;
                    b$reqreads#9 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.footprint];
                }

                if (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
   && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint))))
                {
                    b$reqreads#10 := $_Frame[this, _module.INode.spine];
                    b$reqreads#11 := $_Frame[this, _module.INode.next];
                    assert read($Heap, this, _module.INode.next) != null;
                    b$reqreads#12 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.spine];
                }

                if (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
   && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
   && Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine))))
                {
                    b$reqreads#13 := $_Frame[this, _module.INode.tailContents];
                    b$reqreads#14 := $_Frame[this, _module.INode.next];
                    assert read($Heap, this, _module.INode.next) != null;
                    b$reqreads#15 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.data];
                    b$reqreads#16 := $_Frame[this, _module.INode.next];
                    assert read($Heap, this, _module.INode.next) != null;
                    b$reqreads#17 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.tailContents];
                }
            }
        }

        if (read($Heap, this, _module.INode.footprint)[$Box(this)]
   && (read($Heap, this, _module.INode.next) != null
     ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
       && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
       && Set#Equal(read($Heap, this, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
       && Seq#Equal(read($Heap, this, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
       && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))))
        {
            b$reqreads#18 := $_Frame[this, _module.INode.next];
            if (read($Heap, this, _module.INode.next) == null)
            {
                b$reqreads#19 := $_Frame[this, _module.INode.tailContents];
                if (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box))
                {
                    b$reqreads#20 := $_Frame[this, _module.INode.footprint];
                }

                if (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
                {
                    b$reqreads#21 := $_Frame[this, _module.INode.spine];
                }
            }
        }

        assert true;
        assume _module.INode.good($Heap, this)
   == (
    read($Heap, this, _module.INode.footprint)[$Box(this)]
     && (read($Heap, this, _module.INode.next) != null
       ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
         && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
         && Set#Equal(read($Heap, this, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
         && Seq#Equal(read($Heap, this, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
         && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
     && (read($Heap, this, _module.INode.next) == null
       ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
         && Set#Equal(read($Heap, this, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
         && Seq#Equal(read($Heap, this, _module.INode.spine), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(this)))));
        assume (read($Heap, this, _module.INode.footprint)[$Box(this)]
     ==> 
    read($Heap, this, _module.INode.next) != null
     ==> (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
         ==> true)
       && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
           && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
         ==> true)
       && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
           && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
           && Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
         ==> true)
       && (read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
           && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
           && Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
           && Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
         ==> true))
   && (read($Heap, this, _module.INode.footprint)[$Box(this)]
       && (read($Heap, this, _module.INode.next) != null
         ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]
           && !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
           && Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
           && Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
           && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
     ==> 
    read($Heap, this, _module.INode.next) == null
     ==> (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
         ==> true)
       && (Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
           && Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
         ==> true));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.INode.good($Heap, this), TBool, $Heap);
        assume $Is(_module.INode.good($Heap, this), TBool);
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
        assert b$reqreads#13;
        assert b$reqreads#14;
        assert b$reqreads#15;
        assert b$reqreads#16;
        assert b$reqreads#17;
        assert b$reqreads#18;
        assert b$reqreads#19;
        assert b$reqreads#20;
        assert b$reqreads#21;
    }
}



// function declaration for _module.INode.Valid
function _module.INode.Valid($ly: LayerType, $heap: Heap, this: ref) : bool;

function _module.INode.Valid#canCall($heap: Heap, this: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.Valid($LS($ly), $Heap, this) } 
  _module.INode.Valid($LS($ly), $Heap, this)
     == _module.INode.Valid($ly, $Heap, this));

// frame axiom for _module.INode.Valid
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.Valid($ly, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.INode.footprint)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.Valid($ly, $h0, this) == _module.INode.Valid($ly, $h1, this));

// consequence axiom for _module.INode.Valid
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 1 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.Valid($LS($ly), $Heap, this) } 
    _module.INode.Valid#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 1 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap))
       ==> true);

function _module.INode.Valid#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.Valid#requires($ly, $Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
     ==> _module.INode.Valid#requires($ly, $Heap, this) == true);

// definition axiom for _module.INode.Valid (intra-module)
axiom 0 == $ModuleContextHeight && 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.Valid($LS($ly), $Heap, this) } 
    _module.INode.Valid#canCall($Heap, this)
         || (1 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap))
       ==> _module.INode.good#canCall($Heap, this)
         && (_module.INode.good($Heap, this)
           ==> 
          read($Heap, this, _module.INode.next) != null
           ==> _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next)))
         && _module.INode.Valid($LS($ly), $Heap, this)
           == (_module.INode.good($Heap, this)
             && (read($Heap, this, _module.INode.next) != null
               ==> _module.INode.Valid($ly, $Heap, read($Heap, this, _module.INode.next)))));

// definition axiom for _module.INode.Valid (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.Valid($LS($ly), $Heap, this) } 
    _module.INode.Valid#canCall($Heap, this)
         || ($IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap))
       ==> _module.INode.good#canCall($Heap, this)
         && (_module.INode.good($Heap, this)
           ==> 
          read($Heap, this, _module.INode.next) != null
           ==> _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next)))
         && _module.INode.Valid($LS($ly), $Heap, this)
           == (_module.INode.good($Heap, this)
             && (read($Heap, this, _module.INode.next) != null
               ==> _module.INode.Valid($ly, $Heap, read($Heap, this, _module.INode.next)))));

procedure CheckWellformed$$_module.INode.Valid(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.Valid(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    // AddWellformednessCheck for function Valid
    assume {:captureState "INode.dfy(37,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
    b$reqreads#0 := $_Frame[this, _module.INode.footprint];
    assert b$reqreads#0;
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
        b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == this || read($Heap, this, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
        assume _module.INode.good#canCall($Heap, this);
        if (_module.INode.good($Heap, this))
        {
            b$reqreads#2 := $_Frame[this, _module.INode.next];
            if (read($Heap, this, _module.INode.next) != null)
            {
                b$reqreads#3 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                b$reqreads#4 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == read($Heap, this, _module.INode.next)
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset(Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))), 
    Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
   && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
    Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))));
                assume _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next));
            }
        }

        assert true;
        assume _module.INode.Valid($LS($LZ), $Heap, this)
   == (_module.INode.good($Heap, this)
     && (read($Heap, this, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))));
        assume _module.INode.good#canCall($Heap, this)
   && (_module.INode.good($Heap, this)
     ==> 
    read($Heap, this, _module.INode.next) != null
     ==> _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next)));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.INode.Valid($LS($LZ), $Heap, this), TBool, $Heap);
        assume $Is(_module.INode.Valid($LS($LZ), $Heap, this), TBool);
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
    }
}



// function declaration for _module.INode.ValidLemma
function _module.INode.ValidLemma($ly: LayerType, $heap: Heap, this: ref) : bool;

function _module.INode.ValidLemma#canCall($heap: Heap, this: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.ValidLemma($LS($ly), $Heap, this) } 
  _module.INode.ValidLemma($LS($ly), $Heap, this)
     == _module.INode.ValidLemma($ly, $Heap, this));

// frame axiom for _module.INode.ValidLemma
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.ValidLemma($ly, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.INode.footprint)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.ValidLemma($ly, $h0, this)
       == _module.INode.ValidLemma($ly, $h1, this));

// consequence axiom for _module.INode.ValidLemma
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 3 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.ValidLemma($LS($ly), $Heap, this) } 
    _module.INode.ValidLemma#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 3 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> _module.INode.ValidLemma($LS($LZ), $Heap, this)
         && (forall nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
               && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#0))
             ==> read($Heap, this, _module.INode.footprint)[$Box(nd#0)])
         && 
        Seq#Length(read($Heap, this, _module.INode.tailContents))
           == Set#Card(read($Heap, this, _module.INode.footprint)) - 1
         && Set#Card(read($Heap, this, _module.INode.footprint)) - 1
           == Seq#Length(read($Heap, this, _module.INode.spine)) - 1
         && (forall nd#1: ref :: 
          $Is(nd#1, Tclass._module.INode())
               && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#1))
             ==> nd#1 != null && _module.INode.Valid($LS($LZ), $Heap, nd#1)));

function _module.INode.ValidLemma#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.ValidLemma#requires($ly, $Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
     ==> _module.INode.ValidLemma#requires($ly, $Heap, this)
       == _module.INode.Valid($LS($LZ), $Heap, this));

// definition axiom for _module.INode.ValidLemma (intra-module)
axiom 0 == $ModuleContextHeight && 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.ValidLemma($LS($ly), $Heap, this) } 
    _module.INode.ValidLemma#canCall($Heap, this)
         || (3 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null ==> true)
         && (read($Heap, this, _module.INode.next) != null
           ==> 
          Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
           ==> _module.INode.ValidLemma#canCall($Heap, read($Heap, this, _module.INode.next)))
         && _module.INode.ValidLemma($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then Seq#Equal(read($Heap, this, _module.INode.spine), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
             else Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               && _module.INode.ValidLemma($ly, $Heap, read($Heap, this, _module.INode.next))));

// definition axiom for _module.INode.ValidLemma (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.ValidLemma($LS($ly), $Heap, this) } 
    _module.INode.ValidLemma#canCall($Heap, this)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null ==> true)
         && (read($Heap, this, _module.INode.next) != null
           ==> 
          Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
           ==> _module.INode.ValidLemma#canCall($Heap, read($Heap, this, _module.INode.next)))
         && _module.INode.ValidLemma($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then Seq#Equal(read($Heap, this, _module.INode.spine), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
             else Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               && _module.INode.ValidLemma($ly, $Heap, read($Heap, this, _module.INode.next))));

procedure CheckWellformed$$_module.INode.ValidLemma(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures _module.INode.ValidLemma($LS($LS($LZ)), $Heap, this);
  ensures (forall nd#2: ref :: 
  $Is(nd#2, Tclass._module.INode())
       && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#2))
     ==> read($Heap, this, _module.INode.footprint)[$Box(nd#2)]);
  ensures Seq#Length(read($Heap, this, _module.INode.tailContents))
   == Set#Card(read($Heap, this, _module.INode.footprint)) - 1;
  ensures Set#Card(read($Heap, this, _module.INode.footprint)) - 1
   == Seq#Length(read($Heap, this, _module.INode.spine)) - 1;
  ensures (forall nd#3: ref :: 
  $Is(nd#3, Tclass._module.INode())
       && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#3))
     ==> nd#3 != null && _module.INode.Valid($LS($LS($LZ)), $Heap, nd#3));



implementation CheckWellformed$$_module.INode.ValidLemma(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var nd#4: ref;
  var nd#5: ref;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;

    // AddWellformednessCheck for function ValidLemma
    assume {:captureState "INode.dfy(45,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == this || read($Heap, this, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.INode.Valid#canCall($Heap, this);
    assume _module.INode.Valid($LS($LZ), $Heap, this);
    assert b$reqreads#0;
    b$reqreads#1 := $_Frame[this, _module.INode.footprint];
    assert b$reqreads#1;
    if (*)
    {
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || read($Heap, this, _module.INode.footprint)[$Box(this)]);
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (read($Heap, this, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.INode.next)));
        assume _module.INode.Valid($LS($LZ), $Heap, this);
        assert this == this
   || (Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
     && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assume this == this || _module.INode.ValidLemma#canCall($Heap, this);
        assume _module.INode.ValidLemma($LS($LZ), $Heap, this);
        havoc nd#4;
        assume $Is(nd#4, Tclass._module.INode())
   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap);
        // Begin Comprehension WF check
        if (Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#4)))
        {
        }

        // End Comprehension WF check
        assume (forall nd#2: ref :: 
  $Is(nd#2, Tclass._module.INode())
       && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#2))
     ==> read($Heap, this, _module.INode.footprint)[$Box(nd#2)]);
        if (Seq#Length(read($Heap, this, _module.INode.tailContents))
   == Set#Card(read($Heap, this, _module.INode.footprint)) - 1)
        {
        }

        assume Seq#Length(read($Heap, this, _module.INode.tailContents))
     == Set#Card(read($Heap, this, _module.INode.footprint)) - 1
   && Set#Card(read($Heap, this, _module.INode.footprint)) - 1
     == Seq#Length(read($Heap, this, _module.INode.spine)) - 1;
        havoc nd#5;
        assume $Is(nd#5, Tclass._module.INode())
   && $IsAlloc(nd#5, Tclass._module.INode(), $Heap);
        if (*)
        {
            assume Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#5));
            assume nd#5 != null;
            assert nd#5 != null;
            assume _module.INode.Valid#canCall($Heap, nd#5);
            assume _module.INode.Valid($LS($LZ), $Heap, nd#5);
        }
        else
        {
            assume Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#5))
   ==> nd#5 != null && _module.INode.Valid($LS($LZ), $Heap, nd#5);
        }

        assume (forall nd#3: ref :: 
  $Is(nd#3, Tclass._module.INode())
       && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#3))
     ==> nd#3 != null && _module.INode.Valid($LS($LZ), $Heap, nd#3));
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
        b$reqreads#2 := $_Frame[this, _module.INode.next];
        if (read($Heap, this, _module.INode.next) == null)
        {
            b$reqreads#3 := $_Frame[this, _module.INode.spine];
            assert true;
            assume _module.INode.ValidLemma($LS($LZ), $Heap, this)
   == Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Build(Seq#Empty(): Seq Box, $Box(this)));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.ValidLemma($LS($LZ), $Heap, this), TBool, $Heap);
            assume $Is(_module.INode.ValidLemma($LS($LZ), $Heap, this), TBool);
        }
        else
        {
            b$reqreads#4 := $_Frame[this, _module.INode.spine];
            b$reqreads#5 := $_Frame[this, _module.INode.next];
            assert read($Heap, this, _module.INode.next) != null;
            b$reqreads#6 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.spine];
            if (Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine))))
            {
                b$reqreads#7 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]);
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.next))]));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
            _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.footprint)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.spine)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                    _module.INode.data))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.tailContents)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Empty(): Seq Box)));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.next)));
                assume _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next));
                b$reqreads#8 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == read($Heap, this, _module.INode.next)
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset(Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))), 
    Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
   && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
    Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))));
                assume _module.INode.ValidLemma#canCall($Heap, read($Heap, this, _module.INode.next));
            }

            assert true;
            assume _module.INode.ValidLemma($LS($LZ), $Heap, this)
   == (Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
     && _module.INode.ValidLemma($LS($LZ), $Heap, read($Heap, this, _module.INode.next)));
            assume Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
   ==> _module.INode.ValidLemma#canCall($Heap, read($Heap, this, _module.INode.next));
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.ValidLemma($LS($LZ), $Heap, this), TBool, $Heap);
            assume $Is(_module.INode.ValidLemma($LS($LZ), $Heap, this), TBool);
        }

        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
    }
}



procedure CheckWellformed$$_module.INode.init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap));
  free requires 0 == $ModuleContextHeight && 4 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.init(this: ref, d#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: init, CheckWellformed$$_module.INode.init
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume {:captureState "INode.dfy(59,12): initial state"} true;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    assume {:captureState "INode.dfy(61,13): post-state"} true;
    assume _module.INode.Valid#canCall($Heap, this);
    assume _module.INode.Valid($LS($LZ), $Heap, this);
    assume read($Heap, this, _module.INode.data) == d#0;
    assume read($Heap, this, _module.INode.next) == null;
    assume Set#Equal(read($Heap, this, _module.INode.footprint), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(this)));
    assume Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box);
    assume Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Build(Seq#Empty(): Seq Box, $Box(this)));
    assume (forall $o: ref :: 
  { read(old($Heap), $o, alloc) } 
  $o != null && read($Heap, this, _module.INode.footprint)[$Box($o)] && $o != this
     ==> !read(old($Heap), $o, alloc));
}



procedure InterModuleCall$$_module.INode.init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.INode.Valid#canCall($Heap, this);
  ensures _module.INode.Valid($LS($LS($LZ)), $Heap, this);
  free ensures true;
  ensures read($Heap, this, _module.INode.data) == d#0;
  free ensures true;
  ensures read($Heap, this, _module.INode.next) == null;
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.INode.footprint), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(this)));
  free ensures true;
  ensures Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box);
  free ensures true;
  ensures Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Build(Seq#Empty(): Seq Box, $Box(this)));
  free ensures true;
  ensures (forall $o: ref :: 
  { read(old($Heap), $o, alloc) } 
  $o != null && read($Heap, this, _module.INode.footprint)[$Box($o)] && $o != this
     ==> !read(old($Heap), $o, alloc));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.INode.init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.INode.Valid#canCall($Heap, this);
  free ensures _module.INode.Valid#canCall($Heap, this)
   && 
  _module.INode.Valid($LS($LZ), $Heap, this)
   && 
  _module.INode.good($Heap, this)
   && (read($Heap, this, _module.INode.next) != null
     ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next)));
  free ensures true;
  ensures read($Heap, this, _module.INode.data) == d#0;
  free ensures true;
  ensures read($Heap, this, _module.INode.next) == null;
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.INode.footprint), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(this)));
  free ensures true;
  ensures Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box);
  free ensures true;
  ensures Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Build(Seq#Empty(): Seq Box, $Box(this)));
  free ensures true;
  ensures (forall $o: ref :: 
  { read(old($Heap), $o, alloc) } 
  $o != null && read($Heap, this, _module.INode.footprint)[$Box($o)] && $o != this
     ==> !read(old($Heap), $o, alloc));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.INode.init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 4 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.INode.Valid#canCall($Heap, this);
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || read($Heap, this, _module.INode.footprint)[$Box(this)]);
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))));
  ensures _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (read($Heap, this, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.INode.next)));
  free ensures true;
  ensures read($Heap, this, _module.INode.data) == d#0;
  free ensures true;
  ensures read($Heap, this, _module.INode.next) == null;
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.INode.footprint), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(this)));
  free ensures true;
  ensures Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box);
  free ensures true;
  ensures Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Build(Seq#Empty(): Seq Box, $Box(this)));
  free ensures true;
  ensures (forall $o: ref :: 
  { read(old($Heap), $o, alloc) } 
  $o != null && read($Heap, this, _module.INode.footprint)[$Box($o)] && $o != this
     ==> !read(old($Heap), $o, alloc));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.INode.init(this: ref, d#0: ref) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Data())
     && $IsAlloc($rhs#0, Tclass._module.Data(), $Heap);
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.INode())
     && $IsAlloc($rhs#1, Tclass._module.INode(), $Heap);
  var $rhs#2: Seq Box
   where $Is($rhs#2, TSeq(Tclass._module.Data()))
     && $IsAlloc($rhs#2, TSeq(Tclass._module.Data()), $Heap);
  var $rhs#3: Set Box
   where $Is($rhs#3, TSet(Tclass._module.INode()))
     && $IsAlloc($rhs#3, TSet(Tclass._module.INode()), $Heap);
  var $rhs#4: Seq Box
   where $Is($rhs#4, TSeq(Tclass._module.INode()))
     && $IsAlloc($rhs#4, TSeq(Tclass._module.INode()), $Heap);

    // AddMethodImpl: init, Impl$$_module.INode.init
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume {:captureState "INode.dfy(69,0): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- INode.dfy(70,10)
    assume true;
    assert $_Frame[this, _module.INode.data];
    assume true;
    assert true;
    $rhs#0 := d#0;
    $Heap := update($Heap, this, _module.INode.data, $rhs#0);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(70,13)"} true;
    // ----- assignment statement ----- INode.dfy(71,7)
    assume true;
    assert $_Frame[this, _module.INode.next];
    assume true;
    assert true;
    $rhs#1 := null;
    $Heap := update($Heap, this, _module.INode.next, $rhs#1);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(71,13)"} true;
    // ----- assignment statement ----- INode.dfy(72,18)
    assume true;
    assert $_Frame[this, _module.INode.tailContents];
    assume true;
    assert true;
    $rhs#2 := Lit(Seq#Empty(): Seq Box);
    $Heap := update($Heap, this, _module.INode.tailContents, $rhs#2);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(72,22)"} true;
    // ----- assignment statement ----- INode.dfy(73,12)
    assume true;
    assert $_Frame[this, _module.INode.footprint];
    assume true;
    assert true;
    $rhs#3 := Set#UnionOne(Set#Empty(): Set Box, $Box(this));
    $Heap := update($Heap, this, _module.INode.footprint, $rhs#3);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(73,20)"} true;
    // ----- assignment statement ----- INode.dfy(74,11)
    assume true;
    assert $_Frame[this, _module.INode.spine];
    assume true;
    assert true;
    $rhs#4 := Seq#Build(Seq#Empty(): Seq Box, $Box(this));
    $Heap := update($Heap, this, _module.INode.spine, $rhs#4);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(74,19)"} true;
}



// function declaration for _module.INode.ndValid2ListValidLemma
function _module.INode.ndValid2ListValidLemma($ly: LayerType, $heap: Heap, this: ref) : bool;

function _module.INode.ndValid2ListValidLemma#canCall($heap: Heap, this: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this) } 
  _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this)
     == _module.INode.ndValid2ListValidLemma($ly, $Heap, this));

// frame axiom for _module.INode.ndValid2ListValidLemma
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.ndValid2ListValidLemma($ly, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.INode.footprint)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.ndValid2ListValidLemma($ly, $h0, this)
       == _module.INode.ndValid2ListValidLemma($ly, $h1, this));

// consequence axiom for _module.INode.ndValid2ListValidLemma
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 7 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this) } 
    _module.INode.ndValid2ListValidLemma#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 7 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> _module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this)
         && (forall nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
               && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#0))
             ==> read($Heap, this, _module.INode.footprint)[$Box(nd#0)])
         && (forall nd#1: ref :: 
          $Is(nd#1, Tclass._module.INode())
               && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
             ==> 
            read($Heap, this, _module.INode.footprint)[$Box(nd#1)]
             ==> nd#1 != null
               && Set#Subset(read($Heap, nd#1, _module.INode.footprint), 
                read($Heap, this, _module.INode.footprint)))
         && _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine)));

function _module.INode.ndValid2ListValidLemma#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.ndValid2ListValidLemma#requires($ly, $Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
     ==> _module.INode.ndValid2ListValidLemma#requires($ly, $Heap, this)
       == _module.INode.Valid($LS($LZ), $Heap, this));

// definition axiom for _module.INode.ndValid2ListValidLemma (intra-module)
axiom 0 == $ModuleContextHeight && 7 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this) } 
    _module.INode.ndValid2ListValidLemma#canCall($Heap, this)
         || (7 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null
           ==> (Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
               ==> true)
             && (Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
               ==> true))
         && (read($Heap, this, _module.INode.next) != null
           ==> (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
               ==> true)
             && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               ==> true)
             && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               ==> true)
             && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))
               ==> _module.INode.ndValid2ListValidLemma#canCall($Heap, read($Heap, this, _module.INode.next))))
         && _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
               && Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
             else !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
               && Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))
               && _module.INode.ndValid2ListValidLemma($ly, $Heap, read($Heap, this, _module.INode.next))));

// definition axiom for _module.INode.ndValid2ListValidLemma (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this) } 
    _module.INode.ndValid2ListValidLemma#canCall($Heap, this)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null
           ==> (Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
               ==> true)
             && (Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
               ==> true))
         && (read($Heap, this, _module.INode.next) != null
           ==> (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
               ==> true)
             && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               ==> true)
             && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               ==> true)
             && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
                 && Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
                 && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))
               ==> _module.INode.ndValid2ListValidLemma#canCall($Heap, read($Heap, this, _module.INode.next))))
         && _module.INode.ndValid2ListValidLemma($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
               && Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)
             else !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
               && Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))
               && _module.INode.ndValid2ListValidLemma($ly, $Heap, read($Heap, this, _module.INode.next))));

procedure CheckWellformed$$_module.INode.ndValid2ListValidLemma(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 7 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures _module.INode.ndValid2ListValidLemma($LS($LS($LZ)), $Heap, this);
  ensures (forall nd#2: ref :: 
  $Is(nd#2, Tclass._module.INode())
       && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#2))
     ==> read($Heap, this, _module.INode.footprint)[$Box(nd#2)]);
  ensures (forall nd#3: ref :: 
  $Is(nd#3, Tclass._module.INode())
       && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
     ==> 
    read($Heap, this, _module.INode.footprint)[$Box(nd#3)]
     ==> nd#3 != null
       && Set#Subset(read($Heap, nd#3, _module.INode.footprint), 
        read($Heap, this, _module.INode.footprint)));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (_module.INode.listCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
       ==> _module.INode.listCond($Heap, this, read($Heap, this, _module.INode.spine))
         || !Seq#Contains(read($Heap, this, _module.INode.spine), $Box(null)));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (_module.INode.listCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
       ==> _module.INode.listCond($Heap, this, read($Heap, this, _module.INode.spine))
         || (forall nd#4: ref :: 
          $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#4))
             ==> read($Heap, nd#4, _module.INode.footprint)[$Box(nd#4)]));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (_module.INode.listCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
       ==> _module.INode.listCond($Heap, this, read($Heap, this, _module.INode.spine))
         || (forall i#0: int :: 
          true
             ==> 
            LitInt(0) <= i#0 && i#0 < Seq#Length(read($Heap, this, _module.INode.spine)) - 1
             ==> read($Heap, 
                  $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0)): ref, 
                  _module.INode.next)
                 == $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0 + 1)): ref
               && Set#Equal(read($Heap, 
                  $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0)): ref, 
                  _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0)): ref)), 
                  read($Heap, 
                    $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0 + 1)): ref, 
                    _module.INode.footprint)))
               && Seq#Equal(read($Heap, 
                  $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0)): ref, 
                  _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, 
                        $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0 + 1)): ref, 
                        _module.INode.data))), 
                  read($Heap, 
                    $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0 + 1)): ref, 
                    _module.INode.tailContents)))
               && Seq#Equal(read($Heap, 
                  $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0)): ref, 
                  _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box($Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0)): ref)), 
                  read($Heap, 
                    $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#0 + 1)): ref, 
                    _module.INode.spine)))));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (_module.INode.listCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
       ==> _module.INode.listCond($Heap, this, read($Heap, this, _module.INode.spine))
         || (forall i#1: int, j#0: int :: 
          true
             ==> 
            LitInt(0) <= i#1
               && i#1 < j#0
               && j#0 < Seq#Length(read($Heap, this, _module.INode.spine))
             ==> !read($Heap, 
              $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), j#0)): ref, 
              _module.INode.footprint)[$Box($Unbox(Seq#Index(read($Heap, this, _module.INode.spine), i#1)): ref)]));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (!Seq#Equal(read($Heap, this, _module.INode.spine), Seq#Empty(): Seq Box)
       ==> read($Heap, 
          $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), 
              Seq#Length(read($Heap, this, _module.INode.spine)) - 1)): ref, 
          _module.INode.next)
         == null);
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (!Seq#Equal(read($Heap, this, _module.INode.spine), Seq#Empty(): Seq Box)
       ==> Set#Equal(read($Heap, 
          $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), 
              Seq#Length(read($Heap, this, _module.INode.spine)) - 1)): ref, 
          _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, 
          $Box($Unbox(Seq#Index(read($Heap, this, _module.INode.spine), 
                Seq#Length(read($Heap, this, _module.INode.spine)) - 1)): ref))));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (!Seq#Equal(read($Heap, this, _module.INode.spine), Seq#Empty(): Seq Box)
       ==> Seq#Equal(read($Heap, 
          $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), 
              Seq#Length(read($Heap, this, _module.INode.spine)) - 1)): ref, 
          _module.INode.tailContents), 
        Seq#Empty(): Seq Box));
  ensures _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine))
   ==> _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine))
     || (!Seq#Equal(read($Heap, this, _module.INode.spine), Seq#Empty(): Seq Box)
       ==> Seq#Equal(read($Heap, 
          $Unbox(Seq#Index(read($Heap, this, _module.INode.spine), 
              Seq#Length(read($Heap, this, _module.INode.spine)) - 1)): ref, 
          _module.INode.spine), 
        Seq#Build(Seq#Empty(): Seq Box, 
          $Box($Unbox(Seq#Index(read($Heap, this, _module.INode.spine), 
                Seq#Length(read($Heap, this, _module.INode.spine)) - 1)): ref))));



implementation CheckWellformed$$_module.INode.ndValid2ListValidLemma(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var nd#5: ref;
  var nd#6: ref;
  var ##mySeq#0: Seq Box;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;
  var b$reqreads#16: bool;
  var b$reqreads#17: bool;
  var b$reqreads#18: bool;
  var b$reqreads#19: bool;
  var b$reqreads#20: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;
    b$reqreads#16 := true;
    b$reqreads#17 := true;
    b$reqreads#18 := true;
    b$reqreads#19 := true;
    b$reqreads#20 := true;

    // AddWellformednessCheck for function ndValid2ListValidLemma
    assume {:captureState "INode.dfy(117,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == this || read($Heap, this, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.INode.Valid#canCall($Heap, this);
    assume _module.INode.Valid($LS($LZ), $Heap, this);
    assert b$reqreads#0;
    b$reqreads#1 := $_Frame[this, _module.INode.footprint];
    assert b$reqreads#1;
    if (*)
    {
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || read($Heap, this, _module.INode.footprint)[$Box(this)]);
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (read($Heap, this, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.INode.next)));
        assume _module.INode.Valid($LS($LZ), $Heap, this);
        assert this == this
   || (Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
     && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assume this == this || _module.INode.ndValid2ListValidLemma#canCall($Heap, this);
        assume _module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this);
        havoc nd#5;
        assume $Is(nd#5, Tclass._module.INode())
   && $IsAlloc(nd#5, Tclass._module.INode(), $Heap);
        if (*)
        {
            assume Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#5));
            assume read($Heap, this, _module.INode.footprint)[$Box(nd#5)];
        }
        else
        {
            assume Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#5))
   ==> read($Heap, this, _module.INode.footprint)[$Box(nd#5)];
        }

        assume (forall nd#2: ref :: 
  $Is(nd#2, Tclass._module.INode())
       && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#2))
     ==> read($Heap, this, _module.INode.footprint)[$Box(nd#2)]);
        havoc nd#6;
        assume $Is(nd#6, Tclass._module.INode())
   && $IsAlloc(nd#6, Tclass._module.INode(), $Heap);
        if (*)
        {
            assume read($Heap, this, _module.INode.footprint)[$Box(nd#6)];
            assume nd#6 != null;
            assert nd#6 != null;
            assume Set#Subset(read($Heap, nd#6, _module.INode.footprint), 
  read($Heap, this, _module.INode.footprint));
        }
        else
        {
            assume read($Heap, this, _module.INode.footprint)[$Box(nd#6)]
   ==> nd#6 != null
     && Set#Subset(read($Heap, nd#6, _module.INode.footprint), 
      read($Heap, this, _module.INode.footprint));
        }

        assume (forall nd#3: ref :: 
  $Is(nd#3, Tclass._module.INode())
       && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
     ==> 
    read($Heap, this, _module.INode.footprint)[$Box(nd#3)]
     ==> nd#3 != null
       && Set#Subset(read($Heap, nd#3, _module.INode.footprint), 
        read($Heap, this, _module.INode.footprint)));
        assert true;
        ##mySeq#0 := read($Heap, this, _module.INode.spine);
        // assume allocatedness for argument to function
        assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
        assume _module.INode.validSeqCond#canCall($Heap, this, read($Heap, this, _module.INode.spine));
        assume _module.INode.validSeqCond($Heap, this, read($Heap, this, _module.INode.spine));
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
        b$reqreads#2 := $_Frame[this, _module.INode.next];
        if (read($Heap, this, _module.INode.next) == null)
        {
            b$reqreads#3 := $_Frame[this, _module.INode.spine];
            if (Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Build(Seq#Empty(): Seq Box, $Box(this))))
            {
                b$reqreads#4 := $_Frame[this, _module.INode.footprint];
            }

            if (Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
            {
                b$reqreads#5 := $_Frame[this, _module.INode.tailContents];
            }

            assert true;
            assume _module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this)
   == (
    Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
     && Set#Equal(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
     && Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box));
            assume (Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
     ==> true)
   && (Seq#Equal(read($Heap, this, _module.INode.spine), 
        Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
       && Set#Equal(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
     ==> true);
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this), TBool, $Heap);
            assume $Is(_module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this), TBool);
        }
        else
        {
            b$reqreads#6 := $_Frame[this, _module.INode.next];
            assert read($Heap, this, _module.INode.next) != null;
            b$reqreads#7 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.footprint];
            if (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)])
            {
                b$reqreads#8 := $_Frame[this, _module.INode.spine];
                b$reqreads#9 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                b$reqreads#10 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.spine];
            }

            if (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
   && Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine))))
            {
                b$reqreads#11 := $_Frame[this, _module.INode.footprint];
                b$reqreads#12 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                b$reqreads#13 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.footprint];
            }

            if (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
   && Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint))))
            {
                b$reqreads#14 := $_Frame[this, _module.INode.tailContents];
                b$reqreads#15 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                b$reqreads#16 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.data];
                b$reqreads#17 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                b$reqreads#18 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.tailContents];
            }

            if (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
   && Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
   && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
        $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents))))
            {
                b$reqreads#19 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]);
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.next))]));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
            _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.footprint)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.spine)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                    _module.INode.data))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.tailContents)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Empty(): Seq Box)));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.next)));
                assume _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next));
                b$reqreads#20 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == read($Heap, this, _module.INode.next)
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset(Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))), 
    Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
   && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
    Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))));
                assume _module.INode.ndValid2ListValidLemma#canCall($Heap, read($Heap, this, _module.INode.next));
            }

            assert true;
            assume _module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this)
   == (
    !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
     && Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
     && Set#Equal(read($Heap, this, _module.INode.footprint), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
     && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))
     && _module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, read($Heap, this, _module.INode.next)));
            assume (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
     ==> true)
   && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
       && Seq#Equal(read($Heap, this, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
     ==> true)
   && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
       && Seq#Equal(read($Heap, this, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
       && Set#Equal(read($Heap, this, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
     ==> true)
   && (!read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]
       && Seq#Equal(read($Heap, this, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
       && Set#Equal(read($Heap, this, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
       && Seq#Equal(read($Heap, this, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))
     ==> _module.INode.ndValid2ListValidLemma#canCall($Heap, read($Heap, this, _module.INode.next)));
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this), TBool, $Heap);
            assume $Is(_module.INode.ndValid2ListValidLemma($LS($LZ), $Heap, this), TBool);
        }

        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
        assert b$reqreads#13;
        assert b$reqreads#14;
        assert b$reqreads#15;
        assert b$reqreads#16;
        assert b$reqreads#17;
        assert b$reqreads#18;
        assert b$reqreads#19;
        assert b$reqreads#20;
    }
}



// function declaration for _module.INode.spineFtprintLemma
function _module.INode.spineFtprintLemma($ly: LayerType, $heap: Heap, this: ref) : bool;

function _module.INode.spineFtprintLemma#canCall($heap: Heap, this: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.spineFtprintLemma($LS($ly), $Heap, this) } 
  _module.INode.spineFtprintLemma($LS($ly), $Heap, this)
     == _module.INode.spineFtprintLemma($ly, $Heap, this));

// frame axiom for _module.INode.spineFtprintLemma
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.spineFtprintLemma($ly, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.INode.footprint)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.spineFtprintLemma($ly, $h0, this)
       == _module.INode.spineFtprintLemma($ly, $h1, this));

// consequence axiom for _module.INode.spineFtprintLemma
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 8 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.spineFtprintLemma($LS($ly), $Heap, this) } 
    _module.INode.spineFtprintLemma#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 8 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> _module.INode.spineFtprintLemma($LS($LZ), $Heap, this)
         && (forall nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
               && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#0))
             ==> read($Heap, this, _module.INode.footprint)[$Box(nd#0)])
         && Set#Equal((lambda $y#0: Box :: 
            (exists nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                 && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 && Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#1))
                 && $y#0 == $Box(nd#1))), 
          read($Heap, this, _module.INode.footprint)));

function _module.INode.spineFtprintLemma#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, this: ref :: 
  { _module.INode.spineFtprintLemma#requires($ly, $Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
     ==> _module.INode.spineFtprintLemma#requires($ly, $Heap, this)
       == _module.INode.Valid($LS($LZ), $Heap, this));

// definition axiom for _module.INode.spineFtprintLemma (intra-module)
axiom 0 == $ModuleContextHeight && 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.spineFtprintLemma($LS($ly), $Heap, this) } 
    _module.INode.spineFtprintLemma#canCall($Heap, this)
         || (8 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null
           ==> 
          Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
           ==> true)
         && (read($Heap, this, _module.INode.next) != null
           ==> (Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               ==> true)
             && (Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               ==> _module.INode.spineFtprintLemma#canCall($Heap, read($Heap, this, _module.INode.next))))
         && _module.INode.spineFtprintLemma($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
             else Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               && _module.INode.spineFtprintLemma($ly, $Heap, read($Heap, this, _module.INode.next))));

// definition axiom for _module.INode.spineFtprintLemma (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref :: 
    { _module.INode.spineFtprintLemma($LS($ly), $Heap, this) } 
    _module.INode.spineFtprintLemma#canCall($Heap, this)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && _module.INode.Valid($LS($LZ), $Heap, this))
       ==> (read($Heap, this, _module.INode.next) == null
           ==> 
          Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
           ==> true)
         && (read($Heap, this, _module.INode.next) != null
           ==> (Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               ==> true)
             && (Seq#Equal(read($Heap, this, _module.INode.spine), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
                 && Set#Equal(read($Heap, this, _module.INode.footprint), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               ==> _module.INode.spineFtprintLemma#canCall($Heap, read($Heap, this, _module.INode.next))))
         && _module.INode.spineFtprintLemma($LS($ly), $Heap, this)
           == (if read($Heap, this, _module.INode.next) == null
             then Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(this)))
             else Seq#Equal(read($Heap, this, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
               && Set#Equal(read($Heap, this, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
                  read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
               && _module.INode.spineFtprintLemma($ly, $Heap, read($Heap, this, _module.INode.next))));

procedure CheckWellformed$$_module.INode.spineFtprintLemma(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 8 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures _module.INode.spineFtprintLemma($LS($LS($LZ)), $Heap, this);
  ensures (forall nd#2: ref :: 
  $Is(nd#2, Tclass._module.INode())
       && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#2))
     ==> read($Heap, this, _module.INode.footprint)[$Box(nd#2)]);
  ensures Set#Equal((lambda $y#1: Box :: 
    (exists nd#3: ref :: 
      $Is(nd#3, Tclass._module.INode())
         && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
         && Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#3))
         && $y#1 == $Box(nd#3))), 
  read($Heap, this, _module.INode.footprint));



implementation CheckWellformed$$_module.INode.spineFtprintLemma(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var nd#4: ref;
  var nd#5: ref;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;

    // AddWellformednessCheck for function spineFtprintLemma
    assume {:captureState "INode.dfy(139,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == this || read($Heap, this, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.INode.Valid#canCall($Heap, this);
    assume _module.INode.Valid($LS($LZ), $Heap, this);
    assert b$reqreads#0;
    b$reqreads#1 := $_Frame[this, _module.INode.footprint];
    assert b$reqreads#1;
    if (*)
    {
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || read($Heap, this, _module.INode.footprint)[$Box(this)]);
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> read($Heap, this, _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> !read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(this)]));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.tailContents), Seq#Empty(): Seq Box)));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Set#Equal(read($Heap, this, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (_module.INode.good#canCall($Heap, this)
       ==> _module.INode.good($Heap, this)
         || (read($Heap, this, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, this, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(this)))));
        assert {:subsumption 0} _module.INode.Valid#canCall($Heap, this)
   ==> _module.INode.Valid($LS($LZ), $Heap, this)
     || (read($Heap, this, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.INode.next)));
        assume _module.INode.Valid($LS($LZ), $Heap, this);
        assert this == this
   || (Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
     && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
      Set#Union(read($Heap, this, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(this)))));
        assume this == this || _module.INode.spineFtprintLemma#canCall($Heap, this);
        assume _module.INode.spineFtprintLemma($LS($LZ), $Heap, this);
        havoc nd#4;
        assume $Is(nd#4, Tclass._module.INode())
   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap);
        if (*)
        {
            assume Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#4));
            assume read($Heap, this, _module.INode.footprint)[$Box(nd#4)];
        }
        else
        {
            assume Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#4))
   ==> read($Heap, this, _module.INode.footprint)[$Box(nd#4)];
        }

        assume (forall nd#2: ref :: 
  $Is(nd#2, Tclass._module.INode())
       && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#2))
     ==> read($Heap, this, _module.INode.footprint)[$Box(nd#2)]);
        havoc nd#5;
        assume $Is(nd#5, Tclass._module.INode())
   && $IsAlloc(nd#5, Tclass._module.INode(), $Heap);
        // Begin Comprehension WF check
        if (Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#5)))
        {
        }

        // End Comprehension WF check
        assume Set#Equal((lambda $y#2: Box :: 
    (exists nd#3: ref :: 
      $Is(nd#3, Tclass._module.INode())
         && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
         && Seq#Contains(read($Heap, this, _module.INode.spine), $Box(nd#3))
         && $y#2 == $Box(nd#3))), 
  read($Heap, this, _module.INode.footprint));
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.INode.footprint)[$Box($o)]);
        b$reqreads#2 := $_Frame[this, _module.INode.next];
        if (read($Heap, this, _module.INode.next) == null)
        {
            b$reqreads#3 := $_Frame[this, _module.INode.spine];
            if (Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Build(Seq#Empty(): Seq Box, $Box(this))))
            {
                b$reqreads#4 := $_Frame[this, _module.INode.footprint];
            }

            assert true;
            assume _module.INode.spineFtprintLemma($LS($LZ), $Heap, this)
   == (Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
     && Set#Equal(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))));
            assume Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Build(Seq#Empty(): Seq Box, $Box(this)))
   ==> true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.spineFtprintLemma($LS($LZ), $Heap, this), TBool, $Heap);
            assume $Is(_module.INode.spineFtprintLemma($LS($LZ), $Heap, this), TBool);
        }
        else
        {
            b$reqreads#5 := $_Frame[this, _module.INode.spine];
            b$reqreads#6 := $_Frame[this, _module.INode.next];
            assert read($Heap, this, _module.INode.next) != null;
            b$reqreads#7 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.spine];
            if (Seq#Equal(read($Heap, this, _module.INode.spine), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
    read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine))))
            {
                b$reqreads#8 := $_Frame[this, _module.INode.footprint];
                b$reqreads#9 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                b$reqreads#10 := $_Frame[read($Heap, this, _module.INode.next), _module.INode.footprint];
            }

            if (Seq#Equal(read($Heap, this, _module.INode.spine), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
   && Set#Equal(read($Heap, this, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
      read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint))))
            {
                b$reqreads#11 := $_Frame[this, _module.INode.next];
                assert read($Heap, this, _module.INode.next) != null;
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]);
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box(read($Heap, read($Heap, this, _module.INode.next), _module.INode.next))]));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
            _module.INode.footprint)[$Box(read($Heap, this, _module.INode.next))]));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.footprint)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.spine)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, 
                    read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                    _module.INode.data))), 
              read($Heap, 
                read($Heap, read($Heap, this, _module.INode.next), _module.INode.next), 
                _module.INode.tailContents)))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.tailContents), 
            Seq#Empty(): Seq Box)));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next))))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (_module.INode.good#canCall($Heap, read($Heap, this, _module.INode.next))
       ==> _module.INode.good($Heap, read($Heap, this, _module.INode.next))
         || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) == null
           ==> Seq#Equal(read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, this, _module.INode.next))))));
                assert {:subsumption 0} _module.INode.Valid#canCall($Heap, read($Heap, this, _module.INode.next))
   ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next))
     || (read($Heap, read($Heap, this, _module.INode.next), _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.next)));
                assume _module.INode.Valid($LS($LZ), $Heap, read($Heap, this, _module.INode.next));
                b$reqreads#12 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == read($Heap, this, _module.INode.next)
         || read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset(Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))), 
    Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))))
   && !Set#Subset(Set#Union(read($Heap, this, _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(this))), 
    Set#Union(read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.INode.next)))));
                assume _module.INode.spineFtprintLemma#canCall($Heap, read($Heap, this, _module.INode.next));
            }

            assert true;
            assume _module.INode.spineFtprintLemma($LS($LZ), $Heap, this)
   == (
    Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
     && Set#Equal(read($Heap, this, _module.INode.footprint), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
     && _module.INode.spineFtprintLemma($LS($LZ), $Heap, read($Heap, this, _module.INode.next)));
            assume (Seq#Equal(read($Heap, this, _module.INode.spine), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
        read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
     ==> true)
   && (Seq#Equal(read($Heap, this, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.spine)))
       && Set#Equal(read($Heap, this, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
          read($Heap, read($Heap, this, _module.INode.next), _module.INode.footprint)))
     ==> _module.INode.spineFtprintLemma#canCall($Heap, read($Heap, this, _module.INode.next)));
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.spineFtprintLemma($LS($LZ), $Heap, this), TBool, $Heap);
            assume $Is(_module.INode.spineFtprintLemma($LS($LZ), $Heap, this), TBool);
        }

        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
    }
}



// function declaration for _module.INode.getFtprint
function _module.INode.getFtprint($heap: Heap, this: ref, nd#0: ref) : Set Box;

function _module.INode.getFtprint#canCall($heap: Heap, this: ref, nd#0: ref) : bool;

// frame axiom for _module.INode.getFtprint
axiom (forall $h0: Heap, $h1: Heap, this: ref, nd#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.getFtprint($h1, this, nd#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      (_module.INode.getFtprint#canCall($h0, this, nd#0)
         || ($Is(nd#0, Tclass._module.INode())
           && $IsAlloc(nd#0, Tclass._module.INode(), $h0)))
       && (_module.INode.getFtprint#canCall($h1, this, nd#0)
         || ($Is(nd#0, Tclass._module.INode())
           && $IsAlloc(nd#0, Tclass._module.INode(), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($h0, $o, alloc) && read($h1, $o, alloc) && $o == nd#0
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.getFtprint($h0, this, nd#0)
       == _module.INode.getFtprint($h1, this, nd#0));

// consequence axiom for _module.INode.getFtprint
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 9 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, this: ref, nd#0: ref :: 
    { _module.INode.getFtprint($Heap, this, nd#0) } 
    _module.INode.getFtprint#canCall($Heap, this, nd#0)
         || ((0 != $ModuleContextHeight || 9 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(nd#0, Tclass._module.INode())
           && $IsAlloc(nd#0, Tclass._module.INode(), $Heap))
       ==> $Is(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()))
         && $IsAlloc(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()), $Heap));

function _module.INode.getFtprint#requires(Heap, ref, ref) : bool;

axiom (forall $Heap: Heap, this: ref, nd#0: ref :: 
  { _module.INode.getFtprint#requires($Heap, this, nd#0) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
       && 
      $Is(nd#0, Tclass._module.INode())
       && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
     ==> _module.INode.getFtprint#requires($Heap, this, nd#0) == true);

// definition axiom for _module.INode.getFtprint (intra-module)
axiom 0 == $ModuleContextHeight && 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref, nd#0: ref :: 
    { _module.INode.getFtprint($Heap, this, nd#0) } 
    _module.INode.getFtprint#canCall($Heap, this, nd#0)
         || (9 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(nd#0, Tclass._module.INode())
           && $IsAlloc(nd#0, Tclass._module.INode(), $Heap))
       ==> (nd#0 == null ==> true)
         && (nd#0 != null ==> true)
         && _module.INode.getFtprint($Heap, this, nd#0)
           == (if nd#0 == null
             then Set#Empty(): Set Box
             else read($Heap, nd#0, _module.INode.footprint)));

// definition axiom for _module.INode.getFtprint (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, this: ref, nd#0: ref :: 
    { _module.INode.getFtprint($Heap, this, nd#0) } 
    _module.INode.getFtprint#canCall($Heap, this, nd#0)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(nd#0, Tclass._module.INode())
           && $IsAlloc(nd#0, Tclass._module.INode(), $Heap))
       ==> (nd#0 == null ==> true)
         && (nd#0 != null ==> true)
         && _module.INode.getFtprint($Heap, this, nd#0)
           == (if nd#0 == null
             then Set#Empty(): Set Box
             else read($Heap, nd#0, _module.INode.footprint)));

procedure CheckWellformed$$_module.INode.getFtprint(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    nd#0: ref
       where $Is(nd#0, Tclass._module.INode())
         && $IsAlloc(nd#0, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 9 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.getFtprint(this: ref, nd#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    // AddWellformednessCheck for function getFtprint
    assume {:captureState "INode.dfy(158,9): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == nd#0);
    if (*)
    {
        assume $Is(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()))
   && $IsAlloc(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()), $Heap);
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == nd#0);
        if (nd#0 == null)
        {
            assert true;
            assume _module.INode.getFtprint($Heap, this, nd#0) == Set#Empty(): Set Box;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()), $Heap);
            assume $Is(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()));
        }
        else
        {
            assert nd#0 != null;
            b$reqreads#0 := $_Frame[nd#0, _module.INode.footprint];
            assert true;
            assume _module.INode.getFtprint($Heap, this, nd#0)
   == read($Heap, nd#0, _module.INode.footprint);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()), $Heap);
            assume $Is(_module.INode.getFtprint($Heap, this, nd#0), TSet(Tclass._module.INode()));
        }

        assert b$reqreads#0;
    }
}



// function declaration for _module.INode.sumAllFtprint
function _module.INode.sumAllFtprint($ly: LayerType, $heap: Heap, this: ref, mySeq#0: Seq Box) : Set Box;

function _module.INode.sumAllFtprint#canCall($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
  { _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0) } 
  _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0)
     == _module.INode.sumAllFtprint($ly, $Heap, this, mySeq#0));

// frame axiom for _module.INode.sumAllFtprint
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref, mySeq#0: Seq Box :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.sumAllFtprint($ly, $h1, this, mySeq#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      (_module.INode.sumAllFtprint#canCall($h0, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h0)))
       && (_module.INode.sumAllFtprint#canCall($h1, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && (exists $i: int :: 
            0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.sumAllFtprint($ly, $h0, this, mySeq#0)
       == _module.INode.sumAllFtprint($ly, $h1, this, mySeq#0));

// consequence axiom for _module.INode.sumAllFtprint
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 10 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0) } 
    _module.INode.sumAllFtprint#canCall($Heap, this, mySeq#0)
         || ((0 != $ModuleContextHeight || 10 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (forall nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
               && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(mySeq#0, $Box(nd#0))
             ==> 
            nd#0 != null
             ==> Set#Subset(read($Heap, nd#0, _module.INode.footprint), 
              _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0)))
         && 
        $Is(_module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0), 
          TSet(Tclass._module.INode()))
         && $IsAlloc(_module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0), 
          TSet(Tclass._module.INode()), 
          $Heap));

function _module.INode.sumAllFtprint#requires(LayerType, Heap, ref, Seq Box) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
  { _module.INode.sumAllFtprint#requires($ly, $Heap, this, mySeq#0) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
       && 
      $Is(mySeq#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
     ==> _module.INode.sumAllFtprint#requires($ly, $Heap, this, mySeq#0) == true);

// definition axiom for _module.INode.sumAllFtprint (intra-module)
axiom 0 == $ModuleContextHeight && 10 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0) } 
    _module.INode.sumAllFtprint#canCall($Heap, this, mySeq#0)
         || (10 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (Seq#Equal(mySeq#0, Seq#Empty(): Seq Box) ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
           ==> _module.INode.getFtprint#canCall($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
             && _module.INode.sumAllFtprint#canCall($Heap, this, Seq#Drop(mySeq#0, LitInt(1))))
         && _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0)
           == (if Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             then Set#Empty(): Set Box
             else Set#Union(_module.INode.getFtprint($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref), 
              _module.INode.sumAllFtprint($ly, $Heap, this, Seq#Drop(mySeq#0, LitInt(1))))));

// definition axiom for _module.INode.sumAllFtprint (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0) } 
    _module.INode.sumAllFtprint#canCall($Heap, this, mySeq#0)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (Seq#Equal(mySeq#0, Seq#Empty(): Seq Box) ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
           ==> _module.INode.getFtprint#canCall($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
             && _module.INode.sumAllFtprint#canCall($Heap, this, Seq#Drop(mySeq#0, LitInt(1))))
         && _module.INode.sumAllFtprint($LS($ly), $Heap, this, mySeq#0)
           == (if Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             then Set#Empty(): Set Box
             else Set#Union(_module.INode.getFtprint($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref), 
              _module.INode.sumAllFtprint($ly, $Heap, this, Seq#Drop(mySeq#0, LitInt(1))))));

procedure CheckWellformed$$_module.INode.sumAllFtprint(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 10 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures (forall nd#1: ref :: 
  $Is(nd#1, Tclass._module.INode())
       && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(mySeq#0, $Box(nd#1))
     ==> 
    nd#1 != null
     ==> Set#Subset(read($Heap, nd#1, _module.INode.footprint), 
      _module.INode.sumAllFtprint($LS($LS($LZ)), $Heap, this, mySeq#0)));



implementation CheckWellformed$$_module.INode.sumAllFtprint(this: ref, mySeq#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var _s2s_0#0: ref;
  var nd#2: ref;
  var ##mySeq#0: Seq Box;
  var ##nd#0: ref;
  var ##mySeq#1: Seq Box;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    // AddWellformednessCheck for function sumAllFtprint
    assume {:captureState "INode.dfy(164,9): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
      0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
    havoc _s2s_0#0;
    assume $Is(_s2s_0#0, Tclass._module.INode())
   && $IsAlloc(_s2s_0#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(_s2s_0#0)))
    {
    }

    // End Comprehension WF check
    if (*)
    {
        assume $Is(_module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0), 
    TSet(Tclass._module.INode()))
   && $IsAlloc(_module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0), 
    TSet(Tclass._module.INode()), 
    $Heap);
        havoc nd#2;
        assume $Is(nd#2, Tclass._module.INode())
   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap);
        if (*)
        {
            assume Seq#Contains(mySeq#0, $Box(nd#2));
            if (*)
            {
                assume nd#2 != null;
                assert nd#2 != null;
                assert true;
                ##mySeq#0 := mySeq#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
                assert (this == this && mySeq#0 == mySeq#0)
   || 
  (Set#Subset((lambda $y#0: Box :: 
        (exists _s2s_0#1: ref :: 
          $Is(_s2s_0#1, Tclass._module.INode())
             && $IsAlloc(_s2s_0#1, Tclass._module.INode(), $Heap)
             && Seq#Contains(##mySeq#0, $Box(_s2s_0#1))
             && $y#0 == $Box(_s2s_0#1))), 
      (lambda $y#1: Box :: 
        (exists _s2s_0#2: ref :: 
          $Is(_s2s_0#2, Tclass._module.INode())
             && $IsAlloc(_s2s_0#2, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(_s2s_0#2))
             && $y#1 == $Box(_s2s_0#2))))
     && !Set#Subset((lambda $y#1: Box :: 
        (exists _s2s_0#2: ref :: 
          $Is(_s2s_0#2, Tclass._module.INode())
             && $IsAlloc(_s2s_0#2, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(_s2s_0#2))
             && $y#1 == $Box(_s2s_0#2))), 
      (lambda $y#0: Box :: 
        (exists _s2s_0#1: ref :: 
          $Is(_s2s_0#1, Tclass._module.INode())
             && $IsAlloc(_s2s_0#1, Tclass._module.INode(), $Heap)
             && Seq#Contains(##mySeq#0, $Box(_s2s_0#1))
             && $y#0 == $Box(_s2s_0#1)))))
   || (Set#Equal((lambda $y#0: Box :: 
        (exists _s2s_0#1: ref :: 
          $Is(_s2s_0#1, Tclass._module.INode())
             && $IsAlloc(_s2s_0#1, Tclass._module.INode(), $Heap)
             && Seq#Contains(##mySeq#0, $Box(_s2s_0#1))
             && $y#0 == $Box(_s2s_0#1))), 
      (lambda $y#1: Box :: 
        (exists _s2s_0#2: ref :: 
          $Is(_s2s_0#2, Tclass._module.INode())
             && $IsAlloc(_s2s_0#2, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(_s2s_0#2))
             && $y#1 == $Box(_s2s_0#2))))
     && Seq#Rank(##mySeq#0) < Seq#Rank(mySeq#0));
                assume (this == this && mySeq#0 == mySeq#0)
   || _module.INode.sumAllFtprint#canCall($Heap, this, mySeq#0);
                assume Set#Subset(read($Heap, nd#2, _module.INode.footprint), 
  _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0));
            }
            else
            {
                assume nd#2 != null
   ==> Set#Subset(read($Heap, nd#2, _module.INode.footprint), 
    _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0));
            }
        }
        else
        {
            assume Seq#Contains(mySeq#0, $Box(nd#2))
   ==> 
  nd#2 != null
   ==> Set#Subset(read($Heap, nd#2, _module.INode.footprint), 
    _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0));
        }

        assume (forall nd#1: ref :: 
  $Is(nd#1, Tclass._module.INode())
       && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
     ==> 
    Seq#Contains(mySeq#0, $Box(nd#1))
     ==> 
    nd#1 != null
     ==> Set#Subset(read($Heap, nd#1, _module.INode.footprint), 
      _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0)));
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
      0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
        if (Seq#Equal(mySeq#0, Seq#Empty(): Seq Box))
        {
            assert true;
            assume _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0)
   == Set#Empty(): Set Box;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0), 
  TSet(Tclass._module.INode()), 
  $Heap);
            assume $Is(_module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0), 
  TSet(Tclass._module.INode()));
        }
        else
        {
            assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
            assert true;
            ##nd#0 := $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref;
            // assume allocatedness for argument to function
            assume $IsAlloc(##nd#0, Tclass._module.INode(), $Heap);
            b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == ##nd#0 ==> $_Frame[$o, $f]);
            assume _module.INode.getFtprint#canCall($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
            assert 0 <= LitInt(1) && LitInt(1) <= Seq#Length(mySeq#0);
            assert true;
            ##mySeq#1 := Seq#Drop(mySeq#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##mySeq#1, TSeq(Tclass._module.INode()), $Heap);
            b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && (exists $i: int :: 
        0 <= $i && $i < Seq#Length(##mySeq#1) && Seq#Index(##mySeq#1, $i) == $Box($o))
     ==> $_Frame[$o, $f]);
            assert (Set#Subset((lambda $y#2: Box :: 
        (exists _s2s_0#3: ref :: 
          $Is(_s2s_0#3, Tclass._module.INode())
             && $IsAlloc(_s2s_0#3, Tclass._module.INode(), $Heap)
             && Seq#Contains(##mySeq#1, $Box(_s2s_0#3))
             && $y#2 == $Box(_s2s_0#3))), 
      (lambda $y#3: Box :: 
        (exists _s2s_0#2: ref :: 
          $Is(_s2s_0#2, Tclass._module.INode())
             && $IsAlloc(_s2s_0#2, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(_s2s_0#2))
             && $y#3 == $Box(_s2s_0#2))))
     && !Set#Subset((lambda $y#3: Box :: 
        (exists _s2s_0#2: ref :: 
          $Is(_s2s_0#2, Tclass._module.INode())
             && $IsAlloc(_s2s_0#2, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(_s2s_0#2))
             && $y#3 == $Box(_s2s_0#2))), 
      (lambda $y#2: Box :: 
        (exists _s2s_0#3: ref :: 
          $Is(_s2s_0#3, Tclass._module.INode())
             && $IsAlloc(_s2s_0#3, Tclass._module.INode(), $Heap)
             && Seq#Contains(##mySeq#1, $Box(_s2s_0#3))
             && $y#2 == $Box(_s2s_0#3)))))
   || (Set#Equal((lambda $y#2: Box :: 
        (exists _s2s_0#3: ref :: 
          $Is(_s2s_0#3, Tclass._module.INode())
             && $IsAlloc(_s2s_0#3, Tclass._module.INode(), $Heap)
             && Seq#Contains(##mySeq#1, $Box(_s2s_0#3))
             && $y#2 == $Box(_s2s_0#3))), 
      (lambda $y#3: Box :: 
        (exists _s2s_0#2: ref :: 
          $Is(_s2s_0#2, Tclass._module.INode())
             && $IsAlloc(_s2s_0#2, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(_s2s_0#2))
             && $y#3 == $Box(_s2s_0#2))))
     && Seq#Rank(##mySeq#1) < Seq#Rank(mySeq#0));
            assume _module.INode.sumAllFtprint#canCall($Heap, this, Seq#Drop(mySeq#0, LitInt(1)));
            assert true;
            assume _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0)
   == Set#Union(_module.INode.getFtprint($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref), 
    _module.INode.sumAllFtprint($LS($LZ), $Heap, this, Seq#Drop(mySeq#0, LitInt(1))));
            assume _module.INode.getFtprint#canCall($Heap, this, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && _module.INode.sumAllFtprint#canCall($Heap, this, Seq#Drop(mySeq#0, LitInt(1)));
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0), 
  TSet(Tclass._module.INode()), 
  $Heap);
            assume $Is(_module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0), 
  TSet(Tclass._module.INode()));
        }

        assert b$reqreads#0;
        assert b$reqreads#1;
    }
}



// function declaration for _module.INode.listInv
function _module.INode.listInv($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

function _module.INode.listInv#canCall($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

// frame axiom for _module.INode.listInv
axiom (forall $h0: Heap, $h1: Heap, this: ref, mySeq#0: Seq Box :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.listInv($h1, this, mySeq#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      (_module.INode.listInv#canCall($h0, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h0)))
       && (_module.INode.listInv#canCall($h1, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ((exists $i: int :: 
              0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
             || (lambda $y#0: Box :: 
              (exists nd#0: ref :: 
                $Is(nd#0, Tclass._module.INode())
                   && $IsAlloc(nd#0, Tclass._module.INode(), $h0)
                   && Seq#Contains(mySeq#0, $Box(nd#0))
                   && $y#0 == $Box(nd#0)))[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.listInv($h0, this, mySeq#0)
       == _module.INode.listInv($h1, this, mySeq#0));

// consequence axiom for _module.INode.listInv
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 11 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.listInv($Heap, this, mySeq#0) } 
    _module.INode.listInv#canCall($Heap, this, mySeq#0)
         || ((0 != $ModuleContextHeight || 11 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> true);

function _module.INode.listInv#requires(Heap, ref, Seq Box) : bool;

axiom (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
  { _module.INode.listInv#requires($Heap, this, mySeq#0) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
       && 
      $Is(mySeq#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
     ==> _module.INode.listInv#requires($Heap, this, mySeq#0) == true);

// definition axiom for _module.INode.listInv (intra-module)
axiom 0 == $ModuleContextHeight && 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.listInv($Heap, this, mySeq#0) } 
    _module.INode.listInv#canCall($Heap, this, mySeq#0)
         || (11 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (!Seq#Contains(mySeq#0, $Box(null))
           ==> (forall nd#1: ref :: 
            $Is(nd#1, Tclass._module.INode())
                 && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
               ==> 
              Seq#Contains(mySeq#0, $Box(nd#1))
               ==> true))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#1))
                 ==> read($Heap, nd#1, _module.INode.footprint)[$Box(nd#1)])
           ==> (forall i#0: int :: 
            true
               ==> (LitInt(0) <= i#0 ==> true)
                 && (LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1 ==> true)))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#1))
                 ==> read($Heap, nd#1, _module.INode.footprint)[$Box(nd#1)])
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                   == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref)
           ==> (forall i#1: int, j#0: int :: 
            true
               ==> (LitInt(0) <= i#1 ==> true)
                 && (LitInt(0) <= i#1 && i#1 < j#0 ==> true)
                 && (LitInt(0) <= i#1 && i#1 < j#0 && j#0 < Seq#Length(mySeq#0) ==> true)))
         && _module.INode.listInv($Heap, this, mySeq#0)
           == (
            !Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#1))
                 ==> read($Heap, nd#1, _module.INode.footprint)[$Box(nd#1)])
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                   == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref)
             && (forall i#1: int, j#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < j#0 && j#0 < Seq#Length(mySeq#0)
                 ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#0)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#1)): ref)])));

// definition axiom for _module.INode.listInv (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.listInv($Heap, this, mySeq#0) } 
    _module.INode.listInv#canCall($Heap, this, mySeq#0)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (!Seq#Contains(mySeq#0, $Box(null))
           ==> (forall nd#2: ref :: 
            $Is(nd#2, Tclass._module.INode())
                 && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
               ==> 
              Seq#Contains(mySeq#0, $Box(nd#2))
               ==> true))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#2: ref :: 
              $Is(nd#2, Tclass._module.INode())
                   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#2))
                 ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)])
           ==> (forall i#2: int :: 
            true
               ==> (LitInt(0) <= i#2 ==> true)
                 && (LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0) - 1 ==> true)))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#2: ref :: 
              $Is(nd#2, Tclass._module.INode())
                   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#2))
                 ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)])
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                   == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref)
           ==> (forall i#3: int, j#1: int :: 
            true
               ==> (LitInt(0) <= i#3 ==> true)
                 && (LitInt(0) <= i#3 && i#3 < j#1 ==> true)
                 && (LitInt(0) <= i#3 && i#3 < j#1 && j#1 < Seq#Length(mySeq#0) ==> true)))
         && _module.INode.listInv($Heap, this, mySeq#0)
           == (
            !Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#2: ref :: 
              $Is(nd#2, Tclass._module.INode())
                   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#2))
                 ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)])
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                   == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref)
             && (forall i#3: int, j#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < j#1 && j#1 < Seq#Length(mySeq#0)
                 ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#3)): ref)])));

procedure CheckWellformed$$_module.INode.listInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 11 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.listInv(this: ref, mySeq#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var nd#3: ref;
  var _s2s_0#0: ref;
  var nd#4: ref;
  var nd#5: ref;
  var i#4: int;
  var i#5: int;
  var j#2: int;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    // AddWellformednessCheck for function listInv
    assume {:captureState "INode.dfy(175,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || (lambda $y#1: Box :: 
        (exists nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
             && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#0))
             && $y#1 == $Box(nd#0)))[$Box($o)]);
    havoc nd#3;
    assume $Is(nd#3, Tclass._module.INode())
   && $IsAlloc(nd#3, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#3)))
    {
    }

    // End Comprehension WF check
    havoc _s2s_0#0;
    assume $Is(_s2s_0#0, Tclass._module.INode())
   && $IsAlloc(_s2s_0#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(_s2s_0#0)))
    {
    }

    // End Comprehension WF check
    havoc nd#4;
    assume $Is(nd#4, Tclass._module.INode())
   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#4)))
    {
    }

    // End Comprehension WF check
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || (lambda $y#2: Box :: 
        (exists nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
             && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#0))
             && $y#2 == $Box(nd#0)))[$Box($o)]);
        if (!Seq#Contains(mySeq#0, $Box(null)))
        {
            havoc nd#5;
            assume $Is(nd#5, Tclass._module.INode())
   && $IsAlloc(nd#5, Tclass._module.INode(), $Heap);
            // Begin Comprehension WF check
            if (Seq#Contains(mySeq#0, $Box(nd#5)))
            {
                assert nd#5 != null;
                b$reqreads#0 := $_Frame[nd#5, _module.INode.footprint];
            }

            // End Comprehension WF check
        }

        if (!Seq#Contains(mySeq#0, $Box(null))
   && (forall nd#6: ref :: 
    $Is(nd#6, Tclass._module.INode())
         && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
       ==> 
      Seq#Contains(mySeq#0, $Box(nd#6))
       ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)]))
        {
            havoc i#4;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#4)
            {
            }

            if (LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
                b$reqreads#1 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.next];
                assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
            }

            // End Comprehension WF check
        }

        if (!Seq#Contains(mySeq#0, $Box(null))
   && (forall nd#6: ref :: 
    $Is(nd#6, Tclass._module.INode())
         && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
       ==> 
      Seq#Contains(mySeq#0, $Box(nd#6))
       ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
   && (forall i#6: int :: 
    true
       ==> 
      LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
       ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
         == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref))
        {
            havoc i#5;
            havoc j#2;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#5)
            {
            }

            if (LitInt(0) <= i#5 && i#5 < j#2)
            {
            }

            if (LitInt(0) <= i#5 && i#5 < j#2 && j#2 < Seq#Length(mySeq#0))
            {
                assert 0 <= i#5 && i#5 < Seq#Length(mySeq#0);
                assert 0 <= j#2 && j#2 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, j#2)): ref != null;
                b$reqreads#2 := $_Frame[$Unbox(Seq#Index(mySeq#0, j#2)): ref, _module.INode.footprint];
            }

            // End Comprehension WF check
        }

        assert true;
        assume _module.INode.listInv($Heap, this, mySeq#0)
   == (
    !Seq#Contains(mySeq#0, $Box(null))
     && (forall nd#6: ref :: 
      $Is(nd#6, Tclass._module.INode())
           && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
         ==> 
        Seq#Contains(mySeq#0, $Box(nd#6))
         ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
     && (forall i#6: int :: 
      true
         ==> 
        LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
         ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
           == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref)
     && (forall i#7: int, j#3: int :: 
      true
         ==> 
        LitInt(0) <= i#7 && i#7 < j#3 && j#3 < Seq#Length(mySeq#0)
         ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#3)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#7)): ref)]));
        assume (!Seq#Contains(mySeq#0, $Box(null))
     ==> (forall nd#6: ref :: 
      $Is(nd#6, Tclass._module.INode())
           && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
         ==> 
        Seq#Contains(mySeq#0, $Box(nd#6))
         ==> true))
   && (!Seq#Contains(mySeq#0, $Box(null))
       && (forall nd#6: ref :: 
        $Is(nd#6, Tclass._module.INode())
             && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
           ==> 
          Seq#Contains(mySeq#0, $Box(nd#6))
           ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
     ==> (forall i#6: int :: 
      true
         ==> (LitInt(0) <= i#6 ==> true)
           && (LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1 ==> true)))
   && (!Seq#Contains(mySeq#0, $Box(null))
       && (forall nd#6: ref :: 
        $Is(nd#6, Tclass._module.INode())
             && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
           ==> 
          Seq#Contains(mySeq#0, $Box(nd#6))
           ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
       && (forall i#6: int :: 
        true
           ==> 
          LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
           ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
             == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref)
     ==> (forall i#7: int, j#3: int :: 
      true
         ==> (LitInt(0) <= i#7 ==> true)
           && (LitInt(0) <= i#7 && i#7 < j#3 ==> true)
           && (LitInt(0) <= i#7 && i#7 < j#3 && j#3 < Seq#Length(mySeq#0) ==> true)));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.INode.listInv($Heap, this, mySeq#0), TBool, $Heap);
        assume $Is(_module.INode.listInv($Heap, this, mySeq#0), TBool);
        assert b$reqreads#0;
        assert b$reqreads#1;
        assert b$reqreads#2;
    }
}



// function declaration for _module.INode.listCond
function _module.INode.listCond($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

function _module.INode.listCond#canCall($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

// frame axiom for _module.INode.listCond
axiom (forall $h0: Heap, $h1: Heap, this: ref, mySeq#0: Seq Box :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.listCond($h1, this, mySeq#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      (_module.INode.listCond#canCall($h0, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h0)))
       && (_module.INode.listCond#canCall($h1, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ((exists $i: int :: 
              0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
             || (lambda $y#0: Box :: 
              (exists nd#0: ref :: 
                $Is(nd#0, Tclass._module.INode())
                   && $IsAlloc(nd#0, Tclass._module.INode(), $h0)
                   && Seq#Contains(mySeq#0, $Box(nd#0))
                   && $y#0 == $Box(nd#0)))[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.listCond($h0, this, mySeq#0)
       == _module.INode.listCond($h1, this, mySeq#0));

// consequence axiom for _module.INode.listCond
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 5 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.listCond($Heap, this, mySeq#0) } 
    _module.INode.listCond#canCall($Heap, this, mySeq#0)
         || ((0 != $ModuleContextHeight || 5 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> true);

function _module.INode.listCond#requires(Heap, ref, Seq Box) : bool;

axiom (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
  { _module.INode.listCond#requires($Heap, this, mySeq#0) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
       && 
      $Is(mySeq#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
     ==> _module.INode.listCond#requires($Heap, this, mySeq#0) == true);

// definition axiom for _module.INode.listCond (intra-module)
axiom 0 == $ModuleContextHeight && 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.listCond($Heap, this, mySeq#0) } 
    _module.INode.listCond#canCall($Heap, this, mySeq#0)
         || (5 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (!Seq#Contains(mySeq#0, $Box(null))
           ==> (forall nd#1: ref :: 
            $Is(nd#1, Tclass._module.INode())
                 && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
               ==> 
              Seq#Contains(mySeq#0, $Box(nd#1))
               ==> true))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#1))
                 ==> read($Heap, nd#1, _module.INode.footprint)[$Box(nd#1)])
           ==> (forall i#0: int :: 
            true
               ==> (LitInt(0) <= i#0 ==> true)
                 && (LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
                   ==> (read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                         == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref
                       ==> true)
                     && (read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                           == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref
                         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.footprint), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#0)): ref)), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.footprint)))
                       ==> true)
                     && (read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                           == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref
                         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.footprint), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#0)): ref)), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.footprint)))
                         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.tailContents), 
                          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.data))), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.tailContents)))
                       ==> true))))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#1))
                 ==> read($Heap, nd#1, _module.INode.footprint)[$Box(nd#1)])
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                     == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#0)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.tailContents)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#0)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.spine))))
           ==> (forall i#1: int, j#0: int :: 
            true
               ==> (LitInt(0) <= i#1 ==> true)
                 && (LitInt(0) <= i#1 && i#1 < j#0 ==> true)
                 && (LitInt(0) <= i#1 && i#1 < j#0 && j#0 < Seq#Length(mySeq#0) ==> true)))
         && _module.INode.listCond($Heap, this, mySeq#0)
           == (
            !Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#1: ref :: 
              $Is(nd#1, Tclass._module.INode())
                   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#1))
                 ==> read($Heap, nd#1, _module.INode.footprint)[$Box(nd#1)])
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
                     == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#0)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.tailContents)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#0)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref, _module.INode.spine))))
             && (forall i#1: int, j#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < j#0 && j#0 < Seq#Length(mySeq#0)
                 ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#0)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#1)): ref)])));

// definition axiom for _module.INode.listCond (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.listCond($Heap, this, mySeq#0) } 
    _module.INode.listCond#canCall($Heap, this, mySeq#0)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (!Seq#Contains(mySeq#0, $Box(null))
           ==> (forall nd#2: ref :: 
            $Is(nd#2, Tclass._module.INode())
                 && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
               ==> 
              Seq#Contains(mySeq#0, $Box(nd#2))
               ==> true))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#2: ref :: 
              $Is(nd#2, Tclass._module.INode())
                   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#2))
                 ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)])
           ==> (forall i#2: int :: 
            true
               ==> (LitInt(0) <= i#2 ==> true)
                 && (LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0) - 1
                   ==> (read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                         == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref
                       ==> true)
                     && (read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                           == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref
                         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                       ==> true)
                     && (read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                           == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref
                         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                       ==> true))))
         && (!Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#2: ref :: 
              $Is(nd#2, Tclass._module.INode())
                   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#2))
                 ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)])
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                     == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
           ==> (forall i#3: int, j#1: int :: 
            true
               ==> (LitInt(0) <= i#3 ==> true)
                 && (LitInt(0) <= i#3 && i#3 < j#1 ==> true)
                 && (LitInt(0) <= i#3 && i#3 < j#1 && j#1 < Seq#Length(mySeq#0) ==> true)))
         && _module.INode.listCond($Heap, this, mySeq#0)
           == (
            !Seq#Contains(mySeq#0, $Box(null))
             && (forall nd#2: ref :: 
              $Is(nd#2, Tclass._module.INode())
                   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
                 ==> 
                Seq#Contains(mySeq#0, $Box(nd#2))
                 ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)])
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0) - 1
                 ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.next)
                     == $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (forall i#3: int, j#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < j#1 && j#1 < Seq#Length(mySeq#0)
                 ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#3)): ref)])));

procedure CheckWellformed$$_module.INode.listCond(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 5 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.listCond(this: ref, mySeq#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var nd#3: ref;
  var _s2s_0#0: ref;
  var nd#4: ref;
  var nd#5: ref;
  var i#4: int;
  var i#5: int;
  var j#2: int;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;

    // AddWellformednessCheck for function listCond
    assume {:captureState "INode.dfy(183,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || (lambda $y#1: Box :: 
        (exists nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
             && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#0))
             && $y#1 == $Box(nd#0)))[$Box($o)]);
    havoc nd#3;
    assume $Is(nd#3, Tclass._module.INode())
   && $IsAlloc(nd#3, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#3)))
    {
    }

    // End Comprehension WF check
    havoc _s2s_0#0;
    assume $Is(_s2s_0#0, Tclass._module.INode())
   && $IsAlloc(_s2s_0#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(_s2s_0#0)))
    {
    }

    // End Comprehension WF check
    havoc nd#4;
    assume $Is(nd#4, Tclass._module.INode())
   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#4)))
    {
    }

    // End Comprehension WF check
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || (lambda $y#2: Box :: 
        (exists nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
             && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#0))
             && $y#2 == $Box(nd#0)))[$Box($o)]);
        if (!Seq#Contains(mySeq#0, $Box(null)))
        {
            havoc nd#5;
            assume $Is(nd#5, Tclass._module.INode())
   && $IsAlloc(nd#5, Tclass._module.INode(), $Heap);
            // Begin Comprehension WF check
            if (Seq#Contains(mySeq#0, $Box(nd#5)))
            {
                assert nd#5 != null;
                b$reqreads#0 := $_Frame[nd#5, _module.INode.footprint];
            }

            // End Comprehension WF check
        }

        if (!Seq#Contains(mySeq#0, $Box(null))
   && (forall nd#6: ref :: 
    $Is(nd#6, Tclass._module.INode())
         && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
       ==> 
      Seq#Contains(mySeq#0, $Box(nd#6))
       ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)]))
        {
            havoc i#4;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#4)
            {
            }

            if (LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
                b$reqreads#1 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.next];
                assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
                if (read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.next)
   == $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref)
                {
                    assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
                    b$reqreads#2 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint];
                    assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                    assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
                    b$reqreads#3 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint];
                }

                if (read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.next)
     == $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref
   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
      read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint))))
                {
                    assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
                    b$reqreads#4 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents];
                    assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
                    b$reqreads#5 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data];
                    assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
                    b$reqreads#6 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents];
                }

                if (read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.next)
     == $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref
   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
      read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)))
   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
      read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents))))
                {
                    assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
                    b$reqreads#7 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine];
                    assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
                    assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
                    b$reqreads#8 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine];
                }
            }

            // End Comprehension WF check
        }

        if (!Seq#Contains(mySeq#0, $Box(null))
   && (forall nd#6: ref :: 
    $Is(nd#6, Tclass._module.INode())
         && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
       ==> 
      Seq#Contains(mySeq#0, $Box(nd#6))
       ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
   && (forall i#6: int :: 
    true
       ==> 
      LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
       ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
           == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.tailContents)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.spine)))))
        {
            havoc i#5;
            havoc j#2;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#5)
            {
            }

            if (LitInt(0) <= i#5 && i#5 < j#2)
            {
            }

            if (LitInt(0) <= i#5 && i#5 < j#2 && j#2 < Seq#Length(mySeq#0))
            {
                assert 0 <= i#5 && i#5 < Seq#Length(mySeq#0);
                assert 0 <= j#2 && j#2 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, j#2)): ref != null;
                b$reqreads#9 := $_Frame[$Unbox(Seq#Index(mySeq#0, j#2)): ref, _module.INode.footprint];
            }

            // End Comprehension WF check
        }

        assert true;
        assume _module.INode.listCond($Heap, this, mySeq#0)
   == (
    !Seq#Contains(mySeq#0, $Box(null))
     && (forall nd#6: ref :: 
      $Is(nd#6, Tclass._module.INode())
           && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
         ==> 
        Seq#Contains(mySeq#0, $Box(nd#6))
         ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
     && (forall i#6: int :: 
      true
         ==> 
        LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
         ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
             == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.tailContents)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.spine))))
     && (forall i#7: int, j#3: int :: 
      true
         ==> 
        LitInt(0) <= i#7 && i#7 < j#3 && j#3 < Seq#Length(mySeq#0)
         ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#3)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#7)): ref)]));
        assume (!Seq#Contains(mySeq#0, $Box(null))
     ==> (forall nd#6: ref :: 
      $Is(nd#6, Tclass._module.INode())
           && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
         ==> 
        Seq#Contains(mySeq#0, $Box(nd#6))
         ==> true))
   && (!Seq#Contains(mySeq#0, $Box(null))
       && (forall nd#6: ref :: 
        $Is(nd#6, Tclass._module.INode())
             && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
           ==> 
          Seq#Contains(mySeq#0, $Box(nd#6))
           ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
     ==> (forall i#6: int :: 
      true
         ==> (LitInt(0) <= i#6 ==> true)
           && (LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
             ==> (read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
                   == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref
                 ==> true)
               && (read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
                     == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.footprint)))
                 ==> true)
               && (read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
                     == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.tailContents)))
                 ==> true))))
   && (!Seq#Contains(mySeq#0, $Box(null))
       && (forall nd#6: ref :: 
        $Is(nd#6, Tclass._module.INode())
             && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
           ==> 
          Seq#Contains(mySeq#0, $Box(nd#6))
           ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)])
       && (forall i#6: int :: 
        true
           ==> 
          LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
           ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
               == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.tailContents)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#6)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref, _module.INode.spine))))
     ==> (forall i#7: int, j#3: int :: 
      true
         ==> (LitInt(0) <= i#7 ==> true)
           && (LitInt(0) <= i#7 && i#7 < j#3 ==> true)
           && (LitInt(0) <= i#7 && i#7 < j#3 && j#3 < Seq#Length(mySeq#0) ==> true)));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.INode.listCond($Heap, this, mySeq#0), TBool, $Heap);
        assume $Is(_module.INode.listCond($Heap, this, mySeq#0), TBool);
        assert b$reqreads#0;
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
    }
}



// function declaration for _module.INode.validSeqCond
function _module.INode.validSeqCond($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

function _module.INode.validSeqCond#canCall($heap: Heap, this: ref, mySeq#0: Seq Box) : bool;

// frame axiom for _module.INode.validSeqCond
axiom (forall $h0: Heap, $h1: Heap, this: ref, mySeq#0: Seq Box :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.validSeqCond($h1, this, mySeq#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      (_module.INode.validSeqCond#canCall($h0, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h0)))
       && (_module.INode.validSeqCond#canCall($h1, this, mySeq#0)
         || ($Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ((exists $i: int :: 
              0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
             || (lambda $y#0: Box :: 
              (exists nd#0: ref :: 
                $Is(nd#0, Tclass._module.INode())
                   && $IsAlloc(nd#0, Tclass._module.INode(), $h0)
                   && Seq#Contains(mySeq#0, $Box(nd#0))
                   && $y#0 == $Box(nd#0)))[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.validSeqCond($h0, this, mySeq#0)
       == _module.INode.validSeqCond($h1, this, mySeq#0));

// consequence axiom for _module.INode.validSeqCond
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 6 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.validSeqCond($Heap, this, mySeq#0) } 
    _module.INode.validSeqCond#canCall($Heap, this, mySeq#0)
         || ((0 != $ModuleContextHeight || 6 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> true);

function _module.INode.validSeqCond#requires(Heap, ref, Seq Box) : bool;

axiom (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
  { _module.INode.validSeqCond#requires($Heap, this, mySeq#0) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
       && 
      $Is(mySeq#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
     ==> _module.INode.validSeqCond#requires($Heap, this, mySeq#0) == true);

// definition axiom for _module.INode.validSeqCond (intra-module)
axiom 0 == $ModuleContextHeight && 6 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.validSeqCond($Heap, this, mySeq#0) } 
    _module.INode.validSeqCond#canCall($Heap, this, mySeq#0)
         || (6 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> _module.INode.listCond#canCall($Heap, this, mySeq#0)
         && (_module.INode.listCond($Heap, this, mySeq#0)
           ==> 
          !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
           ==> (read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.next)
                 == null
               ==> true)
             && (read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.next)
                   == null
                 && Set#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
               ==> true)
             && (read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.next)
                   == null
                 && Set#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
                 && Seq#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.tailContents), 
                  Seq#Empty(): Seq Box)
               ==> true))
         && _module.INode.validSeqCond($Heap, this, mySeq#0)
           == (_module.INode.listCond($Heap, this, mySeq#0)
             && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
               ==> read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.next)
                   == null
                 && Set#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
                 && Seq#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.tailContents), 
                  Seq#Empty(): Seq Box)
                 && Seq#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.spine), 
                  Seq#Build(Seq#Empty(): Seq Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref))))));

// definition axiom for _module.INode.validSeqCond (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, this: ref, mySeq#0: Seq Box :: 
    { _module.INode.validSeqCond($Heap, this, mySeq#0) } 
    _module.INode.validSeqCond#canCall($Heap, this, mySeq#0)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap))
       ==> _module.INode.listCond#canCall($Heap, this, mySeq#0)
         && (_module.INode.listCond($Heap, this, mySeq#0)
           ==> 
          !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
           ==> (read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.next)
                 == null
               ==> true)
             && (read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.next)
                   == null
                 && Set#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
               ==> true)
             && (read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.next)
                   == null
                 && Set#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
                 && Seq#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.tailContents), 
                  Seq#Empty(): Seq Box)
               ==> true))
         && _module.INode.validSeqCond($Heap, this, mySeq#0)
           == (_module.INode.listCond($Heap, this, mySeq#0)
             && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
               ==> read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.next)
                   == null
                 && Set#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
                 && Seq#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.tailContents), 
                  Seq#Empty(): Seq Box)
                 && Seq#Equal(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.spine), 
                  Seq#Build(Seq#Empty(): Seq Box, 
                    $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref))))));

procedure CheckWellformed$$_module.INode.validSeqCond(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 6 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.validSeqCond(this: ref, mySeq#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var nd#1: ref;
  var _s2s_0#0: ref;
  var nd#2: ref;
  var ##mySeq#0: Seq Box;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    // AddWellformednessCheck for function validSeqCond
    assume {:captureState "INode.dfy(194,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || (lambda $y#1: Box :: 
        (exists nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
             && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#0))
             && $y#1 == $Box(nd#0)))[$Box($o)]);
    havoc nd#1;
    assume $Is(nd#1, Tclass._module.INode())
   && $IsAlloc(nd#1, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#1)))
    {
    }

    // End Comprehension WF check
    havoc _s2s_0#0;
    assume $Is(_s2s_0#0, Tclass._module.INode())
   && $IsAlloc(_s2s_0#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(_s2s_0#0)))
    {
    }

    // End Comprehension WF check
    havoc nd#2;
    assume $Is(nd#2, Tclass._module.INode())
   && $IsAlloc(nd#2, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#2)))
    {
    }

    // End Comprehension WF check
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || (lambda $y#2: Box :: 
        (exists nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
             && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#0))
             && $y#2 == $Box(nd#0)))[$Box($o)]);
        assert true;
        ##mySeq#0 := mySeq#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
        b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ((exists $i: int :: 
          0 <= $i && $i < Seq#Length(##mySeq#0) && Seq#Index(##mySeq#0, $i) == $Box($o))
         || (lambda $y#3: Box :: 
          (exists nd#3: ref :: 
            $Is(nd#3, Tclass._module.INode())
               && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
               && Seq#Contains(##mySeq#0, $Box(nd#3))
               && $y#3 == $Box(nd#3)))[$Box($o)])
     ==> $_Frame[$o, $f]);
        assume _module.INode.listCond#canCall($Heap, this, mySeq#0);
        if (_module.INode.listCond($Heap, this, mySeq#0))
        {
            if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box))
            {
                assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                b$reqreads#1 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.next];
                if (read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == null)
                {
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                    b$reqreads#2 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.footprint];
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                }

                if (read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == null
   && Set#Equal(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref))))
                {
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                    b$reqreads#3 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.tailContents];
                }

                if (read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == null
   && Set#Equal(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
   && Seq#Equal(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents), 
    Seq#Empty(): Seq Box))
                {
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                    b$reqreads#4 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.spine];
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                }
            }
        }

        assert true;
        assume _module.INode.validSeqCond($Heap, this, mySeq#0)
   == (_module.INode.listCond($Heap, this, mySeq#0)
     && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       ==> read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.next)
           == null
         && Set#Equal(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
         && Seq#Equal(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents), 
          Seq#Empty(): Seq Box)
         && Seq#Equal(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))));
        assume _module.INode.listCond#canCall($Heap, this, mySeq#0)
   && (_module.INode.listCond($Heap, this, mySeq#0)
     ==> 
    !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
     ==> (read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.next)
           == null
         ==> true)
       && (read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.next)
             == null
           && Set#Equal(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, 
              $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
         ==> true)
       && (read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.next)
             == null
           && Set#Equal(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, 
              $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)))
           && Seq#Equal(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.tailContents), 
            Seq#Empty(): Seq Box)
         ==> true));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.INode.validSeqCond($Heap, this, mySeq#0), TBool, $Heap);
        assume $Is(_module.INode.validSeqCond($Heap, this, mySeq#0), TBool);
        assert b$reqreads#0;
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
    }
}



// function declaration for _module.INode.LI
function _module.INode.LI($heap: Heap, 
    this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
   : bool;

function _module.INode.LI#canCall($heap: Heap, 
    this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
   : bool;

// frame axiom for _module.INode.LI
axiom (forall $h0: Heap, 
    $h1: Heap, 
    this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.INode.LI($h1, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h0)
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $h1)
       && 
      (_module.INode.LI#canCall($h0, 
          this, 
          mySeq#0, 
          index#0, 
          d#0, 
          newNd#0, 
          oldNewD#0, 
          oldNewNext#0, 
          oldNewFp#0, 
          oldNewTC#0, 
          oldNewSpine#0, 
          oldD#0, 
          oldNext#0, 
          oldFp#0, 
          oldTC#0, 
          oldSpine#0)
         || (
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h0)
           && 
          $Is(d#0, Tclass._module.Data())
           && $IsAlloc(d#0, Tclass._module.Data(), $h0)
           && 
          $Is(newNd#0, Tclass._module.INode())
           && $IsAlloc(newNd#0, Tclass._module.INode(), $h0)
           && 
          $Is(oldNewD#0, Tclass._module.Data())
           && $IsAlloc(oldNewD#0, Tclass._module.Data(), $h0)
           && 
          $Is(oldNewNext#0, Tclass._module.INode())
           && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $h0)
           && 
          $Is(oldNewFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $h0)
           && 
          $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $h0)
           && 
          $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $h0)
           && 
          $Is(oldD#0, Tclass._module.Data())
           && $IsAlloc(oldD#0, Tclass._module.Data(), $h0)
           && 
          $Is(oldNext#0, Tclass._module.INode())
           && $IsAlloc(oldNext#0, Tclass._module.INode(), $h0)
           && 
          $Is(oldFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $h0)
           && 
          $Is(oldTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $h0)
           && 
          $Is(oldSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $h0)))
       && (_module.INode.LI#canCall($h1, 
          this, 
          mySeq#0, 
          index#0, 
          d#0, 
          newNd#0, 
          oldNewD#0, 
          oldNewNext#0, 
          oldNewFp#0, 
          oldNewTC#0, 
          oldNewSpine#0, 
          oldD#0, 
          oldNext#0, 
          oldFp#0, 
          oldTC#0, 
          oldSpine#0)
         || (
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $h1)
           && 
          $Is(d#0, Tclass._module.Data())
           && $IsAlloc(d#0, Tclass._module.Data(), $h1)
           && 
          $Is(newNd#0, Tclass._module.INode())
           && $IsAlloc(newNd#0, Tclass._module.INode(), $h1)
           && 
          $Is(oldNewD#0, Tclass._module.Data())
           && $IsAlloc(oldNewD#0, Tclass._module.Data(), $h1)
           && 
          $Is(oldNewNext#0, Tclass._module.INode())
           && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $h1)
           && 
          $Is(oldNewFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $h1)
           && 
          $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $h1)
           && 
          $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $h1)
           && 
          $Is(oldD#0, Tclass._module.Data())
           && $IsAlloc(oldD#0, Tclass._module.Data(), $h1)
           && 
          $Is(oldNext#0, Tclass._module.INode())
           && $IsAlloc(oldNext#0, Tclass._module.INode(), $h1)
           && 
          $Is(oldFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $h1)
           && 
          $Is(oldTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $h1)
           && 
          $Is(oldSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && (
            (exists $i: int :: 
              0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
             || $o == newNd#0
             || $o == oldNext#0
             || oldFp#0[$Box($o)]
             || (exists $i: int :: 
              0 <= $i && $i < Seq#Length(oldTC#0) && Seq#Index(oldTC#0, $i) == $Box($o))
             || (exists $i: int :: 
              0 <= $i && $i < Seq#Length(oldSpine#0) && Seq#Index(oldSpine#0, $i) == $Box($o))
             || _module.INode.getFtprint($h0, this, newNd#0)[$Box($o)]
             || _module.INode.sumAllFtprint($LS($LZ), $h0, this, mySeq#0)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.INode.LI($h0, 
        this, 
        mySeq#0, 
        index#0, 
        d#0, 
        newNd#0, 
        oldNewD#0, 
        oldNewNext#0, 
        oldNewFp#0, 
        oldNewTC#0, 
        oldNewSpine#0, 
        oldD#0, 
        oldNext#0, 
        oldFp#0, 
        oldTC#0, 
        oldSpine#0)
       == _module.INode.LI($h1, 
        this, 
        mySeq#0, 
        index#0, 
        d#0, 
        newNd#0, 
        oldNewD#0, 
        oldNewNext#0, 
        oldNewFp#0, 
        oldNewTC#0, 
        oldNewSpine#0, 
        oldD#0, 
        oldNext#0, 
        oldFp#0, 
        oldTC#0, 
        oldSpine#0));

// consequence axiom for _module.INode.LI
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 12 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, 
      this: ref, 
      mySeq#0: Seq Box, 
      index#0: int, 
      d#0: ref, 
      newNd#0: ref, 
      oldNewD#0: ref, 
      oldNewNext#0: ref, 
      oldNewFp#0: Set Box, 
      oldNewTC#0: Seq Box, 
      oldNewSpine#0: Seq Box, 
      oldD#0: ref, 
      oldNext#0: ref, 
      oldFp#0: Set Box, 
      oldTC#0: Seq Box, 
      oldSpine#0: Seq Box :: 
    { _module.INode.LI($Heap, 
        this, 
        mySeq#0, 
        index#0, 
        d#0, 
        newNd#0, 
        oldNewD#0, 
        oldNewNext#0, 
        oldNewFp#0, 
        oldNewTC#0, 
        oldNewSpine#0, 
        oldD#0, 
        oldNext#0, 
        oldFp#0, 
        oldTC#0, 
        oldSpine#0) } 
    _module.INode.LI#canCall($Heap, 
          this, 
          mySeq#0, 
          index#0, 
          d#0, 
          newNd#0, 
          oldNewD#0, 
          oldNewNext#0, 
          oldNewFp#0, 
          oldNewTC#0, 
          oldNewSpine#0, 
          oldD#0, 
          oldNext#0, 
          oldFp#0, 
          oldTC#0, 
          oldSpine#0)
         || ((0 != $ModuleContextHeight || 12 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
           && 
          $Is(d#0, Tclass._module.Data())
           && $IsAlloc(d#0, Tclass._module.Data(), $Heap)
           && 
          $Is(newNd#0, Tclass._module.INode())
           && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldNewD#0, Tclass._module.Data())
           && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap)
           && 
          $Is(oldNewNext#0, Tclass._module.INode())
           && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldNewFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap)
           && 
          $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap)
           && 
          $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap)
           && 
          $Is(oldD#0, Tclass._module.Data())
           && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap)
           && 
          $Is(oldNext#0, Tclass._module.INode())
           && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap)
           && 
          $Is(oldTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap)
           && 
          $Is(oldSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap))
       ==> true);

function _module.INode.LI#requires(Heap, 
    ref, 
    Seq Box, 
    int, 
    ref, 
    ref, 
    ref, 
    ref, 
    Set Box, 
    Seq Box, 
    Seq Box, 
    ref, 
    ref, 
    Set Box, 
    Seq Box, 
    Seq Box)
   : bool;

axiom (forall $Heap: Heap, 
    this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box :: 
  { _module.INode.LI#requires($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.INode())
       && $IsAlloc(this, Tclass._module.INode(), $Heap)
       && 
      $Is(mySeq#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
       && 
      $Is(d#0, Tclass._module.Data())
       && $IsAlloc(d#0, Tclass._module.Data(), $Heap)
       && 
      $Is(newNd#0, Tclass._module.INode())
       && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap)
       && 
      $Is(oldNewD#0, Tclass._module.Data())
       && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap)
       && 
      $Is(oldNewNext#0, Tclass._module.INode())
       && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap)
       && 
      $Is(oldNewFp#0, TSet(Tclass._module.INode()))
       && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap)
       && 
      $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
       && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap)
       && 
      $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap)
       && 
      $Is(oldD#0, Tclass._module.Data())
       && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap)
       && 
      $Is(oldNext#0, Tclass._module.INode())
       && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap)
       && 
      $Is(oldFp#0, TSet(Tclass._module.INode()))
       && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap)
       && 
      $Is(oldTC#0, TSeq(Tclass._module.Data()))
       && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap)
       && 
      $Is(oldSpine#0, TSeq(Tclass._module.INode()))
       && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap)
     ==> _module.INode.LI#requires($Heap, 
        this, 
        mySeq#0, 
        index#0, 
        d#0, 
        newNd#0, 
        oldNewD#0, 
        oldNewNext#0, 
        oldNewFp#0, 
        oldNewTC#0, 
        oldNewSpine#0, 
        oldD#0, 
        oldNext#0, 
        oldFp#0, 
        oldTC#0, 
        oldSpine#0)
       == true);

// definition axiom for _module.INode.LI (intra-module)
axiom 0 == $ModuleContextHeight && 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      this: ref, 
      mySeq#0: Seq Box, 
      index#0: int, 
      d#0: ref, 
      newNd#0: ref, 
      oldNewD#0: ref, 
      oldNewNext#0: ref, 
      oldNewFp#0: Set Box, 
      oldNewTC#0: Seq Box, 
      oldNewSpine#0: Seq Box, 
      oldD#0: ref, 
      oldNext#0: ref, 
      oldFp#0: Set Box, 
      oldTC#0: Seq Box, 
      oldSpine#0: Seq Box :: 
    { _module.INode.LI($Heap, 
        this, 
        mySeq#0, 
        index#0, 
        d#0, 
        newNd#0, 
        oldNewD#0, 
        oldNewNext#0, 
        oldNewFp#0, 
        oldNewTC#0, 
        oldNewSpine#0, 
        oldD#0, 
        oldNext#0, 
        oldFp#0, 
        oldTC#0, 
        oldSpine#0) } 
    _module.INode.LI#canCall($Heap, 
          this, 
          mySeq#0, 
          index#0, 
          d#0, 
          newNd#0, 
          oldNewD#0, 
          oldNewNext#0, 
          oldNewFp#0, 
          oldNewTC#0, 
          oldNewSpine#0, 
          oldD#0, 
          oldNext#0, 
          oldFp#0, 
          oldTC#0, 
          oldSpine#0)
         || (12 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
           && 
          $Is(d#0, Tclass._module.Data())
           && $IsAlloc(d#0, Tclass._module.Data(), $Heap)
           && 
          $Is(newNd#0, Tclass._module.INode())
           && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldNewD#0, Tclass._module.Data())
           && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap)
           && 
          $Is(oldNewNext#0, Tclass._module.INode())
           && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldNewFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap)
           && 
          $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap)
           && 
          $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap)
           && 
          $Is(oldD#0, Tclass._module.Data())
           && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap)
           && 
          $Is(oldNext#0, Tclass._module.INode())
           && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap)
           && 
          $Is(oldTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap)
           && 
          $Is(oldSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
           ==> 
          LitInt(0 - 1) <= index#0
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
           ==> _module.INode.listInv#canCall($Heap, this, mySeq#0))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
           ==> (forall i#0: int :: 
            true
               ==> (LitInt(0) <= i#0 ==> true)
                 && (LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) ==> true)))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
           ==> (forall i#1: int :: 
            true
               ==> (LitInt(0) <= i#1 ==> true)
                 && (LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0) ==> true)))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
           ==> (!Seq#Contains(mySeq#0, $Box(newNd#0)) ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0)) && newNd#0 != null
               ==> _module.INode.Valid#canCall($Heap, newNd#0))
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#0: Box :: 
                    (exists nd#0: ref :: 
                      $Is(nd#0, Tclass._module.INode())
                         && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#0))
                         && $y#0 == $Box(nd#0))))
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#1: Box :: 
                    (exists nd#0: ref :: 
                      $Is(nd#0, Tclass._module.INode())
                         && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#0))
                         && $y#1 == $Box(nd#0))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#2: Box :: 
                    (exists nd#0: ref :: 
                      $Is(nd#0, Tclass._module.INode())
                         && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#0))
                         && $y#2 == $Box(nd#0))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
                 && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#3: Box :: 
                    (exists nd#0: ref :: 
                      $Is(nd#0, Tclass._module.INode())
                         && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#0))
                         && $y#3 == $Box(nd#0))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
                 && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
                 && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#4: Box :: 
                    (exists nd#0: ref :: 
                      $Is(nd#0, Tclass._module.INode())
                         && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#0))
                         && $y#4 == $Box(nd#0))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
                 && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
                 && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
                 && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
               ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#5: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#5 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#6: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#6 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
           ==> 
          index#0 == Seq#Length(mySeq#0) - 1
           ==> (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                  read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.tailContents)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                  read($Heap, newNd#0, _module.INode.tailContents)))
               ==> true)
             && (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
               ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#7: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#7 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
           ==> (forall i#2: int :: 
            true
               ==> (LitInt(0) <= i#2 ==> true)
                 && (LitInt(0) <= i#2 && i#2 < index#0
                   ==> (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                          read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                       ==> true)
                     && (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                       ==> true))))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#8: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#8 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
           ==> (LitInt(0) <= index#0 ==> true)
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#9: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#9 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
           ==> (LitInt(0) <= index#0 ==> true)
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#10: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#10 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
           ==> (LitInt(0) <= index#0 ==> true)
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#11: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#11 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
           ==> 
          Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#12: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#12 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
           ==> (LitInt(0 - 1) <= index#0 ==> true)
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> 
              Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
               ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#13: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#13 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
                 && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
           ==> 
          index#0 < Seq#Length(mySeq#0) - 1
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#14: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#14 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
                 && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
             && (index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
           ==> 
          index#0 < Seq#Length(mySeq#0) - 1
           ==> _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))
         && _module.INode.LI($Heap, 
            this, 
            mySeq#0, 
            index#0, 
            d#0, 
            newNd#0, 
            oldNewD#0, 
            oldNewNext#0, 
            oldNewFp#0, 
            oldNewTC#0, 
            oldNewSpine#0, 
            oldD#0, 
            oldNext#0, 
            oldFp#0, 
            oldTC#0, 
            oldSpine#0)
           == (
            !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#0: int :: 
              true
                 ==> 
                LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#0
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine)))
             && (forall i#1: int :: 
              true
                 ==> 
                LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#1 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#15: Box :: 
                (exists nd#0: ref :: 
                  $Is(nd#0, Tclass._module.INode())
                     && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#0))
                     && $y#15 == $Box(nd#0))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#2: int :: 
              true
                 ==> 
                LitInt(0) <= i#2 && i#2 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#2)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#2 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
                 && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
             && (index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
             && (index#0 < Seq#Length(mySeq#0) - 1
               ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))));

// definition axiom for _module.INode.LI (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, 
      this: ref, 
      mySeq#0: Seq Box, 
      index#0: int, 
      d#0: ref, 
      newNd#0: ref, 
      oldNewD#0: ref, 
      oldNewNext#0: ref, 
      oldNewFp#0: Set Box, 
      oldNewTC#0: Seq Box, 
      oldNewSpine#0: Seq Box, 
      oldD#0: ref, 
      oldNext#0: ref, 
      oldFp#0: Set Box, 
      oldTC#0: Seq Box, 
      oldSpine#0: Seq Box :: 
    { _module.INode.LI($Heap, 
        this, 
        mySeq#0, 
        index#0, 
        d#0, 
        newNd#0, 
        oldNewD#0, 
        oldNewNext#0, 
        oldNewFp#0, 
        oldNewTC#0, 
        oldNewSpine#0, 
        oldD#0, 
        oldNext#0, 
        oldFp#0, 
        oldTC#0, 
        oldSpine#0) } 
    _module.INode.LI#canCall($Heap, 
          this, 
          mySeq#0, 
          index#0, 
          d#0, 
          newNd#0, 
          oldNewD#0, 
          oldNewNext#0, 
          oldNewFp#0, 
          oldNewTC#0, 
          oldNewSpine#0, 
          oldD#0, 
          oldNext#0, 
          oldFp#0, 
          oldTC#0, 
          oldSpine#0)
         || (
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.INode())
           && $IsAlloc(this, Tclass._module.INode(), $Heap)
           && 
          $Is(mySeq#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap)
           && 
          $Is(d#0, Tclass._module.Data())
           && $IsAlloc(d#0, Tclass._module.Data(), $Heap)
           && 
          $Is(newNd#0, Tclass._module.INode())
           && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldNewD#0, Tclass._module.Data())
           && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap)
           && 
          $Is(oldNewNext#0, Tclass._module.INode())
           && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldNewFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap)
           && 
          $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap)
           && 
          $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap)
           && 
          $Is(oldD#0, Tclass._module.Data())
           && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap)
           && 
          $Is(oldNext#0, Tclass._module.INode())
           && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap)
           && 
          $Is(oldFp#0, TSet(Tclass._module.INode()))
           && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap)
           && 
          $Is(oldTC#0, TSeq(Tclass._module.Data()))
           && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap)
           && 
          $Is(oldSpine#0, TSeq(Tclass._module.INode()))
           && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap))
       ==> (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
           ==> 
          LitInt(0 - 1) <= index#0
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
           ==> _module.INode.listInv#canCall($Heap, this, mySeq#0))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
           ==> (forall i#3: int :: 
            true
               ==> (LitInt(0) <= i#3 ==> true)
                 && (LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0) ==> true)))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
           ==> (forall i#4: int :: 
            true
               ==> (LitInt(0) <= i#4 ==> true)
                 && (LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0) ==> true)))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
           ==> (!Seq#Contains(mySeq#0, $Box(newNd#0)) ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0)) && newNd#0 != null
               ==> _module.INode.Valid#canCall($Heap, newNd#0))
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#16: Box :: 
                    (exists nd#1: ref :: 
                      $Is(nd#1, Tclass._module.INode())
                         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#1))
                         && $y#16 == $Box(nd#1))))
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#17: Box :: 
                    (exists nd#1: ref :: 
                      $Is(nd#1, Tclass._module.INode())
                         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#1))
                         && $y#17 == $Box(nd#1))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#18: Box :: 
                    (exists nd#1: ref :: 
                      $Is(nd#1, Tclass._module.INode())
                         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#1))
                         && $y#18 == $Box(nd#1))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
                 && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#19: Box :: 
                    (exists nd#1: ref :: 
                      $Is(nd#1, Tclass._module.INode())
                         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#1))
                         && $y#19 == $Box(nd#1))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
                 && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
                 && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
               ==> true)
             && (!Seq#Contains(mySeq#0, $Box(newNd#0))
                 && newNd#0 != null
                 && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
                 && read($Heap, newNd#0, _module.INode.data) == d#0
                 && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
                  (lambda $y#20: Box :: 
                    (exists nd#1: ref :: 
                      $Is(nd#1, Tclass._module.INode())
                         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                         && Seq#Contains(mySeq#0, $Box(nd#1))
                         && $y#20 == $Box(nd#1))))
                 && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
                 && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
                 && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
                 && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
               ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#21: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#21 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#22: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#22 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
           ==> 
          index#0 == Seq#Length(mySeq#0) - 1
           ==> (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                  read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.tailContents)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                  read($Heap, newNd#0, _module.INode.tailContents)))
               ==> true)
             && (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
               ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#23: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#23 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
           ==> (forall i#5: int :: 
            true
               ==> (LitInt(0) <= i#5 ==> true)
                 && (LitInt(0) <= i#5 && i#5 < index#0
                   ==> (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                       ==> true)
                     && (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                            read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                       ==> true))))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#24: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#24 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
           ==> (LitInt(0) <= index#0 ==> true)
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#25: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#25 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
           ==> (LitInt(0) <= index#0 ==> true)
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#26: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#26 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
           ==> (LitInt(0) <= index#0 ==> true)
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#27: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#27 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
           ==> 
          Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#28: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#28 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
           ==> (LitInt(0 - 1) <= index#0 ==> true)
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> 
              Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
               ==> true))
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#29: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#29 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
                 && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
           ==> 
          index#0 < Seq#Length(mySeq#0) - 1
           ==> true)
         && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#30: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#30 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
                 && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
             && (index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
           ==> 
          index#0 < Seq#Length(mySeq#0) - 1
           ==> _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))
         && _module.INode.LI($Heap, 
            this, 
            mySeq#0, 
            index#0, 
            d#0, 
            newNd#0, 
            oldNewD#0, 
            oldNewNext#0, 
            oldNewFp#0, 
            oldNewTC#0, 
            oldNewSpine#0, 
            oldD#0, 
            oldNext#0, 
            oldFp#0, 
            oldTC#0, 
            oldSpine#0)
           == (
            !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
             && 
            LitInt(0 - 1) <= index#0
             && index#0 <= Seq#Length(mySeq#0) - 1
             && _module.INode.listInv($Heap, this, mySeq#0)
             && (forall i#3: int :: 
              true
                 ==> 
                LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#3
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.spine)))
             && (forall i#4: int :: 
              true
                 ==> 
                LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0)
                 ==> Seq#Length(mySeq#0) - i#4 - 1
                   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents)))
             && 
            !Seq#Contains(mySeq#0, $Box(newNd#0))
             && newNd#0 != null
             && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
             && read($Heap, newNd#0, _module.INode.data) == d#0
             && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
              (lambda $y#31: Box :: 
                (exists nd#1: ref :: 
                  $Is(nd#1, Tclass._module.INode())
                     && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
                     && Seq#Contains(mySeq#0, $Box(nd#1))
                     && $y#31 == $Box(nd#1))))
             && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
             && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
             && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
             && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
             && read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.next)
               == newNd#0
             && (index#0 == Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
                    read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.tailContents)), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
                    read($Heap, newNd#0, _module.INode.tailContents)))
                 && Set#Equal(Set#Union(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.footprint), 
                    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.footprint)))
                 && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                            _module.INode.spine), 
                          LitInt(1)), 
                        LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                    Seq#Drop(read($Heap, 
                        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                        _module.INode.spine), 
                      LitInt(1))), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
                    read($Heap, newNd#0, _module.INode.spine))))
             && (forall i#5: int :: 
              true
                 ==> 
                LitInt(0) <= i#5 && i#5 < index#0
                 ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
                   && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                        Seq#Length(mySeq#0) - index#0 - 1), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                    Seq#Length(mySeq#0) - index#0 - 1)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
                  Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
             && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                        Seq#Length(mySeq#0) - index#0), 
                      LitInt(0)), 
                    Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
                  Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                    Seq#Length(mySeq#0) - index#0)), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
                  read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
             && 
            Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
             && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
             && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
                    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
                 && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
             && (index#0 < Seq#Length(mySeq#0) - 1
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
             && (index#0 < Seq#Length(mySeq#0) - 1
               ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))));

procedure CheckWellformed$$_module.INode.LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 12 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.LI(this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##nd#0: ref;
  var ##mySeq#0: Seq Box;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var _s2s_0#0: ref;
  var _s2s_1#0: ref;
  var _s2s_2#0: ref;
  var ##nd#1: ref;
  var ##mySeq#1: Seq Box;
  var ##mySeq#2: Seq Box;
  var i#6: int;
  var i#7: int;
  var nd#3: ref;
  var i#10: int;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;
  var b$reqreads#16: bool;
  var b$reqreads#17: bool;
  var b$reqreads#18: bool;
  var b$reqreads#19: bool;
  var b$reqreads#20: bool;
  var b$reqreads#21: bool;
  var b$reqreads#22: bool;
  var b$reqreads#23: bool;
  var b$reqreads#24: bool;
  var b$reqreads#25: bool;
  var b$reqreads#26: bool;
  var b$reqreads#27: bool;
  var b$reqreads#28: bool;
  var b$reqreads#29: bool;
  var b$reqreads#30: bool;
  var b$reqreads#31: bool;
  var b$reqreads#32: bool;
  var b$reqreads#33: bool;
  var b$reqreads#34: bool;
  var b$reqreads#35: bool;
  var b$reqreads#36: bool;
  var b$reqreads#37: bool;
  var b$reqreads#38: bool;
  var b$reqreads#39: bool;
  var b$reqreads#40: bool;
  var b$reqreads#41: bool;
  var b$reqreads#42: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;
    b$reqreads#16 := true;
    b$reqreads#17 := true;
    b$reqreads#18 := true;
    b$reqreads#19 := true;
    b$reqreads#20 := true;
    b$reqreads#21 := true;
    b$reqreads#22 := true;
    b$reqreads#23 := true;
    b$reqreads#24 := true;
    b$reqreads#25 := true;
    b$reqreads#26 := true;
    b$reqreads#27 := true;
    b$reqreads#28 := true;
    b$reqreads#29 := true;
    b$reqreads#30 := true;
    b$reqreads#31 := true;
    b$reqreads#32 := true;
    b$reqreads#33 := true;
    b$reqreads#34 := true;
    b$reqreads#35 := true;
    b$reqreads#36 := true;
    b$reqreads#37 := true;
    b$reqreads#38 := true;
    b$reqreads#39 := true;
    b$reqreads#40 := true;
    b$reqreads#41 := true;
    b$reqreads#42 := true;

    // AddWellformednessCheck for function LI
    assume {:captureState "INode.dfy(209,10): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || $o == newNd#0
       || $o == oldNext#0
       || oldFp#0[$Box($o)]
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(oldTC#0) && Seq#Index(oldTC#0, $i) == $Box($o))
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(oldSpine#0) && Seq#Index(oldSpine#0, $i) == $Box($o))
       || _module.INode.getFtprint($Heap, this, newNd#0)[$Box($o)]
       || _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0)[$Box($o)]);
    assert true;
    ##nd#0 := newNd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##nd#0, Tclass._module.INode(), $Heap);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == ##nd#0 ==> $_Frame[$o, $f]);
    assume _module.INode.getFtprint#canCall($Heap, this, newNd#0);
    assert true;
    ##mySeq#0 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
    b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && (exists $i: int :: 
        0 <= $i && $i < Seq#Length(##mySeq#0) && Seq#Index(##mySeq#0, $i) == $Box($o))
     ==> $_Frame[$o, $f]);
    assume _module.INode.sumAllFtprint#canCall($Heap, this, mySeq#0);
    assert b$reqreads#0;
    assert b$reqreads#1;
    havoc _s2s_0#0;
    assume $Is(_s2s_0#0, Tclass._module.INode())
   && $IsAlloc(_s2s_0#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(_s2s_0#0)))
    {
    }

    // End Comprehension WF check
    havoc _s2s_1#0;
    assume $Is(_s2s_1#0, Tclass._module.Data())
   && $IsAlloc(_s2s_1#0, Tclass._module.Data(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(oldTC#0, $Box(_s2s_1#0)))
    {
    }

    // End Comprehension WF check
    havoc _s2s_2#0;
    assume $Is(_s2s_2#0, Tclass._module.INode())
   && $IsAlloc(_s2s_2#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(oldSpine#0, $Box(_s2s_2#0)))
    {
    }

    // End Comprehension WF check
    assert true;
    ##nd#1 := newNd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##nd#1, Tclass._module.INode(), $Heap);
    assume _module.INode.getFtprint#canCall($Heap, this, newNd#0);
    assert true;
    ##mySeq#1 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#1, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.sumAllFtprint#canCall($Heap, this, mySeq#0);
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o))
       || $o == newNd#0
       || $o == oldNext#0
       || oldFp#0[$Box($o)]
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(oldTC#0) && Seq#Index(oldTC#0, $i) == $Box($o))
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(oldSpine#0) && Seq#Index(oldSpine#0, $i) == $Box($o))
       || _module.INode.getFtprint($Heap, this, newNd#0)[$Box($o)]
       || _module.INode.sumAllFtprint($LS($LZ), $Heap, this, mySeq#0)[$Box($o)]);
        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box))
        {
            if (LitInt(0 - 1) <= index#0)
            {
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1)
        {
            assert true;
            ##mySeq#2 := mySeq#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##mySeq#2, TSeq(Tclass._module.INode()), $Heap);
            b$reqreads#2 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ((exists $i: int :: 
          0 <= $i && $i < Seq#Length(##mySeq#2) && Seq#Index(##mySeq#2, $i) == $Box($o))
         || (lambda $y#32: Box :: 
          (exists nd#2: ref :: 
            $Is(nd#2, Tclass._module.INode())
               && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
               && Seq#Contains(##mySeq#2, $Box(nd#2))
               && $y#32 == $Box(nd#2)))[$Box($o)])
     ==> $_Frame[$o, $f]);
            assume _module.INode.listInv#canCall($Heap, this, mySeq#0);
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0))
        {
            havoc i#6;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#6)
            {
            }

            if (LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0))
            {
                assert 0 <= i#6 && i#6 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#6)): ref != null;
                b$reqreads#3 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.spine];
            }

            // End Comprehension WF check
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine))))
        {
            havoc i#7;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#7)
            {
            }

            if (LitInt(0) <= i#7 && i#7 < Seq#Length(mySeq#0))
            {
                assert 0 <= i#7 && i#7 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#7)): ref != null;
                b$reqreads#4 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#7)): ref, _module.INode.tailContents];
            }

            // End Comprehension WF check
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents))))
        {
            if (!Seq#Contains(mySeq#0, $Box(newNd#0)))
            {
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0)) && newNd#0 != null)
            {
                assert newNd#0 != null;
                b$reqreads#5 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == newNd#0 || read($Heap, newNd#0, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assume _module.INode.Valid#canCall($Heap, newNd#0);
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0))
            {
                assert newNd#0 != null;
                b$reqreads#6 := $_Frame[newNd#0, _module.INode.data];
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0)
            {
                assert newNd#0 != null;
                b$reqreads#7 := $_Frame[newNd#0, _module.INode.footprint];
                havoc nd#3;
                assume $Is(nd#3, Tclass._module.INode())
   && $IsAlloc(nd#3, Tclass._module.INode(), $Heap);
                // Begin Comprehension WF check
                if (Seq#Contains(mySeq#0, $Box(nd#3)))
                {
                }

                // End Comprehension WF check
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#33: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#33 == $Box(nd#4)))))
            {
                assert newNd#0 != null;
                b$reqreads#8 := $_Frame[newNd#0, _module.INode.data];
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#34: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#34 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0)
            {
                assert newNd#0 != null;
                b$reqreads#9 := $_Frame[newNd#0, _module.INode.next];
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#35: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#35 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0)
            {
                assert newNd#0 != null;
                b$reqreads#10 := $_Frame[newNd#0, _module.INode.footprint];
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#36: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#36 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0))
            {
                assert newNd#0 != null;
                b$reqreads#11 := $_Frame[newNd#0, _module.INode.tailContents];
            }

            if (!Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#37: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#37 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0))
            {
                assert newNd#0 != null;
                b$reqreads#12 := $_Frame[newNd#0, _module.INode.spine];
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#38: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#38 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0))
        {
            assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
            assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
            b$reqreads#13 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.next];
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#39: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#39 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0)
        {
            if (index#0 == Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                b$reqreads#14 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.tailContents];
                assert newNd#0 != null;
                b$reqreads#15 := $_Frame[newNd#0, _module.INode.data];
                assert newNd#0 != null;
                b$reqreads#16 := $_Frame[newNd#0, _module.INode.tailContents];
                if (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents))))
                {
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                    b$reqreads#17 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.footprint];
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert newNd#0 != null;
                    b$reqreads#18 := $_Frame[newNd#0, _module.INode.footprint];
                }

                if (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
      read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.tailContents)), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
      read($Heap, newNd#0, _module.INode.tailContents)))
   && Set#Equal(Set#Union(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
        $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
      read($Heap, newNd#0, _module.INode.footprint))))
                {
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                    b$reqreads#19 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.spine];
                    assert 0 <= LitInt(0)
   && LitInt(0)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
                    assert LitInt(0) <= LitInt(1)
   && LitInt(1)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
                    b$reqreads#20 := $_Frame[$Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, _module.INode.spine];
                    assert 0 <= LitInt(1)
   && LitInt(1)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
                    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
                    assert newNd#0 != null;
                    b$reqreads#21 := $_Frame[newNd#0, _module.INode.spine];
                }
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#40: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#40 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine)))))
        {
            havoc i#10;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#10)
            {
            }

            if (LitInt(0) <= i#10 && i#10 < index#0)
            {
                assert 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                b$reqreads#22 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.tailContents];
                assert 0 <= i#10 + 1 && i#10 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref != null;
                b$reqreads#23 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.data];
                assert 0 <= i#10 + 1 && i#10 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref != null;
                b$reqreads#24 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.tailContents];
                if (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.data))), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.tailContents))))
                {
                    assert 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                    b$reqreads#25 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.footprint];
                    assert 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                    assert 0 <= i#10 + 1 && i#10 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref != null;
                    b$reqreads#26 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.footprint];
                }

                if (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.tailContents), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.data))), 
      read($Heap, $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.tailContents)))
   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.footprint), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#10)): ref)), 
      read($Heap, $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.footprint))))
                {
                    assert 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                    b$reqreads#27 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.spine];
                    assert 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                    assert 0 <= i#10 + 1 && i#10 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref != null;
                    b$reqreads#28 := $_Frame[$Unbox(Seq#Index(mySeq#0, i#10 + 1)): ref, _module.INode.spine];
                }
            }

            // End Comprehension WF check
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#41: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#41 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine)))))
        {
            if (LitInt(0) <= index#0)
            {
            }

            if (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
                b$reqreads#29 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents];
                assert 0 <= LitInt(0)
   && LitInt(0)
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
                assert LitInt(0) <= Seq#Length(mySeq#0) - index#0 - 1
   && Seq#Length(mySeq#0) - index#0 - 1
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
                b$reqreads#30 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents];
                assert 0 <= Seq#Length(mySeq#0) - index#0 - 1
   && Seq#Length(mySeq#0) - index#0 - 1
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#31 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data];
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#32 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents];
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#42: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#42 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents)))))
        {
            if (LitInt(0) <= index#0)
            {
            }

            if (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
                b$reqreads#33 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint];
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#34 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint];
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#43: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#43 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)))))
        {
            if (LitInt(0) <= index#0)
            {
            }

            if (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
                b$reqreads#35 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine];
                assert 0 <= LitInt(0)
   && LitInt(0)
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine));
                assert LitInt(0) <= Seq#Length(mySeq#0) - index#0
   && Seq#Length(mySeq#0) - index#0
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine));
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
                b$reqreads#36 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine];
                assert 0 <= Seq#Length(mySeq#0) - index#0
   && Seq#Length(mySeq#0) - index#0
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine));
                assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#37 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine];
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#44: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#44 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine)))))
        {
            if (Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2)
            {
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#45: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#45 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1)
        {
            if (LitInt(0 - 1) <= index#0)
            {
            }

            if (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#38 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents];
                assert 0 <= LitInt(0) && LitInt(0) <= Seq#Length(oldTC#0);
                assert LitInt(0) <= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(mySeq#0) - index#0 - 2 <= Seq#Length(oldTC#0);
                assert 0 <= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(mySeq#0) - index#0 - 2 <= Seq#Length(oldTC#0);
                if (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2))))
                {
                    assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                    assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                    b$reqreads#39 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint];
                }
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#46: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#46 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
   && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))))))
        {
            if (index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#40 := $_Frame[$Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine];
                assert 0 <= index#0 + 1 && index#0 + 1 <= Seq#Length(mySeq#0);
                assert newNd#0 != null;
                b$reqreads#41 := $_Frame[newNd#0, _module.INode.spine];
            }
        }

        if (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#9 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#47: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#47 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
   && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
      Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine)))))
        {
            if (index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                b$reqreads#42 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref
         || read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assume _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref);
            }
        }

        assert true;
        assume _module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   == (
    !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
     && 
    LitInt(0 - 1) <= index#0
     && index#0 <= Seq#Length(mySeq#0) - 1
     && _module.INode.listInv($Heap, this, mySeq#0)
     && (forall i#8: int :: 
      true
         ==> 
        LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#8
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
     && (forall i#9: int :: 
      true
         ==> 
        LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#9 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
     && 
    !Seq#Contains(mySeq#0, $Box(newNd#0))
     && newNd#0 != null
     && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     && read($Heap, newNd#0, _module.INode.data) == d#0
     && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#48: Box :: 
        (exists nd#4: ref :: 
          $Is(nd#4, Tclass._module.INode())
             && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#4))
             && $y#48 == $Box(nd#4))))
     && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
     && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
     && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
     && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
     && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
     && read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0
     && (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
            read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.tailContents)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
            read($Heap, newNd#0, _module.INode.tailContents)))
         && Set#Equal(Set#Union(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
              $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
            read($Heap, newNd#0, _module.INode.footprint)))
         && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.spine), 
                  LitInt(1)), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
            Seq#Drop(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.spine), 
              LitInt(1))), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
            read($Heap, newNd#0, _module.INode.spine))))
     && (forall i#11: int :: 
      true
         ==> 
        LitInt(0) <= i#11 && i#11 < index#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
     && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - index#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - index#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
     && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
     && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - index#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - index#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
     && 
    Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
     && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
     && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
          Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
     && (index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
     && (index#0 < Seq#Length(mySeq#0) - 1
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)));
        assume (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
     ==> 
    LitInt(0 - 1) <= index#0
     ==> true)
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
     ==> _module.INode.listInv#canCall($Heap, this, mySeq#0))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
     ==> (forall i#8: int :: 
      true
         ==> (LitInt(0) <= i#8 ==> true)
           && (LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0) ==> true)))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
     ==> (forall i#9: int :: 
      true
         ==> (LitInt(0) <= i#9 ==> true)
           && (LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0) ==> true)))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
     ==> (!Seq#Contains(mySeq#0, $Box(newNd#0)) ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0)) && newNd#0 != null
         ==> _module.INode.Valid#canCall($Heap, newNd#0))
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
           && read($Heap, newNd#0, _module.INode.data) == d#0
         ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
           && read($Heap, newNd#0, _module.INode.data) == d#0
           && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
            (lambda $y#49: Box :: 
              (exists nd#4: ref :: 
                $Is(nd#4, Tclass._module.INode())
                   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
                   && Seq#Contains(mySeq#0, $Box(nd#4))
                   && $y#49 == $Box(nd#4))))
         ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
           && read($Heap, newNd#0, _module.INode.data) == d#0
           && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
            (lambda $y#50: Box :: 
              (exists nd#4: ref :: 
                $Is(nd#4, Tclass._module.INode())
                   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
                   && Seq#Contains(mySeq#0, $Box(nd#4))
                   && $y#50 == $Box(nd#4))))
           && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
         ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
           && read($Heap, newNd#0, _module.INode.data) == d#0
           && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
            (lambda $y#51: Box :: 
              (exists nd#4: ref :: 
                $Is(nd#4, Tclass._module.INode())
                   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
                   && Seq#Contains(mySeq#0, $Box(nd#4))
                   && $y#51 == $Box(nd#4))))
           && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
           && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
         ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
           && read($Heap, newNd#0, _module.INode.data) == d#0
           && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
            (lambda $y#52: Box :: 
              (exists nd#4: ref :: 
                $Is(nd#4, Tclass._module.INode())
                   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
                   && Seq#Contains(mySeq#0, $Box(nd#4))
                   && $y#52 == $Box(nd#4))))
           && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
           && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
           && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
         ==> true)
       && (!Seq#Contains(mySeq#0, $Box(newNd#0))
           && newNd#0 != null
           && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
           && read($Heap, newNd#0, _module.INode.data) == d#0
           && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
            (lambda $y#53: Box :: 
              (exists nd#4: ref :: 
                $Is(nd#4, Tclass._module.INode())
                   && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
                   && Seq#Contains(mySeq#0, $Box(nd#4))
                   && $y#53 == $Box(nd#4))))
           && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
           && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
           && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
           && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
         ==> true))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#54: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#54 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
     ==> true)
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#55: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#55 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
     ==> 
    index#0 == Seq#Length(mySeq#0) - 1
     ==> (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
            read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.tailContents)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
            read($Heap, newNd#0, _module.INode.tailContents)))
         ==> true)
       && (Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
         ==> true))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#56: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#56 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
     ==> (forall i#11: int :: 
      true
         ==> (LitInt(0) <= i#11 ==> true)
           && (LitInt(0) <= i#11 && i#11 < index#0
             ==> (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
                  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                      $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
                 ==> true)
               && (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
                    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                        $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
                   && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                      read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
                 ==> true))))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#57: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#57 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
     ==> (LitInt(0) <= index#0 ==> true)
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#58: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#58 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                  Seq#Length(mySeq#0) - index#0 - 1), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
     ==> (LitInt(0) <= index#0 ==> true)
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#59: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#59 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                  Seq#Length(mySeq#0) - index#0 - 1), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
     ==> (LitInt(0) <= index#0 ==> true)
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1 ==> true))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#60: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#60 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                  Seq#Length(mySeq#0) - index#0 - 1), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                  Seq#Length(mySeq#0) - index#0), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
     ==> 
    Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
     ==> true)
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#61: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#61 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                  Seq#Length(mySeq#0) - index#0 - 1), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                  Seq#Length(mySeq#0) - index#0), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
       && 
      Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
       && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
     ==> (LitInt(0 - 1) <= index#0 ==> true)
       && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> 
        Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
         ==> true))
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#62: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#62 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                  Seq#Length(mySeq#0) - index#0 - 1), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                  Seq#Length(mySeq#0) - index#0), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
       && 
      Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
       && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
       && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
              Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
            Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
     ==> 
    index#0 < Seq#Length(mySeq#0) - 1
     ==> true)
   && (!Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
       && 
      LitInt(0 - 1) <= index#0
       && index#0 <= Seq#Length(mySeq#0) - 1
       && _module.INode.listInv($Heap, this, mySeq#0)
       && (forall i#8: int :: 
        true
           ==> 
          LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#8
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.spine)))
       && (forall i#9: int :: 
        true
           ==> 
          LitInt(0) <= i#9 && i#9 < Seq#Length(mySeq#0)
           ==> Seq#Length(mySeq#0) - i#9 - 1
             <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents)))
       && 
      !Seq#Contains(mySeq#0, $Box(newNd#0))
       && newNd#0 != null
       && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
       && read($Heap, newNd#0, _module.INode.data) == d#0
       && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
        (lambda $y#63: Box :: 
          (exists nd#4: ref :: 
            $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
               && Seq#Contains(mySeq#0, $Box(nd#4))
               && $y#63 == $Box(nd#4))))
       && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
       && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
       && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
       && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
       && read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.next)
         == newNd#0
       && (index#0 == Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
              read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.tailContents)), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
              read($Heap, newNd#0, _module.INode.tailContents)))
           && Set#Equal(Set#Union(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.footprint), 
              Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.footprint)))
           && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                      _module.INode.spine), 
                    LitInt(1)), 
                  LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
              Seq#Drop(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1))), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
              read($Heap, newNd#0, _module.INode.spine))))
       && (forall i#11: int :: 
        true
           ==> 
          LitInt(0) <= i#11 && i#11 < index#0
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.data))), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.tailContents)))
             && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
              Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.footprint)))
             && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.spine), 
              Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#11)): ref)), 
                read($Heap, $Unbox(Seq#Index(mySeq#0, i#11 + 1)): ref, _module.INode.spine))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                  Seq#Length(mySeq#0) - index#0 - 1), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
       && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                  Seq#Length(mySeq#0) - index#0), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
            Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
       && 
      Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
       && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
       && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
              Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
            Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
       && (index#0 < Seq#Length(mySeq#0) - 1
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
          Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
     ==> 
    index#0 < Seq#Length(mySeq#0) - 1
     ==> _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0), 
  TBool, 
  $Heap);
        assume $Is(_module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0), 
  TBool);
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
        assert b$reqreads#13;
        assert b$reqreads#14;
        assert b$reqreads#15;
        assert b$reqreads#16;
        assert b$reqreads#17;
        assert b$reqreads#18;
        assert b$reqreads#19;
        assert b$reqreads#20;
        assert b$reqreads#21;
        assert b$reqreads#22;
        assert b$reqreads#23;
        assert b$reqreads#24;
        assert b$reqreads#25;
        assert b$reqreads#26;
        assert b$reqreads#27;
        assert b$reqreads#28;
        assert b$reqreads#29;
        assert b$reqreads#30;
        assert b$reqreads#31;
        assert b$reqreads#32;
        assert b$reqreads#33;
        assert b$reqreads#34;
        assert b$reqreads#35;
        assert b$reqreads#36;
        assert b$reqreads#37;
        assert b$reqreads#38;
        assert b$reqreads#39;
        assert b$reqreads#40;
        assert b$reqreads#41;
        assert b$reqreads#42;
    }
}



procedure CheckWellformed$$_module.INode.pre2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (index#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 13 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.pre2LI(this: ref, 
    mySeq#0: Seq Box, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD0#0: ref, 
    oldNext0#0: ref, 
    oldFp0#0: Set Box, 
    oldTC0#0: Seq Box, 
    oldSpine0#0: Seq Box)
   returns (index#0: int, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##mySeq#0: Seq Box;
  var nd#0: ref;
  var i#0: int;
  var i#2: int;
  var i#4: int;
  var ##mySeq#1: Seq Box;
  var ##index#0: int;
  var ##d#0: ref;
  var ##newNd#0: ref;
  var ##oldNewD#0: ref;
  var ##oldNewNext#0: ref;
  var ##oldNewFp#0: Set Box;
  var ##oldNewTC#0: Seq Box;
  var ##oldNewSpine#0: Seq Box;
  var ##oldD#0: ref;
  var ##oldNext#0: ref;
  var ##oldFp#0: Set Box;
  var ##oldTC#0: Seq Box;
  var ##oldSpine#0: Seq Box;

    // AddMethodImpl: pre2LI, CheckWellformed$$_module.INode.pre2LI
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "INode.dfy(285,13): initial state"} true;
    assume !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
    assert true;
    ##mySeq#0 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.listInv#canCall($Heap, this, mySeq#0);
    assume _module.INode.listInv($Heap, this, mySeq#0);
    assume !Seq#Contains(mySeq#0, $Box(newNd#0));
    assume newNd#0 != null;
    assert newNd#0 != null;
    assume _module.INode.Valid#canCall($Heap, newNd#0);
    assume _module.INode.Valid($LS($LZ), $Heap, newNd#0);
    assert newNd#0 != null;
    assume read($Heap, newNd#0, _module.INode.data) == d#0;
    assert newNd#0 != null;
    havoc nd#0;
    assume $Is(nd#0, Tclass._module.INode())
   && $IsAlloc(nd#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#0)))
    {
    }

    // End Comprehension WF check
    assume Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#0: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#0 == $Box(nd#1))));
    havoc i#0;
    if (*)
    {
        assume LitInt(0) <= i#0;
        assume i#0 < Seq#Length(mySeq#0);
        assert 0 <= i#0 && i#0 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#0)): ref != null;
        assume Seq#Length(mySeq#0) - i#0
   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine));
    }
    else
    {
        assume LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
   ==> Seq#Length(mySeq#0) - i#0
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine));
    }

    assume (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
    havoc i#2;
    if (*)
    {
        assume LitInt(0) <= i#2;
        assume i#2 < Seq#Length(mySeq#0);
        assert 0 <= i#2 && i#2 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#2)): ref != null;
        assume Seq#Length(mySeq#0) - i#2 - 1
   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents));
    }
    else
    {
        assume LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0)
   ==> Seq#Length(mySeq#0) - i#2 - 1
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents));
    }

    assume (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
    havoc i#4;
    if (*)
    {
        assume LitInt(0) <= i#4;
        assume i#4 < Seq#Length(mySeq#0) - 1;
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents)));
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assume Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)));
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine)));
    }
    else
    {
        assume LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0) - 1
   ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents)))
     && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)))
     && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine)));
    }

    assume (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assume read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assert newNd#0 != null;
    assert newNd#0 != null;
    assume Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert newNd#0 != null;
    assume Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assert 0 <= LitInt(0)
   && LitInt(0)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
    assert LitInt(0) <= LitInt(1)
   && LitInt(1)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assert 0 <= LitInt(1)
   && LitInt(1)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert newNd#0 != null;
    assume Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
    assume oldNewD#0 == d#0;
    assert newNd#0 != null;
    assume oldNewNext#0 == read($Heap, newNd#0, _module.INode.next);
    assert newNd#0 != null;
    assume Set#Equal(oldNewFp#0, read($Heap, newNd#0, _module.INode.footprint));
    assert newNd#0 != null;
    assume Seq#Equal(oldNewTC#0, read($Heap, newNd#0, _module.INode.tailContents));
    assert newNd#0 != null;
    assume Seq#Equal(oldNewSpine#0, read($Heap, newNd#0, _module.INode.spine));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc index#0, oldD#0, oldNext#0, oldFp#0, oldTC#0, oldSpine#0;
    assume {:captureState "INode.dfy(325,14): post-state"} true;
    assume index#0 == Seq#Length(mySeq#0) - 1;
    assert true;
    ##mySeq#1 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#1, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##index#0 := index#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##index#0, TInt, $Heap);
    assert true;
    ##d#0 := d#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##d#0, Tclass._module.Data(), $Heap);
    assert true;
    ##newNd#0 := newNd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##newNd#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewD#0 := oldNewD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewD#0, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNewNext#0 := oldNewNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewNext#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewFp#0 := oldNewFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewFp#0, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldNewTC#0 := oldNewTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewTC#0, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldNewSpine#0 := oldNewSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##oldD#0 := oldNewD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldD#0, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNext#0 := oldNewNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNext#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldFp#0 := oldNewFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldFp#0, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldTC#0 := oldNewTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldTC#0, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldSpine#0 := oldNewSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldSpine#0, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0);
    assume _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0);
}



procedure InterModuleCall$$_module.INode.pre2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (index#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  // user-defined preconditions
  requires !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  requires _module.INode.listInv($Heap, this, mySeq#0);
  requires !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires newNd#0 != null;
  requires _module.INode.Valid($LS($LS($LZ)), $Heap, newNd#0);
  requires read($Heap, newNd#0, _module.INode.data) == d#0;
  requires Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#1: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#1 == $Box(nd#1))));
  requires (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
  requires (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
  requires read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
  requires Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
  requires Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
  requires Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
  requires oldNewD#0 == d#0;
  requires oldNewNext#0 == read($Heap, newNd#0, _module.INode.next);
  requires Set#Equal(oldNewFp#0, read($Heap, newNd#0, _module.INode.footprint));
  requires Seq#Equal(oldNewTC#0, read($Heap, newNd#0, _module.INode.tailContents));
  requires Seq#Equal(oldNewSpine#0, read($Heap, newNd#0, _module.INode.spine));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures index#0 == Seq#Length(mySeq#0) - 1;
  free ensures _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0);
  ensures _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure IntraModuleCall$$_module.INode.pre2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (index#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  // user-defined preconditions
  requires !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || !Seq#Contains(mySeq#0, $Box(null));
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || (forall nd#2: ref :: 
      $Is(nd#2, Tclass._module.INode())
           && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
         ==> 
        Seq#Contains(mySeq#0, $Box(nd#2))
         ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)]);
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || (forall i#6: int :: 
      true
         ==> 
        LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
         ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
           == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref);
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || (forall i#7: int, j#0: int :: 
      true
         ==> 
        LitInt(0) <= i#7 && i#7 < j#0 && j#0 < Seq#Length(mySeq#0)
         ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#0)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#7)): ref)]);
  requires !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires newNd#0 != null;
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]);
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))]));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)]));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
              read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
              read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box)));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) == null
           ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (read($Heap, newNd#0, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next)));
  requires read($Heap, newNd#0, _module.INode.data) == d#0;
  requires Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#2: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#2 == $Box(nd#1))));
  requires (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
  requires (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
  requires read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
  requires Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
  requires Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
  requires Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
  requires oldNewD#0 == d#0;
  requires oldNewNext#0 == read($Heap, newNd#0, _module.INode.next);
  requires Set#Equal(oldNewFp#0, read($Heap, newNd#0, _module.INode.footprint));
  requires Seq#Equal(oldNewTC#0, read($Heap, newNd#0, _module.INode.tailContents));
  requires Seq#Equal(oldNewSpine#0, read($Heap, newNd#0, _module.INode.spine));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures index#0 == Seq#Length(mySeq#0) - 1;
  free ensures _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0);
  free ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   && 
  _module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   && 
  !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#10: int :: 
    true
       ==> 
      LitInt(0) <= i#10 && i#10 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#10
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.spine)))
   && (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#11 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#4: Box :: 
      (exists nd#4: ref :: 
        $Is(nd#4, Tclass._module.INode())
           && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#4))
           && $y#4 == $Box(nd#4))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#12: int :: 
    true
       ==> 
      LitInt(0) <= i#12 && i#12 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#12)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#12 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#12 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#12)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#12)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#12 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#12)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#12)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#12 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldNewTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(oldNewSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
   && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldNewTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldNewTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldNewFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
      Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure Impl$$_module.INode.pre2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (index#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 13 == $FunctionContextHeight;
  // user-defined preconditions
  requires !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  free requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   && 
  _module.INode.listInv($Heap, this, mySeq#0)
   && 
  !Seq#Contains(mySeq#0, $Box(null))
   && (forall nd#5: ref :: 
    $Is(nd#5, Tclass._module.INode())
         && $IsAlloc(nd#5, Tclass._module.INode(), $Heap)
       ==> 
      Seq#Contains(mySeq#0, $Box(nd#5))
       ==> read($Heap, nd#5, _module.INode.footprint)[$Box(nd#5)])
   && (forall i#13: int :: 
    true
       ==> 
      LitInt(0) <= i#13 && i#13 < Seq#Length(mySeq#0) - 1
       ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#13)): ref, _module.INode.next)
         == $Unbox(Seq#Index(mySeq#0, i#13 + 1)): ref)
   && (forall i#14: int, j#2: int :: 
    true
       ==> 
      LitInt(0) <= i#14 && i#14 < j#2 && j#2 < Seq#Length(mySeq#0)
       ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#2)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#14)): ref)]);
  requires !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires newNd#0 != null;
  free requires _module.INode.Valid#canCall($Heap, newNd#0)
   && 
  _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && 
  _module.INode.good($Heap, newNd#0)
   && (read($Heap, newNd#0, _module.INode.next) != null
     ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, newNd#0, _module.INode.next)));
  requires read($Heap, newNd#0, _module.INode.data) == d#0;
  requires Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#5: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#5 == $Box(nd#1))));
  requires (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
  requires (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
  requires read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
  requires Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
  requires Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
  requires Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
  requires oldNewD#0 == d#0;
  requires oldNewNext#0 == read($Heap, newNd#0, _module.INode.next);
  requires Set#Equal(oldNewFp#0, read($Heap, newNd#0, _module.INode.footprint));
  requires Seq#Equal(oldNewTC#0, read($Heap, newNd#0, _module.INode.tailContents));
  requires Seq#Equal(oldNewSpine#0, read($Heap, newNd#0, _module.INode.spine));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures index#0 == Seq#Length(mySeq#0) - 1;
  free ensures _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || LitInt(0 - 1) <= index#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || index#0 <= Seq#Length(mySeq#0) - 1;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || !Seq#Contains(mySeq#0, $Box(null)));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall nd#6: ref :: 
          $Is(nd#6, Tclass._module.INode())
               && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(mySeq#0, $Box(nd#6))
             ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#15: int :: 
          true
             ==> 
            LitInt(0) <= i#15 && i#15 < Seq#Length(mySeq#0) - 1
             ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#15)): ref, _module.INode.next)
               == $Unbox(Seq#Index(mySeq#0, i#15 + 1)): ref));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#16: int, j#3: int :: 
          true
             ==> 
            LitInt(0) <= i#16 && i#16 < j#3 && j#3 < Seq#Length(mySeq#0)
             ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#3)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#16)): ref)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (forall i#17: int :: 
      true
         ==> 
        LitInt(0) <= i#17 && i#17 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#17
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#17)): ref, _module.INode.spine)));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (forall i#18: int :: 
      true
         ==> 
        LitInt(0) <= i#18 && i#18 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#18 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#18)): ref, _module.INode.tailContents)));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || !Seq#Contains(mySeq#0, $Box(newNd#0));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || newNd#0 != null;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == d#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#6: Box :: 
        (exists nd#7: ref :: 
          $Is(nd#7, Tclass._module.INode())
             && $IsAlloc(nd#7, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#7))
             && $y#6 == $Box(nd#7))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == oldNewD#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || read($Heap, newNd#0, _module.INode.next) == oldNewNext#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (forall i#19: int :: 
      true
         ==> 
        LitInt(0) <= i#19 && i#19 < index#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#19)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#19)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - index#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - index#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - index#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - index#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || Seq#Length(oldNewTC#0) >= Seq#Length(mySeq#0) - index#0 - 2;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || Seq#Length(oldNewSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldNewTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldNewTC#0, Seq#Length(mySeq#0) - index#0 - 2))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldNewFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> !read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.footprint))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.spine))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, 
                        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                        _module.INode.data))), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.tailContents))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Empty(): Seq Box))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
             != null
           ==> _module.INode.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation Impl$$_module.INode.pre2LI(this: ref, 
    mySeq#0: Seq Box, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD0#0: ref, 
    oldNext0#0: ref, 
    oldFp0#0: Set Box, 
    oldTC0#0: Seq Box, 
    oldSpine0#0: Seq Box)
   returns (index#0: int, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box, 
    $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: int;
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.Data())
     && $IsAlloc($rhs#1, Tclass._module.Data(), $Heap);
  var $rhs#2: ref
   where $Is($rhs#2, Tclass._module.INode())
     && $IsAlloc($rhs#2, Tclass._module.INode(), $Heap);
  var $rhs#3: Set Box
   where $Is($rhs#3, TSet(Tclass._module.INode()))
     && $IsAlloc($rhs#3, TSet(Tclass._module.INode()), $Heap);
  var $rhs#4: Seq Box
   where $Is($rhs#4, TSeq(Tclass._module.Data()))
     && $IsAlloc($rhs#4, TSeq(Tclass._module.Data()), $Heap);
  var $rhs#5: Seq Box
   where $Is($rhs#5, TSeq(Tclass._module.INode()))
     && $IsAlloc($rhs#5, TSeq(Tclass._module.INode()), $Heap);

    // AddMethodImpl: pre2LI, Impl$$_module.INode.pre2LI
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "INode.dfy(330,0): initial state"} true;
    $_reverifyPost := false;
    // ----- update statement ----- INode.dfy(332,46)
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assert true;
    $rhs#0 := Seq#Length(mySeq#0) - 1;
    assert newNd#0 != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, newNd#0, _module.INode.data);
    assert newNd#0 != null;
    assume true;
    assert true;
    $rhs#2 := read($Heap, newNd#0, _module.INode.next);
    assert newNd#0 != null;
    assume true;
    assert true;
    $rhs#3 := read($Heap, newNd#0, _module.INode.footprint);
    assert newNd#0 != null;
    assume true;
    assert true;
    $rhs#4 := read($Heap, newNd#0, _module.INode.tailContents);
    assert newNd#0 != null;
    assume true;
    assert true;
    $rhs#5 := read($Heap, newNd#0, _module.INode.spine);
    index#0 := $rhs#0;
    oldD#0 := $rhs#1;
    oldNext#0 := $rhs#2;
    oldFp#0 := $rhs#3;
    oldTC#0 := $rhs#4;
    oldSpine#0 := $rhs#5;
    assume {:captureState "INode.dfy(334,33)"} true;
}



procedure CheckWellformed$$_module.INode.LIGuardExecBody2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (newIndex#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 14 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.LIGuardExecBody2LI(this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD0#0: ref, 
    oldNext0#0: ref, 
    oldFp0#0: Set Box, 
    oldTC0#0: Seq Box, 
    oldSpine0#0: Seq Box)
   returns (newIndex#0: int, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##mySeq#0: Seq Box;
  var ##index#0: int;
  var ##d#0: ref;
  var ##newNd#0: ref;
  var ##oldNewD#0: ref;
  var ##oldNewNext#0: ref;
  var ##oldNewFp#0: Set Box;
  var ##oldNewTC#0: Seq Box;
  var ##oldNewSpine#0: Seq Box;
  var ##oldD#0: ref;
  var ##oldNext#0: ref;
  var ##oldFp#0: Set Box;
  var ##oldTC#0: Seq Box;
  var ##oldSpine#0: Seq Box;
  var ##mySeq#1: Seq Box;
  var ##index#1: int;
  var ##d#1: ref;
  var ##newNd#1: ref;
  var ##oldNewD#1: ref;
  var ##oldNewNext#1: ref;
  var ##oldNewFp#1: Set Box;
  var ##oldNewTC#1: Seq Box;
  var ##oldNewSpine#1: Seq Box;
  var ##oldD#1: ref;
  var ##oldNext#1: ref;
  var ##oldFp#1: Set Box;
  var ##oldTC#1: Seq Box;
  var ##oldSpine#1: Seq Box;

    // AddMethodImpl: LIGuardExecBody2LI, CheckWellformed$$_module.INode.LIGuardExecBody2LI
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == $Unbox(Seq#Index(mySeq#0, index#0)): ref);
    assume {:captureState "INode.dfy(339,13): initial state"} true;
    assert true;
    ##mySeq#0 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##index#0 := index#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##index#0, TInt, $Heap);
    assert true;
    ##d#0 := d#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##d#0, Tclass._module.Data(), $Heap);
    assert true;
    ##newNd#0 := newNd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##newNd#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewD#0 := oldNewD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewD#0, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNewNext#0 := oldNewNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewNext#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewFp#0 := oldNewFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewFp#0, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldNewTC#0 := oldNewTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewTC#0, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldNewSpine#0 := oldNewSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##oldD#0 := oldD0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldD#0, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNext#0 := oldNext0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNext#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldFp#0 := oldFp0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldFp#0, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldTC#0 := oldTC0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldTC#0, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldSpine#0 := oldSpine0#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldSpine#0, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD0#0, 
  oldNext0#0, 
  oldFp0#0, 
  oldTC0#0, 
  oldSpine0#0);
    assume _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD0#0, 
  oldNext0#0, 
  oldFp0#0, 
  oldTC0#0, 
  oldSpine0#0);
    assume index#0 >= LitInt(0);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || $o == $Unbox(Seq#Index(mySeq#0, index#0)): ref);
    assume $HeapSuccGhost(old($Heap), $Heap);
    havoc newIndex#0, oldD#0, oldNext#0, oldFp#0, oldTC#0, oldSpine#0;
    assume {:captureState "INode.dfy(356,17): post-state"} true;
    assume newIndex#0 == index#0 - 1;
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume Set#Equal(oldFp#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint));
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume Seq#Equal(oldTC#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
    assert 0 <= newIndex#0 + 1 && newIndex#0 + 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref != null;
    assume Set#Equal(oldFp#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.footprint));
    assert 0 <= newIndex#0 + 1 && newIndex#0 + 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref != null;
    assume Seq#Equal(oldTC#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.tailContents));
    assert true;
    ##mySeq#1 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#1, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##index#1 := newIndex#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##index#1, TInt, $Heap);
    assert true;
    ##d#1 := d#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##d#1, Tclass._module.Data(), $Heap);
    assert true;
    ##newNd#1 := newNd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##newNd#1, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewD#1 := oldNewD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewD#1, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNewNext#1 := oldNewNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewNext#1, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewFp#1 := oldNewFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewFp#1, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldNewTC#1 := oldNewTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewTC#1, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldNewSpine#1 := oldNewSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewSpine#1, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##oldD#1 := oldD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldD#1, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNext#1 := oldNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNext#1, Tclass._module.INode(), $Heap);
    assert true;
    ##oldFp#1 := oldFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldFp#1, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldTC#1 := oldTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldTC#1, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldSpine#1 := oldSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldSpine#1, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  newIndex#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
    assume _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  newIndex#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
}



procedure InterModuleCall$$_module.INode.LIGuardExecBody2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (newIndex#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  // user-defined preconditions
  requires _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD0#0, 
  oldNext0#0, 
  oldFp0#0, 
  oldTC0#0, 
  oldSpine0#0);
  requires index#0 >= LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures newIndex#0 == index#0 - 1;
  free ensures Set#Equal(oldFp#0, 
    read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint))
   ==> true;
  ensures Set#Equal(oldFp#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint));
  ensures Seq#Equal(oldTC#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
  free ensures Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
      _module.INode.footprint))
   ==> true;
  ensures Set#Equal(oldFp#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.footprint));
  ensures Seq#Equal(oldTC#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.tailContents));
  free ensures _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  newIndex#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
  ensures _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  newIndex#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || $o == $Unbox(Seq#Index(mySeq#0, index#0)): ref);
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



procedure IntraModuleCall$$_module.INode.LIGuardExecBody2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (newIndex#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  // user-defined preconditions
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || LitInt(0 - 1) <= index#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || index#0 <= Seq#Length(mySeq#0) - 1;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || !Seq#Contains(mySeq#0, $Box(null)));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
               && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(mySeq#0, $Box(nd#0))
             ==> read($Heap, nd#0, _module.INode.footprint)[$Box(nd#0)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#0: int :: 
          true
             ==> 
            LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
             ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
               == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#1: int, j#0: int :: 
          true
             ==> 
            LitInt(0) <= i#1 && i#1 < j#0 && j#0 < Seq#Length(mySeq#0)
             ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#0)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#1)): ref)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (forall i#2: int :: 
      true
         ==> 
        LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#2
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine)));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (forall i#3: int :: 
      true
         ==> 
        LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#3 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || newNd#0 != null;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || read($Heap, newNd#0, _module.INode.data) == d#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#0: Box :: 
        (exists nd#1: ref :: 
          $Is(nd#1, Tclass._module.INode())
             && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#1))
             && $y#0 == $Box(nd#1))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || read($Heap, newNd#0, _module.INode.data) == oldNewD#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || read($Heap, newNd#0, _module.INode.next) == oldNewNext#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (forall i#4: int :: 
      true
         ==> 
        LitInt(0) <= i#4 && i#4 < index#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - index#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - index#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - index#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - index#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || Seq#Length(oldTC0#0) >= Seq#Length(mySeq#0) - index#0 - 2;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || Seq#Length(oldSpine0#0) >= Seq#Length(mySeq#0) - index#0 - 1;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC0#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC0#0, Seq#Length(mySeq#0) - index#0 - 2))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp0#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> !read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.footprint))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.spine))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, 
                        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                        _module.INode.data))), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.tailContents))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Empty(): Seq Box))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD0#0, 
      oldNext0#0, 
      oldFp0#0, 
      oldTC0#0, 
      oldSpine0#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
             != null
           ==> _module.INode.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))));
  requires index#0 >= LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures newIndex#0 == index#0 - 1;
  free ensures Set#Equal(oldFp#0, 
    read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint))
   ==> true;
  ensures Set#Equal(oldFp#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint));
  ensures Seq#Equal(oldTC#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
  free ensures Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
      _module.INode.footprint))
   ==> true;
  ensures Set#Equal(oldFp#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.footprint));
  ensures Seq#Equal(oldTC#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.tailContents));
  free ensures _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  newIndex#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
  free ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   && 
  _module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   && 
  !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= newIndex#0
   && newIndex#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#7: int :: 
    true
       ==> 
      LitInt(0) <= i#7 && i#7 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#7
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#7)): ref, _module.INode.spine)))
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#3: Box :: 
      (exists nd#3: ref :: 
        $Is(nd#3, Tclass._module.INode())
           && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#3))
           && $y#3 == $Box(nd#3))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (newIndex#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < newIndex#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#9)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#9)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - newIndex#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - newIndex#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.data))), 
        read($Heap, 
          $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
          _module.INode.tailContents))))
   && (LitInt(0) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - newIndex#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - newIndex#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - newIndex#0 - 2
   && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - newIndex#0 - 1
   && (LitInt(0 - 1) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, 
          $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
          _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - newIndex#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - newIndex#0 - 2)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
   && (newIndex#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.spine), 
      Seq#Append(Seq#Drop(mySeq#0, newIndex#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
   && (newIndex#0 < Seq#Length(mySeq#0) - 1
     ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || $o == $Unbox(Seq#Index(mySeq#0, index#0)): ref);
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



procedure Impl$$_module.INode.LIGuardExecBody2LI(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD0#0: ref
       where $Is(oldD0#0, Tclass._module.Data())
         && $IsAlloc(oldD0#0, Tclass._module.Data(), $Heap), 
    oldNext0#0: ref
       where $Is(oldNext0#0, Tclass._module.INode())
         && $IsAlloc(oldNext0#0, Tclass._module.INode(), $Heap), 
    oldFp0#0: Set Box
       where $Is(oldFp0#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp0#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC0#0: Seq Box
       where $Is(oldTC0#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC0#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine0#0: Seq Box
       where $Is(oldSpine0#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine0#0, TSeq(Tclass._module.INode()), $Heap))
   returns (newIndex#0: int, 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 14 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   && 
  _module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD0#0, 
    oldNext0#0, 
    oldFp0#0, 
    oldTC0#0, 
    oldSpine0#0)
   && 
  !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#12: int :: 
    true
       ==> 
      LitInt(0) <= i#12 && i#12 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#12
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#12)): ref, _module.INode.spine)))
   && (forall i#13: int :: 
    true
       ==> 
      LitInt(0) <= i#13 && i#13 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#13 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#13)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#5: Box :: 
      (exists nd#5: ref :: 
        $Is(nd#5, Tclass._module.INode())
           && $IsAlloc(nd#5, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#5))
           && $y#5 == $Box(nd#5))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#14: int :: 
    true
       ==> 
      LitInt(0) <= i#14 && i#14 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#14)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#14 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#14 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#14)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#14)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#14 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#14)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#14)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#14 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldTC0#0) >= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(oldSpine0#0) >= Seq#Length(mySeq#0) - index#0 - 1
   && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC0#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC0#0, Seq#Length(mySeq#0) - index#0 - 2)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp0#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
      Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref));
  requires index#0 >= LitInt(0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures newIndex#0 == index#0 - 1;
  free ensures Set#Equal(oldFp#0, 
    read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint))
   ==> true;
  ensures Set#Equal(oldFp#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint));
  ensures Seq#Equal(oldTC#0, 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents));
  free ensures Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
      _module.INode.footprint))
   ==> true;
  ensures Set#Equal(oldFp#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.footprint));
  ensures Seq#Equal(oldTC#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
    _module.INode.tailContents));
  free ensures _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  newIndex#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || LitInt(0 - 1) <= newIndex#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || newIndex#0 <= Seq#Length(mySeq#0) - 1;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || !Seq#Contains(mySeq#0, $Box(null)));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall nd#6: ref :: 
          $Is(nd#6, Tclass._module.INode())
               && $IsAlloc(nd#6, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(mySeq#0, $Box(nd#6))
             ==> read($Heap, nd#6, _module.INode.footprint)[$Box(nd#6)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#15: int :: 
          true
             ==> 
            LitInt(0) <= i#15 && i#15 < Seq#Length(mySeq#0) - 1
             ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#15)): ref, _module.INode.next)
               == $Unbox(Seq#Index(mySeq#0, i#15 + 1)): ref));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#16: int, j#3: int :: 
          true
             ==> 
            LitInt(0) <= i#16 && i#16 < j#3 && j#3 < Seq#Length(mySeq#0)
             ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#3)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#16)): ref)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#17: int :: 
      true
         ==> 
        LitInt(0) <= i#17 && i#17 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#17
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#17)): ref, _module.INode.spine)));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#18: int :: 
      true
         ==> 
        LitInt(0) <= i#18 && i#18 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#18 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#18)): ref, _module.INode.tailContents)));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || !Seq#Contains(mySeq#0, $Box(newNd#0));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || newNd#0 != null;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == d#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#6: Box :: 
        (exists nd#7: ref :: 
          $Is(nd#7, Tclass._module.INode())
             && $IsAlloc(nd#7, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#7))
             && $y#6 == $Box(nd#7))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == oldNewD#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.next) == oldNewNext#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0);
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 == Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#19: int :: 
      true
         ==> 
        LitInt(0) <= i#19 && i#19 < newIndex#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#19)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#19)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#19)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#19 + 1)): ref, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - newIndex#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - newIndex#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.data))), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
            _module.INode.tailContents))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - newIndex#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - newIndex#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - newIndex#0 - 2;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - newIndex#0 - 1;
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0 - 1) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, 
          $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
          _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - newIndex#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - newIndex#0 - 2))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0 - 1) <= newIndex#0 && newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, newIndex#0 + 1), read($Heap, newNd#0, _module.INode.spine))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)]));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 != null
               ==> read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next))])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 != null
               ==> !read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next), 
                _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)])));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next), 
                    _module.INode.footprint))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next), 
                    _module.INode.spine))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
                  _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, 
                        read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next), 
                        _module.INode.data))), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next), 
                    _module.INode.tailContents))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, 
                  _module.INode.tailContents), 
                Seq#Empty(): Seq Box))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref))))));
  ensures _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    newIndex#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      newIndex#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (newIndex#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next)
             != null
           ==> _module.INode.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, newIndex#0 + 1)): ref, _module.INode.next))));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || $o == $Unbox(Seq#Index(mySeq#0, index#0)): ref);
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



implementation Impl$$_module.INode.LIGuardExecBody2LI(this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD0#0: ref, 
    oldNext0#0: ref, 
    oldFp0#0: Set Box, 
    oldTC0#0: Seq Box, 
    oldSpine0#0: Seq Box)
   returns (newIndex#0: int, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box, 
    $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: Seq Box
   where $Is($rhs#0, TSeq(Tclass._module.Data()))
     && $IsAlloc($rhs#0, TSeq(Tclass._module.Data()), $Heap);
  var $rhs#1: Set Box
   where $Is($rhs#1, TSet(Tclass._module.INode()))
     && $IsAlloc($rhs#1, TSet(Tclass._module.INode()), $Heap);
  var $rhs#2: Seq Box
   where $Is($rhs#2, TSeq(Tclass._module.INode()))
     && $IsAlloc($rhs#2, TSeq(Tclass._module.INode()), $Heap);
  var $rhs#3: int;
  var $rhs#4: ref
   where $Is($rhs#4, Tclass._module.Data())
     && $IsAlloc($rhs#4, Tclass._module.Data(), $Heap);
  var $rhs#5: ref
   where $Is($rhs#5, Tclass._module.INode())
     && $IsAlloc($rhs#5, Tclass._module.INode(), $Heap);
  var $rhs#6: Set Box
   where $Is($rhs#6, TSet(Tclass._module.INode()))
     && $IsAlloc($rhs#6, TSet(Tclass._module.INode()), $Heap);
  var $rhs#7: Seq Box
   where $Is($rhs#7, TSeq(Tclass._module.Data()))
     && $IsAlloc($rhs#7, TSeq(Tclass._module.Data()), $Heap);
  var $rhs#8: Seq Box
   where $Is($rhs#8, TSeq(Tclass._module.INode()))
     && $IsAlloc($rhs#8, TSeq(Tclass._module.INode()), $Heap);

    // AddMethodImpl: LIGuardExecBody2LI, Impl$$_module.INode.LIGuardExecBody2LI
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == $Unbox(Seq#Index(mySeq#0, index#0)): ref);
    assume {:captureState "INode.dfy(368,0): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- INode.dfy(369,27)
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents];
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assert read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next)
   != null;
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assert read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next)
   != null;
    assume true;
    assert true;
    $rhs#0 := Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
    $Box(read($Heap, 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next), 
        _module.INode.data))), 
  read($Heap, 
    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next), 
    _module.INode.tailContents));
    $Heap := update($Heap, 
  $Unbox(Seq#Index(mySeq#0, index#0)): ref, 
  _module.INode.tailContents, 
  $rhs#0);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(369,86)"} true;
    // ----- assignment statement ----- INode.dfy(371,24)
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint];
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assert read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next)
   != null;
    assume true;
    assert true;
    $rhs#1 := Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
  read($Heap, 
    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next), 
    _module.INode.footprint));
    $Heap := update($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint, $rhs#1);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(371,70)"} true;
    // ----- assignment statement ----- INode.dfy(373,20)
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert $_Frame[$Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine];
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assert read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next)
   != null;
    assume true;
    assert true;
    $rhs#2 := Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
  read($Heap, 
    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next), 
    _module.INode.spine));
    $Heap := update($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine, $rhs#2);
    assume $IsGoodHeap($Heap);
    assume {:captureState "INode.dfy(373,62)"} true;
    // ----- update statement ----- INode.dfy(375,49)
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assert true;
    $rhs#3 := index#0 - 1;
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert true;
    $rhs#4 := read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.data);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert true;
    $rhs#5 := read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.next);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert true;
    $rhs#6 := read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert true;
    $rhs#7 := read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents);
    assert 0 <= index#0 && index#0 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, index#0)): ref != null;
    assume true;
    assert true;
    $rhs#8 := read(old($Heap), $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine);
    newIndex#0 := $rhs#3;
    oldD#0 := $rhs#4;
    oldNext#0 := $rhs#5;
    oldFp#0 := $rhs#6;
    oldTC#0 := $rhs#7;
    oldSpine#0 := $rhs#8;
    assume {:captureState "INode.dfy(378,24)"} true;
}



procedure CheckWellformed$$_module.INode.LIAndNegGuard2Post(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  free requires 0 == $ModuleContextHeight && 15 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.LIAndNegGuard2Post(this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##mySeq#0: Seq Box;
  var ##index#0: int;
  var ##d#0: ref;
  var ##newNd#0: ref;
  var ##oldNewD#0: ref;
  var ##oldNewNext#0: ref;
  var ##oldNewFp#0: Set Box;
  var ##oldNewTC#0: Seq Box;
  var ##oldNewSpine#0: Seq Box;
  var ##oldD#0: ref;
  var ##oldNext#0: ref;
  var ##oldFp#0: Set Box;
  var ##oldTC#0: Seq Box;
  var ##oldSpine#0: Seq Box;

    // AddMethodImpl: LIAndNegGuard2Post, CheckWellformed$$_module.INode.LIAndNegGuard2Post
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "INode.dfy(382,6): initial state"} true;
    assert true;
    ##mySeq#0 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##index#0 := index#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##index#0, TInt, $Heap);
    assert true;
    ##d#0 := d#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##d#0, Tclass._module.Data(), $Heap);
    assert true;
    ##newNd#0 := newNd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##newNd#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewD#0 := oldNewD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewD#0, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNewNext#0 := oldNewNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewNext#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldNewFp#0 := oldNewFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewFp#0, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldNewTC#0 := oldNewTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewTC#0, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldNewSpine#0 := oldNewSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap);
    assert true;
    ##oldD#0 := oldD#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldD#0, Tclass._module.Data(), $Heap);
    assert true;
    ##oldNext#0 := oldNext#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldNext#0, Tclass._module.INode(), $Heap);
    assert true;
    ##oldFp#0 := oldFp#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldFp#0, TSet(Tclass._module.INode()), $Heap);
    assert true;
    ##oldTC#0 := oldTC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldTC#0, TSeq(Tclass._module.Data()), $Heap);
    assert true;
    ##oldSpine#0 := oldSpine#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##oldSpine#0, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
    assume _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
    assume index#0 < 0;
    havoc $Heap;
    assume old($Heap) == $Heap;
    assume {:captureState "INode.dfy(395,30): post-state"} true;
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assert 0 <= LitInt(0) && LitInt(0) <= Seq#Length(oldTC#0);
    assert LitInt(0) <= Seq#Length(mySeq#0) - 1
   && Seq#Length(mySeq#0) - 1 <= Seq#Length(oldTC#0);
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 <= Seq#Length(oldTC#0);
    assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - 1), LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - 1)));
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assume Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assert newNd#0 != null;
    assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
  Seq#Append(mySeq#0, read($Heap, newNd#0, _module.INode.spine)));
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assume _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
    assume _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
}



procedure InterModuleCall$$_module.INode.LIAndNegGuard2Post(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  // user-defined preconditions
  requires _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  oldNewD#0, 
  oldNewNext#0, 
  oldNewFp#0, 
  oldNewTC#0, 
  oldNewSpine#0, 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
  requires index#0 < 0;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - 1), LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - 1)));
  free ensures true;
  ensures Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
  Seq#Append(mySeq#0, read($Heap, newNd#0, _module.INode.spine)));
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  ensures _module.INode.Valid($LS($LS($LZ)), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure IntraModuleCall$$_module.INode.LIAndNegGuard2Post(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap));
  // user-defined preconditions
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || LitInt(0 - 1) <= index#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || index#0 <= Seq#Length(mySeq#0) - 1;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || !Seq#Contains(mySeq#0, $Box(null)));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall nd#0: ref :: 
          $Is(nd#0, Tclass._module.INode())
               && $IsAlloc(nd#0, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(mySeq#0, $Box(nd#0))
             ==> read($Heap, nd#0, _module.INode.footprint)[$Box(nd#0)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#0: int :: 
          true
             ==> 
            LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0) - 1
             ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.next)
               == $Unbox(Seq#Index(mySeq#0, i#0 + 1)): ref));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#1: int, j#0: int :: 
          true
             ==> 
            LitInt(0) <= i#1 && i#1 < j#0 && j#0 < Seq#Length(mySeq#0)
             ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#0)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#1)): ref)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#2: int :: 
      true
         ==> 
        LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#2
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.spine)));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#3: int :: 
      true
         ==> 
        LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#3 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || newNd#0 != null;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == d#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#0: Box :: 
        (exists nd#1: ref :: 
          $Is(nd#1, Tclass._module.INode())
             && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#1))
             && $y#0 == $Box(nd#1))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == oldNewD#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.next) == oldNewNext#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0);
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#4: int :: 
      true
         ==> 
        LitInt(0) <= i#4 && i#4 < index#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - index#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - index#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - index#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - index#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1;
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)]));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> !read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)])));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.footprint))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.spine))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, 
                        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                        _module.INode.data))), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.tailContents))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Empty(): Seq Box))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
  requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      oldNewD#0, 
      oldNewNext#0, 
      oldNewFp#0, 
      oldNewTC#0, 
      oldNewSpine#0, 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
             != null
           ==> _module.INode.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))));
  requires index#0 < 0;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - 1), LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - 1)));
  free ensures true;
  ensures Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
  Seq#Append(mySeq#0, read($Heap, newNd#0, _module.INode.spine)));
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && 
  _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && 
  _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
       != null
     ==> _module.INode.Valid($LS($LZ), 
      $Heap, 
      read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure Impl$$_module.INode.LIAndNegGuard2Post(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    index#0: int, 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap), 
    oldNewD#0: ref
       where $Is(oldNewD#0, Tclass._module.Data())
         && $IsAlloc(oldNewD#0, Tclass._module.Data(), $Heap), 
    oldNewNext#0: ref
       where $Is(oldNewNext#0, Tclass._module.INode())
         && $IsAlloc(oldNewNext#0, Tclass._module.INode(), $Heap), 
    oldNewFp#0: Set Box
       where $Is(oldNewFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldNewFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldNewTC#0: Seq Box
       where $Is(oldNewTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldNewTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldNewSpine#0: Seq Box
       where $Is(oldNewSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap), 
    oldD#0: ref
       where $Is(oldD#0, Tclass._module.Data())
         && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap), 
    oldNext#0: ref
       where $Is(oldNext#0, Tclass._module.INode())
         && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap), 
    oldFp#0: Set Box
       where $Is(oldFp#0, TSet(Tclass._module.INode()))
         && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap), 
    oldTC#0: Seq Box
       where $Is(oldTC#0, TSeq(Tclass._module.Data()))
         && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap), 
    oldSpine#0: Seq Box
       where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   && 
  _module.INode.LI($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    oldNewD#0, 
    oldNewNext#0, 
    oldNewFp#0, 
    oldNewTC#0, 
    oldNewSpine#0, 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   && 
  !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
   && 
  LitInt(0 - 1) <= index#0
   && index#0 <= Seq#Length(mySeq#0) - 1
   && _module.INode.listInv($Heap, this, mySeq#0)
   && (forall i#7: int :: 
    true
       ==> 
      LitInt(0) <= i#7 && i#7 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#7
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#7)): ref, _module.INode.spine)))
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0)
       ==> Seq#Length(mySeq#0) - i#8 - 1
         <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.tailContents)))
   && 
  !Seq#Contains(mySeq#0, $Box(newNd#0))
   && newNd#0 != null
   && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && read($Heap, newNd#0, _module.INode.data) == d#0
   && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
    (lambda $y#3: Box :: 
      (exists nd#3: ref :: 
        $Is(nd#3, Tclass._module.INode())
           && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
           && Seq#Contains(mySeq#0, $Box(nd#3))
           && $y#3 == $Box(nd#3))))
   && read($Heap, newNd#0, _module.INode.data) == oldNewD#0
   && read($Heap, newNd#0, _module.INode.next) == oldNewNext#0
   && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), oldNewFp#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), oldNewTC#0)
   && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), oldNewSpine#0)
   && read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.next)
     == newNd#0
   && (index#0 == Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents)))
       && Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint)))
       && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))))
   && (forall i#9: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.data))), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.tailContents)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.footprint), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#9)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.footprint)))
         && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#9)): ref, _module.INode.spine), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#9)): ref)), 
            read($Heap, $Unbox(Seq#Index(mySeq#0, i#9 + 1)): ref, _module.INode.spine))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
              Seq#Length(mySeq#0) - index#0 - 1), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
          Seq#Length(mySeq#0) - index#0 - 1)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
   && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
              Seq#Length(mySeq#0) - index#0), 
            LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
        Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
          Seq#Length(mySeq#0) - index#0)), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
   && 
  Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
   && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
      Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
   && (index#0 < Seq#Length(mySeq#0) - 1
     ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref));
  requires index#0 < 0;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - 1), LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - 1)));
  free ensures true;
  ensures Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
  Seq#Append(mySeq#0, read($Heap, newNd#0, _module.INode.spine)));
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)]);
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next))]));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> !read($Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
            _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)]));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)), 
              read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                _module.INode.footprint)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)), 
              read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                _module.INode.spine)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                    _module.INode.data))), 
              read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                _module.INode.tailContents)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             == null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
            Seq#Empty(): Seq Box)));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             == null
           ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             == null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
         != null
       ==> _module.INode.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation Impl$$_module.INode.LIAndNegGuard2Post(this: ref, 
    mySeq#0: Seq Box, 
    index#0: int, 
    d#0: ref, 
    newNd#0: ref, 
    oldNewD#0: ref, 
    oldNewNext#0: ref, 
    oldNewFp#0: Set Box, 
    oldNewTC#0: Seq Box, 
    oldNewSpine#0: Seq Box, 
    oldD#0: ref, 
    oldNext#0: ref, 
    oldFp#0: Set Box, 
    oldTC#0: Seq Box, 
    oldSpine#0: Seq Box)
   returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: LIAndNegGuard2Post, Impl$$_module.INode.LIAndNegGuard2Post
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "INode.dfy(404,0): initial state"} true;
    $_reverifyPost := false;
}



procedure CheckWellformed$$_module.INode.updateSeq(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap));
  free requires 0 == $ModuleContextHeight && 16 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.INode.updateSeq(this: ref, mySeq#0: Seq Box, d#0: ref, newNd#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##mySeq#0: Seq Box;
  var nd#0: ref;
  var i#0: int;
  var i#2: int;
  var i#4: int;

    // AddMethodImpl: updateSeq, CheckWellformed$$_module.INode.updateSeq
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
      0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
    assume {:captureState "INode.dfy(408,13): initial state"} true;
    assume !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
    assert true;
    ##mySeq#0 := mySeq#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##mySeq#0, TSeq(Tclass._module.INode()), $Heap);
    assume _module.INode.listInv#canCall($Heap, this, mySeq#0);
    assume _module.INode.listInv($Heap, this, mySeq#0);
    assume !Seq#Contains(mySeq#0, $Box(newNd#0));
    assume newNd#0 != null;
    assert newNd#0 != null;
    assume _module.INode.Valid#canCall($Heap, newNd#0);
    assume _module.INode.Valid($LS($LZ), $Heap, newNd#0);
    assert newNd#0 != null;
    assume read($Heap, newNd#0, _module.INode.data) == d#0;
    assert newNd#0 != null;
    havoc nd#0;
    assume $Is(nd#0, Tclass._module.INode())
   && $IsAlloc(nd#0, Tclass._module.INode(), $Heap);
    // Begin Comprehension WF check
    if (Seq#Contains(mySeq#0, $Box(nd#0)))
    {
    }

    // End Comprehension WF check
    assume Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#0: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#0 == $Box(nd#1))));
    havoc i#0;
    if (*)
    {
        assume LitInt(0) <= i#0;
        assume i#0 < Seq#Length(mySeq#0);
        assert 0 <= i#0 && i#0 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#0)): ref != null;
        assume Seq#Length(mySeq#0) - i#0
   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine));
    }
    else
    {
        assume LitInt(0) <= i#0 && i#0 < Seq#Length(mySeq#0)
   ==> Seq#Length(mySeq#0) - i#0
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#0)): ref, _module.INode.spine));
    }

    assume (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
    havoc i#2;
    if (*)
    {
        assume LitInt(0) <= i#2;
        assume i#2 < Seq#Length(mySeq#0);
        assert 0 <= i#2 && i#2 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#2)): ref != null;
        assume Seq#Length(mySeq#0) - i#2 - 1
   <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents));
    }
    else
    {
        assume LitInt(0) <= i#2 && i#2 < Seq#Length(mySeq#0)
   ==> Seq#Length(mySeq#0) - i#2 - 1
     <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#2)): ref, _module.INode.tailContents));
    }

    assume (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
    havoc i#4;
    if (*)
    {
        assume LitInt(0) <= i#4;
        assume i#4 < Seq#Length(mySeq#0) - 1;
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents)));
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assume Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)));
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4)): ref != null;
        assert 0 <= i#4 && i#4 < Seq#Length(mySeq#0);
        assert 0 <= i#4 + 1 && i#4 + 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref != null;
        assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
    read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine)));
    }
    else
    {
        assume LitInt(0) <= i#4 && i#4 < Seq#Length(mySeq#0) - 1
   ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.tailContents), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
          $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.data))), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.tailContents)))
     && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.footprint), 
      Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.footprint)))
     && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#4)): ref, _module.INode.spine), 
      Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#4)): ref)), 
        read($Heap, $Unbox(Seq#Index(mySeq#0, i#4 + 1)): ref, _module.INode.spine)));
    }

    assume (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assume read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
    assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
    assert newNd#0 != null;
    if (Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint))))
    {
        assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
        assert 0 <= LitInt(0)
   && LitInt(0)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
        assert LitInt(0) <= LitInt(1)
   && LitInt(1)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
        assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
        assert 0 <= LitInt(1)
   && LitInt(1)
     <= Seq#Length(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine));
        assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
        assert newNd#0 != null;
    }

    if (Set#Equal(Set#Union(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
        $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
      read($Heap, newNd#0, _module.INode.footprint)))
   && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1)), 
          LitInt(0)), 
        Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
      Seq#Drop(read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.spine), 
        LitInt(1))), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
        $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
      read($Heap, newNd#0, _module.INode.spine))))
    {
        assert 0 <= Seq#Length(mySeq#0) - 1 && Seq#Length(mySeq#0) - 1 < Seq#Length(mySeq#0);
        assert $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref != null;
        assert newNd#0 != null;
        assert newNd#0 != null;
    }

    assume Set#Equal(Set#Union(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.footprint), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
    Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
        $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
      read($Heap, newNd#0, _module.INode.footprint)))
   && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1)), 
          LitInt(0)), 
        Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
      Seq#Drop(read($Heap, 
          $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
          _module.INode.spine), 
        LitInt(1))), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
        $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
      read($Heap, newNd#0, _module.INode.spine)))
   && Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
      read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.tailContents)), 
    Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
      read($Heap, newNd#0, _module.INode.tailContents)));
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
    assume $HeapSuccGhost(old($Heap), $Heap);
    assume {:captureState "INode.dfy(442,30): post-state"} true;
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assert 0 <= LitInt(0)
   && LitInt(0)
     <= Seq#Length(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents));
    assert LitInt(0) <= Seq#Length(mySeq#0) - 1
   && Seq#Length(mySeq#0) - 1
     <= Seq#Length(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents));
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assert 0 <= Seq#Length(mySeq#0) - 1
   && Seq#Length(mySeq#0) - 1
     <= Seq#Length(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents));
    assume Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read(old($Heap), 
            $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
            _module.INode.tailContents), 
          Seq#Length(mySeq#0) - 1), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents), 
      Seq#Length(mySeq#0) - 1)));
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assume Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(read(old($Heap), $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
    assert 0 <= LitInt(0) && LitInt(0) < Seq#Length(mySeq#0);
    assert $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref != null;
    assume _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
    assume _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
}



procedure InterModuleCall$$_module.INode.updateSeq(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap));
  // user-defined preconditions
  requires !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  requires _module.INode.listInv($Heap, this, mySeq#0);
  requires !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires newNd#0 != null;
  requires _module.INode.Valid($LS($LS($LZ)), $Heap, newNd#0);
  requires read($Heap, newNd#0, _module.INode.data) == d#0;
  requires Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#1: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#1 == $Box(nd#1))));
  requires (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
  requires (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
  requires read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
  requires Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
  requires Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
  requires Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read(old($Heap), 
            $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
            _module.INode.tailContents), 
          Seq#Length(mySeq#0) - 1), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents), 
      Seq#Length(mySeq#0) - 1)));
  free ensures true;
  ensures Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(read(old($Heap), $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  ensures _module.INode.Valid($LS($LS($LZ)), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



procedure IntraModuleCall$$_module.INode.updateSeq(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap));
  // user-defined preconditions
  requires !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || !Seq#Contains(mySeq#0, $Box(null));
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || (forall nd#2: ref :: 
      $Is(nd#2, Tclass._module.INode())
           && $IsAlloc(nd#2, Tclass._module.INode(), $Heap)
         ==> 
        Seq#Contains(mySeq#0, $Box(nd#2))
         ==> read($Heap, nd#2, _module.INode.footprint)[$Box(nd#2)]);
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || (forall i#6: int :: 
      true
         ==> 
        LitInt(0) <= i#6 && i#6 < Seq#Length(mySeq#0) - 1
         ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#6)): ref, _module.INode.next)
           == $Unbox(Seq#Index(mySeq#0, i#6 + 1)): ref);
  requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   ==> _module.INode.listInv($Heap, this, mySeq#0)
     || (forall i#7: int, j#0: int :: 
      true
         ==> 
        LitInt(0) <= i#7 && i#7 < j#0 && j#0 < Seq#Length(mySeq#0)
         ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#0)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#7)): ref)]);
  requires !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires newNd#0 != null;
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]);
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))]));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)]));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
              read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
              read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
              read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box)));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) == null
           ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (_module.INode.good#canCall($Heap, newNd#0)
       ==> _module.INode.good($Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) == null
           ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)))));
  requires _module.INode.Valid#canCall($Heap, newNd#0)
   ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     || (read($Heap, newNd#0, _module.INode.next) != null
       ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next)));
  requires read($Heap, newNd#0, _module.INode.data) == d#0;
  requires Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#2: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#2 == $Box(nd#1))));
  requires (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
  requires (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
  requires read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
  requires Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
  requires Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
  requires Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read(old($Heap), 
            $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
            _module.INode.tailContents), 
          Seq#Length(mySeq#0) - 1), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents), 
      Seq#Length(mySeq#0) - 1)));
  free ensures true;
  ensures Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(read(old($Heap), $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && 
  _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && 
  _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   && (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
       != null
     ==> _module.INode.Valid($LS($LZ), 
      $Heap, 
      read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



procedure Impl$$_module.INode.updateSeq(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.INode())
         && $IsAlloc(this, Tclass._module.INode(), $Heap), 
    mySeq#0: Seq Box
       where $Is(mySeq#0, TSeq(Tclass._module.INode()))
         && $IsAlloc(mySeq#0, TSeq(Tclass._module.INode()), $Heap), 
    d#0: ref
       where $Is(d#0, Tclass._module.Data()) && $IsAlloc(d#0, Tclass._module.Data(), $Heap), 
    newNd#0: ref
       where $Is(newNd#0, Tclass._module.INode())
         && $IsAlloc(newNd#0, Tclass._module.INode(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 16 == $FunctionContextHeight;
  // user-defined preconditions
  requires !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
  free requires _module.INode.listInv#canCall($Heap, this, mySeq#0)
   && 
  _module.INode.listInv($Heap, this, mySeq#0)
   && 
  !Seq#Contains(mySeq#0, $Box(null))
   && (forall nd#3: ref :: 
    $Is(nd#3, Tclass._module.INode())
         && $IsAlloc(nd#3, Tclass._module.INode(), $Heap)
       ==> 
      Seq#Contains(mySeq#0, $Box(nd#3))
       ==> read($Heap, nd#3, _module.INode.footprint)[$Box(nd#3)])
   && (forall i#8: int :: 
    true
       ==> 
      LitInt(0) <= i#8 && i#8 < Seq#Length(mySeq#0) - 1
       ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#8)): ref, _module.INode.next)
         == $Unbox(Seq#Index(mySeq#0, i#8 + 1)): ref)
   && (forall i#9: int, j#1: int :: 
    true
       ==> 
      LitInt(0) <= i#9 && i#9 < j#1 && j#1 < Seq#Length(mySeq#0)
       ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#9)): ref)]);
  requires !Seq#Contains(mySeq#0, $Box(newNd#0));
  requires newNd#0 != null;
  free requires _module.INode.Valid#canCall($Heap, newNd#0)
   && 
  _module.INode.Valid($LS($LZ), $Heap, newNd#0)
   && 
  _module.INode.good($Heap, newNd#0)
   && (read($Heap, newNd#0, _module.INode.next) != null
     ==> _module.INode.Valid($LS($LZ), $Heap, read($Heap, newNd#0, _module.INode.next)));
  requires read($Heap, newNd#0, _module.INode.data) == d#0;
  requires Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
  (lambda $y#3: Box :: 
    (exists nd#1: ref :: 
      $Is(nd#1, Tclass._module.INode())
         && $IsAlloc(nd#1, Tclass._module.INode(), $Heap)
         && Seq#Contains(mySeq#0, $Box(nd#1))
         && $y#3 == $Box(nd#1))));
  requires (forall i#1: int :: 
  true
     ==> 
    LitInt(0) <= i#1 && i#1 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#1)): ref, _module.INode.spine)));
  requires (forall i#3: int :: 
  true
     ==> 
    LitInt(0) <= i#3 && i#3 < Seq#Length(mySeq#0)
     ==> Seq#Length(mySeq#0) - i#3 - 1
       <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#3)): ref, _module.INode.tailContents)));
  requires (forall i#5: int :: 
  true
     ==> 
    LitInt(0) <= i#5 && i#5 < Seq#Length(mySeq#0) - 1
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.tailContents)))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.footprint), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.footprint)))
       && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#5)): ref, _module.INode.spine), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#5)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, i#5 + 1)): ref, _module.INode.spine))));
  requires read($Heap, 
    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
    _module.INode.next)
   == newNd#0;
  requires Set#Equal(Set#Union(read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
  Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.footprint)));
  requires Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.spine), 
          LitInt(1)), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
    Seq#Drop(read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.spine), 
      LitInt(1))), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
      $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
    read($Heap, newNd#0, _module.INode.spine)));
  requires Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
    read($Heap, 
      $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
      _module.INode.tailContents)), 
  Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
    read($Heap, newNd#0, _module.INode.tailContents)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
  Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read(old($Heap), 
            $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
            _module.INode.tailContents), 
          Seq#Length(mySeq#0) - 1), 
        LitInt(0)), 
      Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
    Seq#Drop(read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, 
        _module.INode.tailContents), 
      Seq#Length(mySeq#0) - 1)));
  free ensures true;
  ensures Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
  Set#Union(read(old($Heap), $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
  free ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref);
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)]);
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next))]));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> !read($Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
            _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)]));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)), 
              read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                _module.INode.footprint)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)), 
              read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                _module.INode.spine)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             != null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                    _module.INode.data))), 
              read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next), 
                _module.INode.tailContents)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             == null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.tailContents), 
            Seq#Empty(): Seq Box)));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             == null
           ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
       ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
             == null
           ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.spine), 
            Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)))));
  ensures _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
   ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref)
     || (read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)
         != null
       ==> _module.INode.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, $Unbox(Seq#Index(mySeq#0, LitInt(0))): ref, _module.INode.next)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



implementation Impl$$_module.INode.updateSeq(this: ref, mySeq#0: Seq Box, d#0: ref, newNd#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var index#0: int;
  var oldD#0: ref
   where $Is(oldD#0, Tclass._module.Data())
     && $IsAlloc(oldD#0, Tclass._module.Data(), $Heap);
  var oldNext#0: ref
   where $Is(oldNext#0, Tclass._module.INode())
     && $IsAlloc(oldNext#0, Tclass._module.INode(), $Heap);
  var oldFp#0: Set Box
   where $Is(oldFp#0, TSet(Tclass._module.INode()))
     && $IsAlloc(oldFp#0, TSet(Tclass._module.INode()), $Heap);
  var oldTC#0: Seq Box
   where $Is(oldTC#0, TSeq(Tclass._module.Data()))
     && $IsAlloc(oldTC#0, TSeq(Tclass._module.Data()), $Heap);
  var oldSpine#0: Seq Box
   where $Is(oldSpine#0, TSeq(Tclass._module.INode()))
     && $IsAlloc(oldSpine#0, TSeq(Tclass._module.INode()), $Heap);
  var $rhs##0: int;
  var $rhs##1: ref
   where $Is($rhs##1, Tclass._module.Data())
     && $IsAlloc($rhs##1, Tclass._module.Data(), $Heap);
  var $rhs##2: ref
   where $Is($rhs##2, Tclass._module.INode())
     && $IsAlloc($rhs##2, Tclass._module.INode(), $Heap);
  var $rhs##3: Set Box
   where $Is($rhs##3, TSet(Tclass._module.INode()))
     && $IsAlloc($rhs##3, TSet(Tclass._module.INode()), $Heap);
  var $rhs##4: Seq Box
   where $Is($rhs##4, TSeq(Tclass._module.Data()))
     && $IsAlloc($rhs##4, TSeq(Tclass._module.Data()), $Heap);
  var $rhs##5: Seq Box
   where $Is($rhs##5, TSeq(Tclass._module.INode()))
     && $IsAlloc($rhs##5, TSeq(Tclass._module.INode()), $Heap);
  var mySeq##0: Seq Box;
  var d##0: ref;
  var newNd##0: ref;
  var oldNewD##0: ref;
  var oldNewNext##0: ref;
  var oldNewFp##0: Set Box;
  var oldNewTC##0: Seq Box;
  var oldNewSpine##0: Seq Box;
  var oldD0##0: ref;
  var oldNext0##0: ref;
  var oldFp0##0: Set Box;
  var oldTC0##0: Seq Box;
  var oldSpine0##0: Seq Box;
  var nxtOldTC#0: Seq Box
   where $Is(nxtOldTC#0, TSeq(Tclass._module.Data()))
     && $IsAlloc(nxtOldTC#0, TSeq(Tclass._module.Data()), $Heap);
  var $PreLoopHeap$loop#0: Heap;
  var $decr_init$loop#00: int;
  var $w$loop#0: bool;
  var i#10: int;
  var ##mySeq#1: Seq Box;
  var ##index#0: int;
  var ##d#0: ref;
  var ##newNd#0: ref;
  var ##oldNewD#0: ref;
  var ##oldNewNext#0: ref;
  var ##oldNewFp#0: Set Box;
  var ##oldNewTC#0: Seq Box;
  var ##oldNewSpine#0: Seq Box;
  var ##oldD#0: ref;
  var ##oldNext#0: ref;
  var ##oldFp#0: Set Box;
  var ##oldTC#0: Seq Box;
  var ##oldSpine#0: Seq Box;
  var $decr$loop#00: int;
  var $rhs##0_0: int;
  var $rhs##0_1: ref
   where $Is($rhs##0_1, Tclass._module.Data())
     && $IsAlloc($rhs##0_1, Tclass._module.Data(), $Heap);
  var $rhs##0_2: ref
   where $Is($rhs##0_2, Tclass._module.INode())
     && $IsAlloc($rhs##0_2, Tclass._module.INode(), $Heap);
  var $rhs##0_3: Set Box
   where $Is($rhs##0_3, TSet(Tclass._module.INode()))
     && $IsAlloc($rhs##0_3, TSet(Tclass._module.INode()), $Heap);
  var $rhs##0_4: Seq Box
   where $Is($rhs##0_4, TSeq(Tclass._module.Data()))
     && $IsAlloc($rhs##0_4, TSeq(Tclass._module.Data()), $Heap);
  var $rhs##0_5: Seq Box
   where $Is($rhs##0_5, TSeq(Tclass._module.INode()))
     && $IsAlloc($rhs##0_5, TSeq(Tclass._module.INode()), $Heap);
  var mySeq##0_0: Seq Box;
  var index##0_0: int;
  var d##0_0: ref;
  var newNd##0_0: ref;
  var oldNewD##0_0: ref;
  var oldNewNext##0_0: ref;
  var oldNewFp##0_0: Set Box;
  var oldNewTC##0_0: Seq Box;
  var oldNewSpine##0_0: Seq Box;
  var oldD0##0_0: ref;
  var oldNext0##0_0: ref;
  var oldFp0##0_0: Set Box;
  var oldTC0##0_0: Seq Box;
  var oldSpine0##0_0: Seq Box;
  var mySeq##1: Seq Box;
  var index##0: int;
  var d##1: ref;
  var newNd##1: ref;
  var oldNewD##1: ref;
  var oldNewNext##1: ref;
  var oldNewFp##1: Set Box;
  var oldNewTC##1: Seq Box;
  var oldNewSpine##1: Seq Box;
  var oldD##0: ref;
  var oldNext##0: ref;
  var oldFp##0: Set Box;
  var oldTC##0: Seq Box;
  var oldSpine##0: Seq Box;

    // AddMethodImpl: updateSeq, Impl$$_module.INode.updateSeq
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> (exists $i: int :: 
      0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
    assume {:captureState "INode.dfy(450,0): initial state"} true;
    $_reverifyPost := false;
    // ----- call statement ----- INode.dfy(453,7)
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    // TrCallStmt: Adding lhs Microsoft.Dafny.AutoGhostIdentifierExpr with type int
    // TrCallStmt: Adding lhs Microsoft.Dafny.AutoGhostIdentifierExpr with type Data
    // TrCallStmt: Adding lhs Microsoft.Dafny.AutoGhostIdentifierExpr with type INode
    // TrCallStmt: Adding lhs Microsoft.Dafny.AutoGhostIdentifierExpr with type set<INode>
    // TrCallStmt: Adding lhs Microsoft.Dafny.AutoGhostIdentifierExpr with type seq<Data>
    // TrCallStmt: Adding lhs Microsoft.Dafny.AutoGhostIdentifierExpr with type seq<INode>
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    mySeq##0 := mySeq#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##0 := d#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    newNd##0 := newNd#0;
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewD##0 := read($Heap, newNd#0, _module.INode.data);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewNext##0 := read($Heap, newNd#0, _module.INode.next);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewFp##0 := read($Heap, newNd#0, _module.INode.footprint);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewTC##0 := read($Heap, newNd#0, _module.INode.tailContents);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewSpine##0 := read($Heap, newNd#0, _module.INode.spine);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldD0##0 := read($Heap, newNd#0, _module.INode.data);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNext0##0 := read($Heap, newNd#0, _module.INode.next);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldFp0##0 := read($Heap, newNd#0, _module.INode.footprint);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldTC0##0 := read($Heap, newNd#0, _module.INode.tailContents);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldSpine0##0 := read($Heap, newNd#0, _module.INode.spine);
    assert (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call $rhs##0, $rhs##1, $rhs##2, $rhs##3, $rhs##4, $rhs##5 := IntraModuleCall$$_module.INode.pre2LI(this, mySeq##0, d##0, newNd##0, oldNewD##0, oldNewNext##0, oldNewFp##0, oldNewTC##0, oldNewSpine##0, oldD0##0, oldNext0##0, oldFp0##0, oldTC0##0, oldSpine0##0);
    // TrCallStmt: After ProcessCallStmt
    // TrCallStmt: Checking bRhs $rhs##0 to have type int
    assert true;
    index#0 := $rhs##0;
    // TrCallStmt: Checking bRhs $rhs##1 to have type Data
    assert true;
    oldD#0 := $rhs##1;
    // TrCallStmt: Checking bRhs $rhs##2 to have type INode
    assert true;
    oldNext#0 := $rhs##2;
    // TrCallStmt: Checking bRhs $rhs##3 to have type set<INode>
    assert true;
    oldFp#0 := $rhs##3;
    // TrCallStmt: Checking bRhs $rhs##4 to have type seq<Data>
    assert true;
    oldTC#0 := $rhs##4;
    // TrCallStmt: Checking bRhs $rhs##5 to have type seq<INode>
    assert true;
    oldSpine#0 := $rhs##5;
    assume {:captureState "INode.dfy(455,73)"} true;
    // ----- assignment statement ----- INode.dfy(458,10)
    assume true;
    assert newNd#0 != null;
    assume true;
    assert true;
    nxtOldTC#0 := read($Heap, newNd#0, _module.INode.tailContents);
    assume {:captureState "INode.dfy(458,30)"} true;
    // ----- while statement ----- INode.dfy(460,1)
    $PreLoopHeap$loop#0 := $Heap;
    $decr_init$loop#00 := index#0 - 0;
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0
   ==> (forall i#11: int :: 
    true
       ==> (LitInt(0) <= i#11 ==> true)
         && (LitInt(0) <= i#11 && i#11 <= index#0
           ==> 
          Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
            read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents))
           ==> true));
      invariant $w$loop#0
   ==> (forall i#11: int :: 
    true
       ==> 
      LitInt(0) <= i#11 && i#11 <= index#0
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
          read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint)));
      free invariant $w$loop#0
   ==> _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0);
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box);
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || LitInt(0 - 1) <= index#0;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || index#0 <= Seq#Length(mySeq#0) - 1;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || !Seq#Contains(mySeq#0, $Box(null)));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall nd#4: ref :: 
          $Is(nd#4, Tclass._module.INode())
               && $IsAlloc(nd#4, Tclass._module.INode(), $Heap)
             ==> 
            Seq#Contains(mySeq#0, $Box(nd#4))
             ==> read($Heap, nd#4, _module.INode.footprint)[$Box(nd#4)]));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#12: int :: 
          true
             ==> 
            LitInt(0) <= i#12 && i#12 < Seq#Length(mySeq#0) - 1
             ==> read($Heap, $Unbox(Seq#Index(mySeq#0, i#12)): ref, _module.INode.next)
               == $Unbox(Seq#Index(mySeq#0, i#12 + 1)): ref));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.listInv#canCall($Heap, this, mySeq#0)
       ==> _module.INode.listInv($Heap, this, mySeq#0)
         || (forall i#13: int, j#2: int :: 
          true
             ==> 
            LitInt(0) <= i#13 && i#13 < j#2 && j#2 < Seq#Length(mySeq#0)
             ==> !read($Heap, $Unbox(Seq#Index(mySeq#0, j#2)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, i#13)): ref)]));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#14: int :: 
      true
         ==> 
        LitInt(0) <= i#14 && i#14 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#14
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#14)): ref, _module.INode.spine)));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#15: int :: 
      true
         ==> 
        LitInt(0) <= i#15 && i#15 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#15 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#15)): ref, _module.INode.tailContents)));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || !Seq#Contains(mySeq#0, $Box(newNd#0));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || newNd#0 != null;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || read($Heap, newNd#0, _module.INode.footprint)[$Box(newNd#0)]));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> read($Heap, newNd#0, _module.INode.footprint)[$Box(read($Heap, newNd#0, _module.INode.next))])));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> !read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint)[$Box(newNd#0)])));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.footprint))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0)), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.spine))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) != null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.data))), 
                  read($Heap, read($Heap, newNd#0, _module.INode.next), _module.INode.tailContents))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), Seq#Empty(): Seq Box))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (_module.INode.good#canCall($Heap, newNd#0)
           ==> _module.INode.good($Heap, newNd#0)
             || (read($Heap, newNd#0, _module.INode.next) == null
               ==> Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (_module.INode.Valid#canCall($Heap, newNd#0)
       ==> _module.INode.Valid($LS($LZ), $Heap, newNd#0)
         || (read($Heap, newNd#0, _module.INode.next) != null
           ==> _module.INode.Valid($LS($LS($LZ)), $Heap, read($Heap, newNd#0, _module.INode.next))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.data) == d#0;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#4: Box :: 
        (exists nd#5: ref :: 
          $Is(nd#5, Tclass._module.INode())
             && $IsAlloc(nd#5, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#5))
             && $y#4 == $Box(nd#5))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.data)
       == read($Heap, newNd#0, _module.INode.data);
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, newNd#0, _module.INode.next)
       == read($Heap, newNd#0, _module.INode.next);
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.footprint));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.tailContents));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
      read($Heap, newNd#0, _module.INode.spine));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
          read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.tailContents)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
          read($Heap, newNd#0, _module.INode.tailContents))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, 
            $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
            _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.footprint))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                  $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                  _module.INode.spine), 
                LitInt(1)), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.spine), 
            LitInt(1))), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
          read($Heap, newNd#0, _module.INode.spine))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (forall i#16: int :: 
      true
         ==> 
        LitInt(0) <= i#16 && i#16 < index#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#16)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#16)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.spine))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - index#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - index#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - index#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - index#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1;
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
        Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
        Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)]));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint)[$Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))])));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> !read($Heap, 
                read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                _module.INode.footprint)[$Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)])));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.footprint))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.spine))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 != null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(read($Heap, 
                        read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                        _module.INode.data))), 
                  read($Heap, 
                    read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next), 
                    _module.INode.tailContents))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
                Seq#Empty(): Seq Box))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
                Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (_module.INode.good#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
           ==> _module.INode.good($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
             || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
                 == null
               ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
                Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref))))));
      invariant $w$loop#0
   ==> 
  _module.INode.LI#canCall($Heap, 
    this, 
    mySeq#0, 
    index#0, 
    d#0, 
    newNd#0, 
    read($Heap, newNd#0, _module.INode.data), 
    read($Heap, newNd#0, _module.INode.next), 
    read($Heap, newNd#0, _module.INode.footprint), 
    read($Heap, newNd#0, _module.INode.tailContents), 
    read($Heap, newNd#0, _module.INode.spine), 
    oldD#0, 
    oldNext#0, 
    oldFp#0, 
    oldTC#0, 
    oldSpine#0)
   ==> _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     || (index#0 < Seq#Length(mySeq#0) - 1
       ==> 
      _module.INode.Valid#canCall($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref)
         || (read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next)
             != null
           ==> _module.INode.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.next))));
      free invariant $w$loop#0
   ==> _module.INode.LI#canCall($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     && 
    _module.INode.LI($Heap, 
      this, 
      mySeq#0, 
      index#0, 
      d#0, 
      newNd#0, 
      read($Heap, newNd#0, _module.INode.data), 
      read($Heap, newNd#0, _module.INode.next), 
      read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.spine), 
      oldD#0, 
      oldNext#0, 
      oldFp#0, 
      oldTC#0, 
      oldSpine#0)
     && 
    !Seq#Equal(mySeq#0, Seq#Empty(): Seq Box)
     && 
    LitInt(0 - 1) <= index#0
     && index#0 <= Seq#Length(mySeq#0) - 1
     && _module.INode.listInv($Heap, this, mySeq#0)
     && (forall i#14: int :: 
      true
         ==> 
        LitInt(0) <= i#14 && i#14 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#14
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#14)): ref, _module.INode.spine)))
     && (forall i#15: int :: 
      true
         ==> 
        LitInt(0) <= i#15 && i#15 < Seq#Length(mySeq#0)
         ==> Seq#Length(mySeq#0) - i#15 - 1
           <= Seq#Length(read($Heap, $Unbox(Seq#Index(mySeq#0, i#15)): ref, _module.INode.tailContents)))
     && 
    !Seq#Contains(mySeq#0, $Box(newNd#0))
     && newNd#0 != null
     && _module.INode.Valid($LS($LZ), $Heap, newNd#0)
     && read($Heap, newNd#0, _module.INode.data) == d#0
     && Set#Disjoint(read($Heap, newNd#0, _module.INode.footprint), 
      (lambda $y#5: Box :: 
        (exists nd#5: ref :: 
          $Is(nd#5, Tclass._module.INode())
             && $IsAlloc(nd#5, Tclass._module.INode(), $Heap)
             && Seq#Contains(mySeq#0, $Box(nd#5))
             && $y#5 == $Box(nd#5))))
     && read($Heap, newNd#0, _module.INode.data)
       == read($Heap, newNd#0, _module.INode.data)
     && read($Heap, newNd#0, _module.INode.next)
       == read($Heap, newNd#0, _module.INode.next)
     && Set#Equal(read($Heap, newNd#0, _module.INode.footprint), 
      read($Heap, newNd#0, _module.INode.footprint))
     && Seq#Equal(read($Heap, newNd#0, _module.INode.tailContents), 
      read($Heap, newNd#0, _module.INode.tailContents))
     && Seq#Equal(read($Heap, newNd#0, _module.INode.spine), 
      read($Heap, newNd#0, _module.INode.spine))
     && read($Heap, 
        $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
        _module.INode.next)
       == newNd#0
     && (index#0 == Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(d#0)), 
            read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.tailContents)), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box(read($Heap, newNd#0, _module.INode.data))), 
            read($Heap, newNd#0, _module.INode.tailContents)))
         && Set#Equal(Set#Union(read($Heap, 
              $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
              _module.INode.footprint), 
            Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
          Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
              $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
            read($Heap, newNd#0, _module.INode.footprint)))
         && Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, 
                    $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                    _module.INode.spine), 
                  LitInt(1)), 
                LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
            Seq#Drop(read($Heap, 
                $Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref, 
                _module.INode.spine), 
              LitInt(1))), 
          Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
              $Box($Unbox(Seq#Index(mySeq#0, Seq#Length(mySeq#0) - 1)): ref)), 
            read($Heap, newNd#0, _module.INode.spine))))
     && (forall i#16: int :: 
      true
         ==> 
        LitInt(0) <= i#16 && i#16 < index#0
         ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16)): ref, _module.INode.tailContents), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
                $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.data))), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.tailContents)))
           && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16)): ref, _module.INode.footprint), 
            Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, i#16)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.footprint)))
           && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#16)): ref, _module.INode.spine), 
            Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, i#16)): ref)), 
              read($Heap, $Unbox(Seq#Index(mySeq#0, i#16 + 1)): ref, _module.INode.spine))))
     && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
                Seq#Length(mySeq#0) - index#0 - 1), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.tailContents), 
            Seq#Length(mySeq#0) - index#0 - 1)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, 
            $Box(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.data))), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents))))
     && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Set#Equal(Set#Union(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.footprint), 
          Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))), 
        Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint))))
     && (LitInt(0) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(Seq#Append(Seq#Append(Seq#Drop(Seq#Take(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
                Seq#Length(mySeq#0) - index#0), 
              LitInt(0)), 
            Seq#Build(Seq#Empty(): Seq Box, $Box(newNd#0))), 
          Seq#Drop(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0)): ref, _module.INode.spine), 
            Seq#Length(mySeq#0) - index#0)), 
        Seq#Append(Seq#Build(Seq#Empty(): Seq Box, $Box($Unbox(Seq#Index(mySeq#0, index#0)): ref)), 
          read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine))))
     && 
    Seq#Length(oldTC#0) >= Seq#Length(mySeq#0) - index#0 - 2
     && Seq#Length(oldSpine#0) >= Seq#Length(mySeq#0) - index#0 - 1
     && (LitInt(0 - 1) <= index#0 && index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
          Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
              Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
            Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)))
         && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
          Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0)))))
     && (index#0 < Seq#Length(mySeq#0) - 1
       ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.spine), 
        Seq#Append(Seq#Drop(mySeq#0, index#0 + 1), read($Heap, newNd#0, _module.INode.spine))))
     && (index#0 < Seq#Length(mySeq#0) - 1
       ==> _module.INode.Valid($LS($LZ), $Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref));
      free invariant $w$loop#0
   ==> 
  index#0 < Seq#Length(mySeq#0) - 1
   ==> 
  Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.footprint))
   ==> true;
      invariant $w$loop#0
   ==> 
  index#0 < Seq#Length(mySeq#0) - 1
   ==> Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.footprint));
      invariant $w$loop#0
   ==> 
  index#0 < Seq#Length(mySeq#0) - 1
   ==> Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
    Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
      free invariant $w$loop#0
   ==> 
  index#0 < Seq#Length(mySeq#0) - 1
   ==> 
  Seq#Equal(oldTC#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.tailContents))
   ==> true;
      invariant $w$loop#0
   ==> 
  index#0 < Seq#Length(mySeq#0) - 1
   ==> Seq#Equal(oldTC#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.tailContents));
      invariant $w$loop#0
   ==> 
  index#0 < Seq#Length(mySeq#0) - 1
   ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
    Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
        Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
      Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)));
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null
     ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f)
       || (exists $i: int :: 
        0 <= $i && $i < Seq#Length(mySeq#0) && Seq#Index(mySeq#0, $i) == $Box($o)));
      free invariant $HeapSuccGhost($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read($PreLoopHeap$loop#0, $o, alloc)
     ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant index#0 - 0 <= $decr_init$loop#00
   && (index#0 - 0 == $decr_init$loop#00 ==> true);
    {
        assume {:captureState "INode.dfy(460,0): after some loop iterations"} true;
        if (!$w$loop#0)
        {
            havoc i#10;
            // Begin Comprehension WF check
            if (LitInt(0) <= i#10)
            {
            }

            if (LitInt(0) <= i#10 && i#10 <= index#0)
            {
                assert {:subsumption 0} 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                assert {:subsumption 0} 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                if (Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.tailContents), 
  read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#10)): ref, _module.INode.tailContents)))
                {
                    assert {:subsumption 0} 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                    assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                    assert {:subsumption 0} 0 <= i#10 && i#10 < Seq#Length(mySeq#0);
                    assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, i#10)): ref != null;
                }
            }

            // End Comprehension WF check
            assume (forall i#11: int :: 
  true
     ==> (LitInt(0) <= i#11 ==> true)
       && (LitInt(0) <= i#11 && i#11 <= index#0
         ==> 
        Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents))
         ==> true));
            assume (forall i#11: int :: 
  true
     ==> 
    LitInt(0) <= i#11 && i#11 <= index#0
     ==> Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
        read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents))
       && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint), 
        read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.footprint)));
            assert {:subsumption 0} newNd#0 != null;
            assert {:subsumption 0} newNd#0 != null;
            assert {:subsumption 0} newNd#0 != null;
            assert {:subsumption 0} newNd#0 != null;
            assert {:subsumption 0} newNd#0 != null;
            assert true;
            ##mySeq#1 := mySeq#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##mySeq#1, TSeq(Tclass._module.INode()), $Heap);
            assert true;
            ##index#0 := index#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##index#0, TInt, $Heap);
            assert true;
            ##d#0 := d#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##d#0, Tclass._module.Data(), $Heap);
            assert true;
            ##newNd#0 := newNd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##newNd#0, Tclass._module.INode(), $Heap);
            assert true;
            ##oldNewD#0 := read($Heap, newNd#0, _module.INode.data);
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldNewD#0, Tclass._module.Data(), $Heap);
            assert true;
            ##oldNewNext#0 := read($Heap, newNd#0, _module.INode.next);
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldNewNext#0, Tclass._module.INode(), $Heap);
            assert true;
            ##oldNewFp#0 := read($Heap, newNd#0, _module.INode.footprint);
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldNewFp#0, TSet(Tclass._module.INode()), $Heap);
            assert true;
            ##oldNewTC#0 := read($Heap, newNd#0, _module.INode.tailContents);
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldNewTC#0, TSeq(Tclass._module.Data()), $Heap);
            assert true;
            ##oldNewSpine#0 := read($Heap, newNd#0, _module.INode.spine);
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldNewSpine#0, TSeq(Tclass._module.INode()), $Heap);
            assert true;
            ##oldD#0 := oldD#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldD#0, Tclass._module.Data(), $Heap);
            assert true;
            ##oldNext#0 := oldNext#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldNext#0, Tclass._module.INode(), $Heap);
            assert true;
            ##oldFp#0 := oldFp#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldFp#0, TSet(Tclass._module.INode()), $Heap);
            assert true;
            ##oldTC#0 := oldTC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldTC#0, TSeq(Tclass._module.Data()), $Heap);
            assert true;
            ##oldSpine#0 := oldSpine#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##oldSpine#0, TSeq(Tclass._module.INode()), $Heap);
            assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  read($Heap, newNd#0, _module.INode.data), 
  read($Heap, newNd#0, _module.INode.next), 
  read($Heap, newNd#0, _module.INode.footprint), 
  read($Heap, newNd#0, _module.INode.tailContents), 
  read($Heap, newNd#0, _module.INode.spine), 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
            assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  read($Heap, newNd#0, _module.INode.data), 
  read($Heap, newNd#0, _module.INode.next), 
  read($Heap, newNd#0, _module.INode.footprint), 
  read($Heap, newNd#0, _module.INode.tailContents), 
  read($Heap, newNd#0, _module.INode.spine), 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
            assume _module.INode.LI($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  read($Heap, newNd#0, _module.INode.data), 
  read($Heap, newNd#0, _module.INode.next), 
  read($Heap, newNd#0, _module.INode.footprint), 
  read($Heap, newNd#0, _module.INode.tailContents), 
  read($Heap, newNd#0, _module.INode.spine), 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
            if (index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert {:subsumption 0} 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                if (Set#Equal(oldFp#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
    _module.INode.footprint)))
                {
                    assert {:subsumption 0} 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                    assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                }
            }

            assume index#0 < Seq#Length(mySeq#0) - 1
   ==> 
  Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.footprint))
   ==> true;
            assume index#0 < Seq#Length(mySeq#0) - 1
   ==> Set#Equal(oldFp#0, 
      read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
        _module.INode.footprint))
     && Set#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.footprint), 
      Set#Union(oldFp#0, Set#UnionOne(Set#Empty(): Set Box, $Box(newNd#0))));
            if (index#0 < Seq#Length(mySeq#0) - 1)
            {
                assert {:subsumption 0} 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                if (Seq#Equal(oldTC#0, 
  read(old($Heap), 
    $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
    _module.INode.tailContents)))
                {
                    assert {:subsumption 0} 0 <= index#0 + 1 && index#0 + 1 < Seq#Length(mySeq#0);
                    assert {:subsumption 0} $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref != null;
                    assert {:subsumption 0} 0 <= LitInt(0) && LitInt(0) <= Seq#Length(oldTC#0);
                    assert {:subsumption 0} LitInt(0) <= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(mySeq#0) - index#0 - 2 <= Seq#Length(oldTC#0);
                    assert {:subsumption 0} 0 <= Seq#Length(mySeq#0) - index#0 - 2
   && Seq#Length(mySeq#0) - index#0 - 2 <= Seq#Length(oldTC#0);
                }
            }

            assume index#0 < Seq#Length(mySeq#0) - 1
   ==> 
  Seq#Equal(oldTC#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.tailContents))
   ==> true;
            assume index#0 < Seq#Length(mySeq#0) - 1
   ==> Seq#Equal(oldTC#0, 
      read(old($Heap), 
        $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
        _module.INode.tailContents))
     && Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, _module.INode.tailContents), 
      Seq#Append(Seq#Append(Seq#Drop(Seq#Take(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2), LitInt(0)), 
          Seq#Build(Seq#Empty(): Seq Box, $Box(d#0))), 
        Seq#Drop(oldTC#0, Seq#Length(mySeq#0) - index#0 - 2)));
            assume true;
            assume false;
        }

        assume true;
        if (LitInt(0) > index#0)
        {
            break;
        }

        $decr$loop#00 := index#0 - 0;
        // ----- call statement ----- INode.dfy(486,19)
        assume true;
        assume true;
        assume true;
        assume true;
        assume true;
        assume true;
        // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type int
        // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type Data
        // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type INode
        // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type set<INode>
        // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type seq<Data>
        // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type seq<INode>
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        mySeq##0_0 := mySeq#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        index##0_0 := index#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        d##0_0 := d#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        newNd##0_0 := newNd#0;
        assert newNd#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldNewD##0_0 := read($Heap, newNd#0, _module.INode.data);
        assert newNd#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldNewNext##0_0 := read($Heap, newNd#0, _module.INode.next);
        assert newNd#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldNewFp##0_0 := read($Heap, newNd#0, _module.INode.footprint);
        assert newNd#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldNewTC##0_0 := read($Heap, newNd#0, _module.INode.tailContents);
        assert newNd#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldNewSpine##0_0 := read($Heap, newNd#0, _module.INode.spine);
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldD0##0_0 := oldD#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldNext0##0_0 := oldNext#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldFp0##0_0 := oldFp#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldTC0##0_0 := oldTC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        oldSpine0##0_0 := oldSpine#0;
        assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && $o == $Unbox(Seq#Index(mySeq##0_0, index##0_0)): ref
     ==> $_Frame[$o, $f]);
        // ProcessCallStmt: Make the call
        call $rhs##0_0, $rhs##0_1, $rhs##0_2, $rhs##0_3, $rhs##0_4, $rhs##0_5 := IntraModuleCall$$_module.INode.LIGuardExecBody2LI(this, mySeq##0_0, index##0_0, d##0_0, newNd##0_0, oldNewD##0_0, oldNewNext##0_0, oldNewFp##0_0, oldNewTC##0_0, oldNewSpine##0_0, oldD0##0_0, oldNext0##0_0, oldFp0##0_0, oldTC0##0_0, oldSpine0##0_0);
        // TrCallStmt: After ProcessCallStmt
        // TrCallStmt: Checking bRhs $rhs##0_0 to have type int
        assert true;
        index#0 := $rhs##0_0;
        // TrCallStmt: Checking bRhs $rhs##0_1 to have type Data
        assert true;
        oldD#0 := $rhs##0_1;
        // TrCallStmt: Checking bRhs $rhs##0_2 to have type INode
        assert true;
        oldNext#0 := $rhs##0_2;
        // TrCallStmt: Checking bRhs $rhs##0_3 to have type set<INode>
        assert true;
        oldFp#0 := $rhs##0_3;
        // TrCallStmt: Checking bRhs $rhs##0_4 to have type seq<Data>
        assert true;
        oldTC#0 := $rhs##0_4;
        // TrCallStmt: Checking bRhs $rhs##0_5 to have type seq<INode>
        assert true;
        oldSpine#0 := $rhs##0_5;
        assume {:captureState "INode.dfy(490,19)"} true;
        // ----- loop termination check ----- INode.dfy(460,1)
        assert 0 <= $decr$loop#00 || index#0 - 0 == $decr$loop#00;
        assert index#0 - 0 < $decr$loop#00;
        assume (forall i#11: int :: 
  true
     ==> (LitInt(0) <= i#11 ==> true)
       && (LitInt(0) <= i#11 && i#11 <= index#0
         ==> 
        Seq#Equal(read($Heap, $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents), 
          read(old($Heap), $Unbox(Seq#Index(mySeq#0, i#11)): ref, _module.INode.tailContents))
         ==> true));
        assume _module.INode.LI#canCall($Heap, 
  this, 
  mySeq#0, 
  index#0, 
  d#0, 
  newNd#0, 
  read($Heap, newNd#0, _module.INode.data), 
  read($Heap, newNd#0, _module.INode.next), 
  read($Heap, newNd#0, _module.INode.footprint), 
  read($Heap, newNd#0, _module.INode.tailContents), 
  read($Heap, newNd#0, _module.INode.spine), 
  oldD#0, 
  oldNext#0, 
  oldFp#0, 
  oldTC#0, 
  oldSpine#0);
        assume index#0 < Seq#Length(mySeq#0) - 1
   ==> 
  Set#Equal(oldFp#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.footprint))
   ==> true;
        assume index#0 < Seq#Length(mySeq#0) - 1
   ==> 
  Seq#Equal(oldTC#0, 
    read(old($Heap), 
      $Unbox(Seq#Index(mySeq#0, index#0 + 1)): ref, 
      _module.INode.tailContents))
   ==> true;
    }

    // ----- call statement ----- INode.dfy(494,19)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    mySeq##1 := mySeq#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    index##0 := index#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##1 := d#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    newNd##1 := newNd#0;
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewD##1 := read($Heap, newNd#0, _module.INode.data);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewNext##1 := read($Heap, newNd#0, _module.INode.next);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewFp##1 := read($Heap, newNd#0, _module.INode.footprint);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewTC##1 := read($Heap, newNd#0, _module.INode.tailContents);
    assert newNd#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNewSpine##1 := read($Heap, newNd#0, _module.INode.spine);
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldD##0 := oldD#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldNext##0 := oldNext#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldFp##0 := oldFp#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldTC##0 := oldTC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    oldSpine##0 := oldSpine#0;
    assert (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.INode.LIAndNegGuard2Post(this, mySeq##1, index##0, d##1, newNd##1, oldNewD##1, oldNewNext##1, oldNewFp##1, oldNewTC##1, oldNewSpine##1, oldD##0, oldNext##0, oldFp##0, oldTC##0, oldSpine##0);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "INode.dfy(497,40)"} true;
}



const unique class._module.__default: ClassName;

function Tclass._module.__default() : Ty;

// Tclass._module.__default Tag
axiom Tag(Tclass._module.__default()) == Tagclass._module.__default;

const unique Tagclass._module.__default: TyTag;

// Box/unbox axiom for Tclass._module.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.__default()) } 
  $IsBox(bx, Tclass._module.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.__default()) } 
  $Is($o, Tclass._module.__default())
     <==> $o == null || dtype($o) == Tclass._module.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.__default(), $h) } 
  $IsAlloc($o, Tclass._module.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

const unique field$tailContents: NameFamily;

const unique field$spine: NameFamily;

const unique field$footprint: NameFamily;

const unique field$data: NameFamily;

const unique field$next: NameFamily;
