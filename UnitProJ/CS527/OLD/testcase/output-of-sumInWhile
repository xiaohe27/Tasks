
Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interruptImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interrupt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "joinImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "join")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "startImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "start")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Runnable")()),, #token("Id", "runnable")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayImpl")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getName")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "name")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "nextLine")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "nextInt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.System")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.io.PrintWriter")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$.sum")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('package(),, 'staticCT()),, 'None(),, 'Int(),, #token("Id", "sum_iterative")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "n")()),, '.List{"'FormalParamList"}()),, 'None())

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "main")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'arrayOf_('class_(#token("Id", "java.lang.String")())),, #token("Id", "args")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "aaa")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "ggg")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "fff")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "ddd")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "zz")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.String")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "compareTo")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "another")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "anObject")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "valueOf")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "i")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Char(),, #token("Id", "charAt")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "index")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "length")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Object")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Protected(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notifyAll")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notify")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "wait")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "hashCode")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Class")()),, #token("Id", "getClass")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "obj")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interruptImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interrupt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "joinImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "join")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "startImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "start")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Runnable")()),, #token("Id", "runnable")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayImpl")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getName")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "name")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "nextLine")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "nextInt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.System")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.io.PrintWriter")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$.sum")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('package(),, 'staticCT()),, 'None(),, 'Int(),, #token("Id", "sum_iterative")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "n")()),, '.List{"'FormalParamList"}()),, 'None())

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "main")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'arrayOf_('class_(#token("Id", "java.lang.String")())),, #token("Id", "args")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "aaa")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "ggg")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "fff")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "ddd")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "zz")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.String")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "compareTo")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "another")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "anObject")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "valueOf")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "i")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Char(),, #token("Id", "charAt")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "index")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "length")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Object")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Protected(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notifyAll")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notify")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "wait")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "hashCode")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Class")()),, #token("Id", "getClass")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "obj")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interruptImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interrupt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "joinImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "join")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "startImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "start")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Runnable")()),, #token("Id", "runnable")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayImpl")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getName")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "name")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "nextLine")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "nextInt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.System")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.io.PrintWriter")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$.sum")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('package(),, 'staticCT()),, 'None(),, 'Int(),, #token("Id", "sum_iterative")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "n")()),, '.List{"'FormalParamList"}()),, 'None())

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "main")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'arrayOf_('class_(#token("Id", "java.lang.String")())),, #token("Id", "args")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "aaa")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "ggg")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "fff")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "ddd")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "zz")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.String")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "compareTo")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "another")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "anObject")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "valueOf")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "i")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Char(),, #token("Id", "charAt")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "index")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "length")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Object")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Protected(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notifyAll")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notify")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "wait")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "hashCode")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Class")()),, #token("Id", "getClass")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "obj")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ExceptionInInitializerError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Exception")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Exception")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interruptImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "interrupt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "joinImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "join")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "startImpl")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "tid")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "start")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "run")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Runnable")()),, #token("Id", "runnable")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Thread")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ClassCastException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NegativeArraySizeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.NullPointerException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.InterruptedException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayStoreException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayImpl")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getName")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Class")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "name")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "nextLine")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "nextInt")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.util.Scanner")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.System")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArithmeticException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.AssertionError")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.io.PrintWriter")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "println")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "o")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Boolean(),, #token("Id", "b")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Double(),, #token("Id", "d")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Long(),, #token("Id", "l")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "print")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.IllegalMonitorStateException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$.sum")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('package(),, 'staticCT()),, 'None(),, 'Int(),, #token("Id", "sum_iterative")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "n")()),, '.List{"'FormalParamList"}()),, 'None())

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "main")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'arrayOf_('class_(#token("Id", "java.lang.String")())),, #token("Id", "args")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "aaa")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "ggg")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "fff")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "ddd")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'Void(),, #token("Id", "zz")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.String")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "compareTo")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "another")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "anObject")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'staticCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "valueOf")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "i")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Char(),, #token("Id", "charAt")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'Int(),, #token("Id", "index")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "length")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.Object")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Protected(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "clone")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notifyAll")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "notify")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "wait")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Int(),, #token("Id", "hashCode")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.Class")()),, #token("Id", "getClass")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "toString")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Boolean(),, #token("Id", "equals")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.Object")()),, #token("Id", "obj")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "getMessage")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}())),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.RuntimeException")()),, #token("Id", "cause")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "message")()),, '.List{"'FormalParamList"}()),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.RuntimeException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Private(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$instance_init")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, '.List{"'FormalParamList"}(),, 'None())

Method:: 'MethodDecHead('accCT('Public(),, 'instanceCT()),, 'None(),, 'Void(),, #token("Id", "$cons$java.lang.ArrayIndexOutOfBoundsException")(),, 'FormalParamList('Param('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, #token("Id", "s")()),, '.List{"'FormalParamList"}()),, 'None())

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "s")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "s")())),, 'cast('Int(),, 'ExprName(#token("Id", "n")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "n")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "n")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe too!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))

WhileLoop:: 'While('cast('Boolean(),, 'Gt('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "0")(),, 'Int()))),, 'Block('BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "r")()),, 'cast('Int(),, 'Plus('cast('Int(),, 'ExprName(#token("Id", "r")())),, 'cast('Int(),, 'ExprName(#token("Id", "x")()))))))),, 'BlockStmList('ExprStm('cast('Int(),, 'Assign('ExprName(#token("Id", "x")()),, 'cast('Int(),, 'Minus('cast('Int(),, 'ExprName(#token("Id", "x")())),, '_::_(#token("#Int", "1")(),, 'Int())))))),, 'BlockStmList('BlockStmList('LocalVarDecStm('LocalVarDec('.List{"'AnnoVarModList"}(),, 'class_(#token("Id", "java.lang.String")()),, 'VarDecList('VarDec(#token("Id", "debug")()),, '.List{"'VarDecList"}()))),, 'BlockStmList('ExprStm('cast('class_(#token("Id", "java.lang.String")()),, 'Assign('ExprName(#token("Id", "debug")()),, '_::_(#token("#String", "\"findMe 3!\"")(),, 'class_(#token("Id", "java.lang.String")()))))),, '.List{"'BlockStmList"}())),, '.List{"'BlockStmList"}())))))
<T>
    <threads>
        <thread>
            <k>
                class .sumInWhile . methodInfo ( sig ( main , types ( 
                  arrayOf class java.lang.String ) ) , class .sumInWhile , 
                  dummyCMT , dummyRT , dummyCT , dummyAC ) ( arrayRef ( 
                  arrayOf class java.lang.String , 0 , 0 ) :: arrayOf class 
                  java.lang.String ) ~> (HOLE ;)
            </k>
            <stack>
                .List
            </stack>
            <methodContext>
                <env>
                    .Map
                </env>
                <crntClass>
                    noClass
                </crntClass>
                <location>
                    .K
                </location>
            </methodContext>
            <tid>
                0
            </tid>
            <holds>
                .Map
            </holds>
            <interrupted>
                false
            </interrupted>
        </thread>
    </threads>
    <NumOfClassesToUnfold>
        0
    </NumOfClassesToUnfold>
    <classes>
        <class>
            <classType>
                class .sum
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$.sum , types ( .::KList ) ) |-> class .sum
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $instance_init , types ( .::KList ) ) |-> class .sum
                sig ( aaa , types ( .::KList ) ) |-> class .sum
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( ddd , types ( .::KList ) ) |-> class .sum
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( fff , types ( .::KList ) ) |-> class .sum
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( ggg , types ( .::KList ) ) |-> class .sum
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( main , types ( arrayOf class java.lang.String ) ) |-> 
                  class .sum
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( sum_iterative , types ( int ) ) |-> class .sum
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                sig ( zz , types ( .::KList ) ) |-> class .sum
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$.sum , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class .sum , (
                          class .sum) . this )) . $instance_init ( 
                          .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( aaa , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( int , 0 :: int )) ; }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( ddd , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( class java.lang.String , "" :: 
                          class java.lang.String )) ; }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( fff , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( int , 0 :: int )) ; }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( ggg , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( int , 0 :: int )) ; }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( main , types ( arrayOf class 
                          java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList arrayOf class java.lang.String 
                          args, .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.lang.System) . 
                          out )) . println ( cast ( class java.lang.Object ,
                           cast ( class java.lang.String , "Sum to 5:" :: 
                          class java.lang.String + cast ( int , (class .sum)
                           . sum_iterative ( cast ( int , 5 :: int ) ) ) ) )
                           ) ) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        staticCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( sum_iterative , types ( int ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList int n, .Params
                    </methodParams>
                    <methodBody>
                        { .AnnoVarModList int s ; cast ( int , s = 0 :: 
                          int ) ; while ( cast ( bool , cast ( int , n ) > 0
                           :: int ) ) { cast ( int , s = cast ( int , cast (
                           int , s ) + cast ( int , n ) ) ) ; cast ( int , n
                           = cast ( int , cast ( int , n ) - 1 :: int ) ) ; 
                          (.AnnoVarModList class java.lang.String debug ; 
                          cast ( class java.lang.String , debug = "findMe!" 
                          :: class java.lang.String ) ;) .BlockStmList } (
                          .AnnoVarModList int x ; cast ( int , x = 3 :: int 
                          ) ;) (.AnnoVarModList int r ; cast ( int , r = 0 
                          :: int ) ;) while ( cast ( bool , cast ( int , x )
                           > 0 :: int ) ) { cast ( int , r = cast ( int , 
                          cast ( int , r ) + cast ( int , x ) ) ) ; cast ( 
                          int , x = cast ( int , cast ( int , x ) - 1 :: int
                           ) ) ; (.AnnoVarModList class java.lang.String 
                          debug ; cast ( class java.lang.String , debug = 
                          "findMe too!" :: class java.lang.String ) ;) 
                          .BlockStmList } cast ( int , x = 3 :: int ) ; cast
                           ( int , r = 0 :: int ) ; while ( cast ( bool , 
                          cast ( int , x ) > 0 :: int ) ) { cast ( int , r =
                           cast ( int , cast ( int , r ) + cast ( int , x ) 
                          ) ) ; cast ( int , x = cast ( int , cast ( int , x
                           ) - 1 :: int ) ) ; (.AnnoVarModList class 
                          java.lang.String debug ; cast ( class 
                          java.lang.String , debug = "findMe 3!" :: class 
                          java.lang.String ) ;) .BlockStmList } return (cast
                           ( int , cast ( int , s ) )) ; }
                    </methodBody>
                    <methodAccessMode>
                        package
                    </methodAccessMode>
                    <methodContextType>
                        staticCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( zz , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        staticCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.io.PrintWriter
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.io.PrintWriter , types ( .::KList ) ) 
                  |-> class java.io.PrintWriter
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.io.PrintWriter
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( print , types ( bool ) ) |-> class java.io.PrintWriter
                sig ( print , types ( double ) ) |-> class 
                  java.io.PrintWriter
                sig ( print , types ( long ) ) |-> class java.io.PrintWriter
                sig ( print , types ( class java.lang.Object ) ) |-> class 
                  java.io.PrintWriter
                sig ( print , types ( class java.lang.String ) ) |-> class 
                  java.io.PrintWriter
                sig ( println , types ( .::KList ) ) |-> class 
                  java.io.PrintWriter
                sig ( println , types ( bool ) ) |-> class 
                  java.io.PrintWriter
                sig ( println , types ( double ) ) |-> class 
                  java.io.PrintWriter
                sig ( println , types ( long ) ) |-> class 
                  java.io.PrintWriter
                sig ( println , types ( class java.lang.Object ) ) |-> class
                   java.io.PrintWriter
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.io.PrintWriter , types ( 
                          .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.io.PrintWriter) 
                          . this )) . $instance_init ( .TypedVals ) ) ; } ]
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( print , types ( bool ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList bool b, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( print , types ( double ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList double d, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( print , types ( long ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList long l, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( print , types ( class java.lang.Object ) )
                          
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object o, 
                          .Params
                    </methodParams>
                    <methodBody>
                        { if ( cast ( bool , cast ( class 
                          java.lang.Object , o ) == null :: nullType ) ) { 
                          cast ( void , (cast ( class java.io.PrintWriter , 
                          (class java.io.PrintWriter) . this )) . print ( 
                          cast ( class java.lang.String , "null" :: class 
                          java.lang.String ) ) ) ; } else { cast ( void , (
                          cast ( class java.io.PrintWriter , (class 
                          java.io.PrintWriter) . this )) . print ( cast ( 
                          class java.lang.String , cast ( class 
                          java.lang.String , (cast ( class java.lang.Object 
                          , o )) . toString ( .TypedVals ) ) ) ) ) ; } }
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( print , types ( class java.lang.String ) )
                          
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( println , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.io.PrintWriter) 
                          . this )) . print ( cast ( class java.lang.String 
                          , "\n" :: class java.lang.String ) ) ) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( println , types ( bool ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList bool b, .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.io.PrintWriter) 
                          . this )) . print ( cast ( class java.lang.String 
                          , cast ( class java.lang.String , cast ( bool , b 
                          ) + "\n" :: class java.lang.String ) ) ) ) ; }
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( println , types ( double ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList double d, .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.io.PrintWriter) 
                          . this )) . print ( cast ( class java.lang.String 
                          , cast ( class java.lang.String , cast ( double , 
                          d ) + "\n" :: class java.lang.String ) ) ) ) ; }
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( println , types ( long ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList long l, .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.io.PrintWriter) 
                          . this )) . print ( cast ( class java.lang.String 
                          , cast ( class java.lang.String , cast ( long , l 
                          ) + "\n" :: class java.lang.String ) ) ) ) ; }
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( println , types ( class java.lang.Object )
                           )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object o, 
                          .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class 
                          java.io.PrintWriter , (class java.io.PrintWriter) 
                          . this )) . print ( cast ( class java.lang.String 
                          , cast ( class java.lang.String , cast ( class 
                          java.lang.Object , o ) + "\n" :: class 
                          java.lang.String ) ) ) ) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.ArithmeticException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.ArithmeticException , types ( 
                  .::KList ) ) |-> class java.lang.ArithmeticException
                sig ( $cons$java.lang.ArithmeticException , types ( class 
                  java.lang.String ) ) |-> class 
                  java.lang.ArithmeticException
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) |-> 
                  class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.ArithmeticException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ArithmeticException , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.ArithmeticException , (class 
                          java.lang.ArithmeticException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ArithmeticException , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class java.lang.ArithmeticException , (
                          class java.lang.ArithmeticException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.ArrayImpl
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.ArrayImpl , types ( .::KList ) ) 
                  |-> class java.lang.ArrayImpl
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.ArrayImpl
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.ArrayImpl
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ArrayImpl , types ( 
                          .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.ArrayImpl , (class java.lang.ArrayImpl) 
                          . this )) . $instance_init ( .TypedVals ) ) ; } ]
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( clone , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.ArrayIndexOutOfBoundsException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.ArrayIndexOutOfBoundsException , 
                  types ( .::KList ) ) |-> class 
                  java.lang.ArrayIndexOutOfBoundsException
                sig ( $cons$java.lang.ArrayIndexOutOfBoundsException , types
                   ( class java.lang.String ) ) |-> class 
                  java.lang.ArrayIndexOutOfBoundsException
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) |-> 
                  class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.ArrayIndexOutOfBoundsException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.ArrayIndexOutOfBoundsException , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.ArrayIndexOutOfBoundsException , (class 
                          java.lang.ArrayIndexOutOfBoundsException) . this )
                          ) . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.ArrayIndexOutOfBoundsException , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class 
                          java.lang.ArrayIndexOutOfBoundsException , (class 
                          java.lang.ArrayIndexOutOfBoundsException) . this )
                          ) . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.ArrayStoreException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.ArrayStoreException , types ( 
                  .::KList ) ) |-> class java.lang.ArrayStoreException
                sig ( $cons$java.lang.ArrayStoreException , types ( class 
                  java.lang.String ) ) |-> class 
                  java.lang.ArrayStoreException
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) |-> 
                  class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.ArrayStoreException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ArrayStoreException , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.ArrayStoreException , (class 
                          java.lang.ArrayStoreException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ArrayStoreException , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class java.lang.ArrayStoreException , (
                          class java.lang.ArrayStoreException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.AssertionError
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.AssertionError , types ( .::KList 
                  ) ) |-> class java.lang.AssertionError
                sig ( $cons$java.lang.AssertionError , types ( class 
                  java.lang.String ) ) |-> class java.lang.AssertionError
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) |-> 
                  class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.AssertionError
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.AssertionError , types ( 
                          .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.AssertionError , (class 
                          java.lang.AssertionError) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.AssertionError , types ( 
                          class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String message, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           message ) ) ) ;, { if ( true :: bool ) cast ( 
                          void , (cast ( class java.lang.AssertionError , (
                          class java.lang.AssertionError) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.Class
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Class , types ( .::KList ) ) |-> 
                  class java.lang.Class
                sig ( $cons$java.lang.Class , types ( class java.lang.String
                   ) ) |-> class java.lang.Class
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.Class
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getName , types ( .::KList ) ) |-> class 
                  java.lang.Class
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Class , types ( .::KList )
                           )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Class , (class java.lang.Class) . this )
                          ) . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Class , types ( class 
                          java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String name, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Class , (class java.lang.Class) . this )
                          ) . $instance_init ( .TypedVals ) ) ; cast ( class
                           java.lang.String , (cast ( class java.lang.Class 
                          , cast ( class java.lang.Class , (class 
                          java.lang.Class) . this ) ) . name) = cast ( class
                           java.lang.String , name ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( getName , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( class java.lang.String , cast (
                           class java.lang.String , cast ( class 
                          java.lang.Class , cast ( class java.lang.Class , (
                          class java.lang.Class) . this ) ) . name ) )) ; }
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .AnnoFieldModList class java.lang.String name ; 
                  .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.ClassCastException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.ClassCastException , types ( 
                  .::KList ) ) |-> class java.lang.ClassCastException
                sig ( $cons$java.lang.ClassCastException , types ( class 
                  java.lang.String ) ) |-> class 
                  java.lang.ClassCastException
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) |-> 
                  class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.ClassCastException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ClassCastException , types
                           ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.ClassCastException , (class 
                          java.lang.ClassCastException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.ClassCastException , types
                           ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class java.lang.ClassCastException , (class
                           java.lang.ClassCastException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.Exception
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Exception , types ( 
                          .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this )) . $instance_init ( .TypedVals ) ) ; } ]
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Exception , types ( class 
                          java.lang.Exception ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Exception cause
                          , .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this )) . $instance_init ( .TypedVals ) ) ; cast
                           ( class java.lang.String , (cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this ) ) . detailMessage) = cast ( class 
                          java.lang.String , cast ( bool , cast ( class 
                          java.lang.Exception , cause ) == null :: nullType 
                          ) ? null :: nullType : cast ( class 
                          java.lang.String , (cast ( class 
                          java.lang.Exception , cause )) . toString ( 
                          .TypedVals ) ) ) ) ; cast ( class 
                          java.lang.Exception , (cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this ) ) . cause) = cast ( class 
                          java.lang.Exception , cause ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Exception , types ( class 
                          java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String message, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this )) . $instance_init ( .TypedVals ) ) ; cast
                           ( class java.lang.String , (cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this ) ) . detailMessage) = cast ( class 
                          java.lang.String , message ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Exception , types ( class 
                          java.lang.String, class java.lang.Exception ) )
                          
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String message, 
                          .AnnoVarModList class java.lang.Exception cause
                          
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this )) . $instance_init ( .TypedVals ) ) ; cast
                           ( class java.lang.String , (cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this ) ) . detailMessage) = cast ( class 
                          java.lang.String , message ) ) ; cast ( class 
                          java.lang.Exception , (cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this ) ) . cause) = cast ( class 
                          java.lang.Exception , cause ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( getMessage , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( class java.lang.String , cast (
                           class java.lang.String , cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this ) ) . detailMessage ) )) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( toString , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { (.AnnoVarModList class java.lang.String s ; 
                          cast ( class java.lang.String , s = cast ( class 
                          java.lang.String , (cast ( class java.lang.Class ,
                           (cast ( class java.lang.Exception , (class 
                          java.lang.Exception) . this )) . getClass ( 
                          .TypedVals ) )) . getName ( .TypedVals ) ) ) ;) (
                          .AnnoVarModList class java.lang.String message ; 
                          cast ( class java.lang.String , message = cast ( 
                          class java.lang.String , (cast ( class 
                          java.lang.Exception , (class java.lang.Exception) 
                          . this )) . getMessage ( .TypedVals ) ) ) ;) 
                          return (cast ( class java.lang.String , cast ( 
                          class java.lang.String , cast ( bool , cast ( 
                          class java.lang.String , message ) != null :: 
                          nullType ) ? cast ( class java.lang.String , cast 
                          ( class java.lang.String , cast ( class 
                          java.lang.String , s ) + ": " :: class 
                          java.lang.String ) + cast ( class java.lang.String
                           , message ) ) : cast ( class java.lang.String , s
                           ) ) )) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .AnnoFieldModList class java.lang.String detailMessage ;
                   .AnnoFieldModList class java.lang.Exception cause ;
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.ExceptionInInitializerError
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.ExceptionInInitializerError , types ( 
                  .::KList ) ) |-> class 
                  java.lang.ExceptionInInitializerError
                sig ( $cons$java.lang.ExceptionInInitializerError , types ( 
                  class java.lang.Object ) ) |-> class 
                  java.lang.ExceptionInInitializerError
                sig ( $cons$java.lang.ExceptionInInitializerError , types ( 
                  class java.lang.String ) ) |-> class 
                  java.lang.ExceptionInInitializerError
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.ExceptionInInitializerError
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.ExceptionInInitializerError , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.ExceptionInInitializerError , (class 
                          java.lang.ExceptionInInitializerError) . this )) .
                           $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.ExceptionInInitializerError , 
                          types ( class java.lang.Object ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object cause, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( (cast ( class 
                          java.lang.String , null :: nullType )), (cast ( 
                          class java.lang.RuntimeException , cast ( class 
                          java.lang.RuntimeException , cast ( class 
                          java.lang.Object , cause ) ) )) ) ;, { if ( true 
                          :: bool ) cast ( void , (cast ( class 
                          java.lang.ExceptionInInitializerError , (class 
                          java.lang.ExceptionInInitializerError) . this )) .
                           $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.ExceptionInInitializerError , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String message, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           message ) ) ) ;, { if ( true :: bool ) cast ( 
                          void , (cast ( class 
                          java.lang.ExceptionInInitializerError , (class 
                          java.lang.ExceptionInInitializerError) . this )) .
                           $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.IllegalMonitorStateException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.IllegalMonitorStateException , types (
                   .::KList ) ) |-> class 
                  java.lang.IllegalMonitorStateException
                sig ( $cons$java.lang.IllegalMonitorStateException , types (
                   class java.lang.String ) ) |-> class 
                  java.lang.IllegalMonitorStateException
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.IllegalMonitorStateException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.IllegalMonitorStateException , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.IllegalMonitorStateException , (class 
                          java.lang.IllegalMonitorStateException) . this )) 
                          . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( 
                          $cons$java.lang.IllegalMonitorStateException , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class 
                          java.lang.IllegalMonitorStateException , (class 
                          java.lang.IllegalMonitorStateException) . this )) 
                          . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.InterruptedException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.InterruptedException , types ( 
                  .::KList ) ) |-> class java.lang.InterruptedException
                sig ( $cons$java.lang.InterruptedException , types ( class 
                  java.lang.String ) ) |-> class 
                  java.lang.InterruptedException
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.InterruptedException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.InterruptedException , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.InterruptedException , (class 
                          java.lang.InterruptedException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.InterruptedException , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class java.lang.InterruptedException , (
                          class java.lang.InterruptedException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.NegativeArraySizeException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.NegativeArraySizeException , types ( 
                  .::KList ) ) |-> class 
                  java.lang.NegativeArraySizeException
                sig ( $cons$java.lang.NegativeArraySizeException , types ( 
                  class java.lang.String ) ) |-> class 
                  java.lang.NegativeArraySizeException
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.NegativeArraySizeException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.NegativeArraySizeException
                           , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.NegativeArraySizeException , (class 
                          java.lang.NegativeArraySizeException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.NegativeArraySizeException
                           , types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class java.lang.NegativeArraySizeException 
                          , (class java.lang.NegativeArraySizeException) . 
                          this )) . $instance_init ( .TypedVals ) ) ; } ]
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.NullPointerException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.RuntimeException
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.NullPointerException , types ( 
                  .::KList ) ) |-> class java.lang.NullPointerException
                sig ( $cons$java.lang.NullPointerException , types ( class 
                  java.lang.String ) ) |-> class 
                  java.lang.NullPointerException
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.NullPointerException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.NullPointerException , 
                          types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.NullPointerException , (class 
                          java.lang.NullPointerException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.NullPointerException , 
                          types ( class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String s, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           s ) ) ) ;, { if ( true :: bool ) cast ( void , (
                          cast ( class java.lang.NullPointerException , (
                          class java.lang.NullPointerException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.Object
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                noClass
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Object , types ( .::KList 
                          ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ { .BlockStmList } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( clone , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        protected
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( equals , types ( class java.lang.Object ) 
                          )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object obj, 
                          .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( bool , cast ( bool , cast ( 
                          class java.lang.Object , (class java.lang.Object) 
                          . this ) == cast ( class java.lang.Object , obj ) 
                          ) )) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( getClass , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( hashCode , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( notify , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( notifyAll , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( toString , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( class java.lang.String , cast (
                           class java.lang.String , cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           (cast ( class java.lang.Class , (cast ( class 
                          java.lang.Object , (class java.lang.Object) . this
                           )) . getClass ( .TypedVals ) )) . getName ( 
                          .TypedVals ) ) + "@" :: class java.lang.String ) +
                           cast ( int , (cast ( class java.lang.Object , (
                          class java.lang.Object) . this )) . hashCode ( 
                          .TypedVals ) ) ) )) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( wait , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.Runnable
            </classType>
            <classMetaType>
                interfaceCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                noClass
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.Runnable
                sig ( run , types ( .::KList ) ) |-> class 
                  java.lang.Runnable
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( run , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.RuntimeException
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Exception
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Exception , types ( .::KList ) ) 
                  |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.Exception ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String ) ) |-> class java.lang.Exception
                sig ( $cons$java.lang.Exception , types ( class 
                  java.lang.String, class java.lang.Exception ) ) |-> class 
                  java.lang.Exception
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.RuntimeException , types ( .::KList ) 
                  ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.RuntimeException ) ) |-> class 
                  java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String ) ) |-> class java.lang.RuntimeException
                sig ( $cons$java.lang.RuntimeException , types ( class 
                  java.lang.String, class java.lang.RuntimeException ) ) |->
                   class java.lang.RuntimeException
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( getMessage , types ( .::KList ) ) |-> class 
                  java.lang.RuntimeException
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Exception
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.RuntimeException , types (
                           .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.RuntimeException , (class 
                          java.lang.RuntimeException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.RuntimeException , types (
                           class java.lang.RuntimeException ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.RuntimeException
                           cause, .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.RuntimeException , cause ) ) ) ;, { if (
                           true :: bool ) cast ( void , (cast ( class 
                          java.lang.RuntimeException , (class 
                          java.lang.RuntimeException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.RuntimeException , types (
                           class java.lang.String ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String message, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           message ) ) ) ;, { if ( true :: bool ) cast ( 
                          void , (cast ( class java.lang.RuntimeException , 
                          (class java.lang.RuntimeException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.RuntimeException , types (
                           class java.lang.String, class 
                          java.lang.RuntimeException ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.String message, 
                          .AnnoVarModList class java.lang.RuntimeException 
                          cause
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( (cast ( class 
                          java.lang.String , cast ( class java.lang.String ,
                           message ) )), (cast ( class java.lang.Exception ,
                           cast ( class java.lang.RuntimeException , cause )
                           )) ) ;, { if ( true :: bool ) cast ( void , (cast
                           ( class java.lang.RuntimeException , (class 
                          java.lang.RuntimeException) . this )) . 
                          $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( getMessage , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { return (cast ( class java.lang.String , cast (
                           class java.lang.String , cast ( class 
                          java.lang.Exception , cast ( class 
                          java.lang.RuntimeException , (class 
                          java.lang.RuntimeException) . this ) ) . 
                          detailMessage ) )) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.String
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.String , types ( .::KList ) ) |-> 
                  class java.lang.String
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.String
                sig ( charAt , types ( int ) ) |-> class java.lang.String
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( compareTo , types ( class java.lang.Object ) ) |-> 
                  class java.lang.String
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.String
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( length , types ( .::KList ) ) |-> class 
                  java.lang.String
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.String
                sig ( valueOf , types ( int ) ) |-> class java.lang.String
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.String , types ( .::KList 
                          ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.String , (class java.lang.String) . this
                           )) . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( charAt , types ( int ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList int index, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( compareTo , types ( class java.lang.Object
                           ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object another, 
                          .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( equals , types ( class java.lang.Object ) 
                          )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object anObject
                          , .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( length , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( toString , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( valueOf , types ( int ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList int i, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        staticCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.System
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.System , types ( .::KList ) ) |-> 
                  class java.lang.System
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.System
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.System , types ( .::KList 
                          ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.System , (class java.lang.System) . this
                           )) . $instance_init ( .TypedVals ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                static class java.lang.Object in ; static class 
                  java.io.PrintWriter out ;
            </staticFields>
            <staticInit>
                { cast ( class java.lang.Object , ((class 
                  java.lang.System) . in) = cast ( class java.lang.Object , 
                  null :: nullType ) ) ; } { cast ( class 
                  java.io.PrintWriter , ((class java.lang.System) . out) = 
                  cast ( class java.io.PrintWriter , new  (class 
                  java.io.PrintWriter) ( .TypedVals )  ) ) ; }
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.lang.Thread
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                SetItem ( class java.lang.Runnable )
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.lang.Thread , types ( .::KList ) ) |-> 
                  class java.lang.Thread
                sig ( $cons$java.lang.Thread , types ( class 
                  java.lang.Runnable ) ) |-> class java.lang.Thread
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.lang.Thread
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( interrupt , types ( .::KList ) ) |-> class 
                  java.lang.Thread
                sig ( interruptImpl , types ( int ) ) |-> class 
                  java.lang.Thread
                sig ( join , types ( .::KList ) ) |-> class java.lang.Thread
                sig ( joinImpl , types ( int ) ) |-> class java.lang.Thread
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( run , types ( .::KList ) ) |-> class java.lang.Thread
                sig ( start , types ( .::KList ) ) |-> class 
                  java.lang.Thread
                sig ( startImpl , types ( int ) ) |-> class java.lang.Thread
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Thread , types ( .::KList 
                          ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Thread , (class java.lang.Thread) . this
                           )) . $instance_init ( .TypedVals ) ) ; cast ( 
                          class java.lang.Runnable , (cast ( class 
                          java.lang.Thread , cast ( class java.lang.Thread ,
                           (class java.lang.Thread) . this ) ) . runnable) =
                           cast ( class java.lang.Runnable , cast ( class 
                          java.lang.Thread , (class java.lang.Thread) . this
                           ) ) ) ; } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.lang.Thread , types ( class 
                          java.lang.Runnable ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Runnable 
                          runnable, .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.lang.Thread , (class java.lang.Thread) . this
                           )) . $instance_init ( .TypedVals ) ) ; cast ( 
                          class java.lang.Runnable , (cast ( class 
                          java.lang.Thread , cast ( class java.lang.Thread ,
                           (class java.lang.Thread) . this ) ) . runnable) =
                           cast ( class java.lang.Runnable , runnable ) ) ; 
                          } ]
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { { cast ( int , (cast ( class java.lang.Thread 
                          , cast ( class java.lang.Thread , (class 
                          java.lang.Thread) . this ) ) . tid) = cast ( int ,
                           ((class java.lang.Thread) . nextTid) ++ ) ) ; } }
                          
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( interrupt , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class java.lang.Thread ,
                           (class java.lang.Thread) . this )) . 
                          interruptImpl ( cast ( int , cast ( int , cast ( 
                          class java.lang.Thread , cast ( class 
                          java.lang.Thread , (class java.lang.Thread) . this
                           ) ) . tid ) ) ) ) ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( interruptImpl , types ( int ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList int tid, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( join , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        synchronized ( cast ( class java.lang.Thread , (
                          class java.lang.Thread) . this ) ) { cast ( void ,
                           (cast ( class java.lang.Thread , (class 
                          java.lang.Thread) . this )) . joinImpl ( cast ( 
                          int , cast ( int , cast ( class java.lang.Thread ,
                           cast ( class java.lang.Thread , (class 
                          java.lang.Thread) . this ) ) . tid ) ) ) ) ; }
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( joinImpl , types ( int ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList int tid, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( run , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( start , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { cast ( void , (cast ( class java.lang.Thread ,
                           (class java.lang.Thread) . this )) . startImpl ( 
                          cast ( int , cast ( int , cast ( class 
                          java.lang.Thread , cast ( class java.lang.Thread ,
                           (class java.lang.Thread) . this ) ) . tid ) ) ) )
                           ; }
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( startImpl , types ( int ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList int tid, .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .AnnoFieldModList class java.lang.Runnable runnable ; 
                  .AnnoFieldModList int tid ;
            </instanceFields>
            <staticFields>
                static int nextTid ; .ClassBodyDecList
            </staticFields>
            <staticInit>
                { cast ( int , ((class java.lang.Thread) . nextTid) = 1 
                  :: int ) ; } .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
        <class>
            <classType>
                class java.util.Scanner
            </classType>
            <classMetaType>
                classCMT
            </classMetaType>
            <classPhase>
                UnfoldedCPhase
            </classPhase>
            <enclosingClass>
                noClass
            </enclosingClass>
            <extends>
                class java.lang.Object
            </extends>
            <implTrans>
                .Set
            </implTrans>
            <methods>
                sig ( $cons$java.lang.Object , types ( .::KList ) ) |-> 
                  class java.lang.Object
                sig ( $cons$java.util.Scanner , types ( .::KList ) ) |-> 
                  class java.util.Scanner
                sig ( $cons$java.util.Scanner , types ( class 
                  java.lang.Object ) ) |-> class java.util.Scanner
                sig ( $instance_init , types ( .::KList ) ) |-> class 
                  java.util.Scanner
                sig ( clone , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( equals , types ( class java.lang.Object ) ) |-> class 
                  java.lang.Object
                sig ( getClass , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( hashCode , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( nextInt , types ( .::KList ) ) |-> class 
                  java.util.Scanner
                sig ( nextLine , types ( .::KList ) ) |-> class 
                  java.util.Scanner
                sig ( notify , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( notifyAll , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( toString , types ( .::KList ) ) |-> class 
                  java.lang.Object
                sig ( wait , types ( .::KList ) ) |-> class java.lang.Object
                  
            </methods>
            <methodDecs>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.util.Scanner , types ( .::KList
                           ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.util.Scanner , (class java.util.Scanner) . 
                          this )) . $instance_init ( .TypedVals ) ) ; } ]
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $cons$java.util.Scanner , types ( class 
                          java.lang.Object ) )
                    </methodSignature>
                    <methodParams>
                        .AnnoVarModList class java.lang.Object o, 
                          .Params
                    </methodParams>
                    <methodBody>
                        [ noValue .  super ( .TypedVals ) ;, { if ( true
                           :: bool ) cast ( void , (cast ( class 
                          java.util.Scanner , (class java.util.Scanner) . 
                          this )) . $instance_init ( .TypedVals ) ) ; } ]
                          
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( $instance_init , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        { .BlockStmList }
                    </methodBody>
                    <methodAccessMode>
                        private
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( nextInt , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
                <methodDec>
                    <methodSignature>
                        sig ( nextLine , types ( .::KList ) )
                    </methodSignature>
                    <methodParams>
                        .Params
                    </methodParams>
                    <methodBody>
                        ;
                    </methodBody>
                    <methodAccessMode>
                        public
                    </methodAccessMode>
                    <methodContextType>
                        instanceCT
                    </methodContextType>
                </methodDec>
            </methodDecs>
            <instanceFields>
                .ClassBodyDecList
            </instanceFields>
            <staticFields>
                .ClassBodyDecList
            </staticFields>
            <staticInit>
                .BlockStmList
            </staticInit>
            <staticInitStatus>
                StaticUninitialized
            </staticInitStatus>
            <staticEnv>
                .Map
            </staticEnv>
        </class>
    </classes>
    <program>
        [ .::KList ]
    </program>
    <mainClass>
        ListItem ( "sumInWhile" )
    </mainClass>
    <globalPhase>
        ExecutionPhase
    </globalPhase>
    <store>
        .Map
    </store>
    <storeMetadata>
        .Map
    </storeMetadata>
    <nextLoc>
        1
    </nextLoc>
    <classLiteralsMap>
        .Map
    </classLiteralsMap>
    <objectStore>
        .Bag
    </objectStore>
    <arrayStore>
        <array>
            <arrayId>
                0
            </arrayId>
            <arrayType>
                arrayOf class java.lang.String
            </arrayType>
            <arraystore>
                .Map
            </arraystore>
        </array>
    </arrayStore>
    <in>
        ListItem ( #buffer ( "" ) )
        ListItem ( #istream ( 0 ) )
    </in>
    <out>
        ListItem ( #ostream ( 1 ) )
        ListItem ( #buffer ( "" ) )
    </out>
    <busy>
        .Set
    </busy>
    <waitingThreads>
        .Map
    </waitingThreads>
    <terminated>
        .Set
    </terminated>
    <groupDebug>
        <dissolveEmptyK>
            false
        </dissolveEmptyK>
        <dissolveAllExceptOut>
            true
        </dissolveAllExceptOut>
        <debug>
            .List
        </debug>
    </groupDebug>
</T>

Process finished with exit code 0

