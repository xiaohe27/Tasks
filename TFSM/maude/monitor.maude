in tfsm.maude

***(
   A specific monitor equivalent to the one below:
   tfsm :
     start [
        next ->[50,100] unsafe
        hasnext ->[0,100] safe
	timeout -> unsafe
     ]
     safe [
        next ->[100,200] start
        hasnext ->[10,20] safe 
	timeout -> safe
     ]
     unsafe [
        next ->[2,5] unsafe
        hasnext ->[20,30] safe
	timeout -> unsafe
     ]

***start : 0, safe : 1, unsafe : 2
)

mod Monitor is
protecting TFSM .


ops start safe unsafe : -> State .
op inf : -> Nat .

var S : State .
var E : Event .
vars T LB UB OldT EventT : Nat .
var TS : TState .
var TE : TEvent .
var TI : TInterval .
var TR : Trace .

*** 
crl [specialTime] : D2(S, OldT, E, EventT, TI) => D2(S, OldT, timeout, EventT, TI) 
						if not(inBet(EventT, addBase(OldT, TI))) . 


***consider to rewrite to err if no transition is applicable.

*** The time constraint helper functions 
eq I(start, 'next) = (50, 100) .
eq I(start, 'hasnext) = (0, 100) .

eq I(safe, 'next) = (100, 200) .
eq I(safe, 'hasnext) = (10, 20) .

eq I(unsafe, 'next) = (2, 5) .
eq I(unsafe, 'hasnext) = (20, 30) .


**********************************
eq transit(start, 'next) = unsafe .
eq transit(start, 'hasnext) = safe .
eq transit(start, timeout) = unsafe .

eq transit(safe, 'next) = start .
eq transit(safe, 'hasnext) = safe .
eq transit(safe, timeout) = safe .

eq transit(unsafe, 'next) = unsafe .
eq transit(unsafe, 'hasnext) = safe .
eq transit(unsafe, timeout) = unsafe .
**********************************


endm


**********************************
*** Test some functions.

red transit(start, 'next) .

red I(start, 'hasnext) .

