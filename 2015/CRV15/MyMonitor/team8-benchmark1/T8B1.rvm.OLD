package rvm;

import java.util.Set;
import java.util.HashMap;
import java.util.concurrent.ConcurrentSkipListSet;

T8B1 (String task, Sring resource) {

public static HashMap<String, Set<String>> grantMap = new HashMap<>();

event grant(String task, String resource) {

 for (Set rSet : grantMap.values()) {
  if(rSet.contains(resource)) {
  System.err.println("Property Violated!\nCannot grant the resource " + resource + " multiple times without releasing!");
  __EXIT;
  } else {
  Set<String> mySet = grantMap.get(task);
  if (mySet == null) {
  mySet = new ConcurrentSkipListSet<String>();
  grantMap.put(task, mySet);
  }
	
  mySet.add(resource);
  }
 }
}

event release(String task, String resource) {
Set<String> rSet = grantMap.get(task);
if(rSet == null ||
!rSet.contains(resource)) {
  System.err.println("Property Violated!\nTask "
  + task + " cannot release the resource " + resource +
  " because it has not been granted that resource before!");
  __EXIT;
} else {
  rSet.remove(resource);
}

}

ltl:
grant => <> release

@fail
{
System.err.println("Property Violation!\nNever release after grant.");
__EXIT;
}

}
