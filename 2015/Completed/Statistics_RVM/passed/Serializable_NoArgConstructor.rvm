package mop;

import java.io.*;
import java.lang.reflect.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;
Serializable_NoArgConstructor() {

 private String getPackageName(Class cl) {
    String s = cl.getName();
            int i = s.lastIndexOf('[');
            if (i >= 0) s = s.substring(i + 2);
    i = s.lastIndexOf('.');
            return (i >= 0) ? s.substring(0, i) : "";
    }
    event staticinit(org.aspectj.lang.Signature staticsig){
            org.aspectj.lang.Signature initsig = staticsig;
            Class klass = initsig.getDeclaringType();
            if (klass != null) {
                    Class nonserialzable = klass;
                    while (Serializable.class.isAssignableFrom(nonserialzable)) {
                            nonserialzable = nonserialzable.getSuperclass();
                            if (nonserialzable == null) break;
                    }
                    if (nonserialzable != null) {
                            boolean samepackage = klass.getClassLoader() == nonserialzable.getClassLoader() && getPackageName(klass).equals(getPackageName(nonserialzable));
                            boolean inaccessible = true;
                            try {
                                    Constructor ctor = nonserialzable.getDeclaredConstructor((Class[]) null);
                                    int mod = ctor.getModifiers();
                                    inaccessible = (mod & Modifier.PRIVATE) != 0 || ((mod & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0 && !samepackage);
                            } catch (NoSuchMethodException e) {
                            }
                            if (inaccessible) {
                                    RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
                                    RVMLogging.out.println(Level.CRITICAL, "The superclass of " + klass.getName() + " does not have an accessible no-arg constructor.");
                            }
                    }
            }
    }

}
