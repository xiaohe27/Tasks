package rvm;

Delete12_Raw(String data) {

    private static enum State {
    //C1 is the first condition on the r.h.s of the implication
    //C2_1, C2_2 refer the two sub-formulas inside the second condition
        Start, Check, Unsafe,
        C1Fail, C2_1Pass, C2_2Pass,
        C2Fail, C1Fail_AND_C2_1Pass, C1Fail_AND_C2_2Pass
    }

    private State curState = State.Start;

    /**
     * Base on the values of the events' arguments, the monitor's state may be updated to different
     * new states. To represent this process using fsm, we can first analyze the event arguments,
     * then we can summarize a list of more accurate events, with which we can build the full
     * transition functions.
     *
     * Different accurate events are described here:
     * 0: the event that makes monitor enter Check state.
     * 1: the event that makes C1 hold.
     * 2: the event that makes C1 NOT hold.
     * 3: the event that makes C2_1 hold.
     * 4: the event that makes C2_1 NOT hold.
     * 5: the event that makes C2_2 hold.
     * 6: the event that makes C2_2 NOT hold.
      */
    private boolean[] accurateEvents = new boolean[7];
    /**
     * This data structure represents a record that describes which user deletes what data at what time.
     **/
    public static class DeleteRecord {
        public final long ts;
        public final String user;
        public final String deleteData;

        public DeleteRecord(long ts, String user, String deleteData) {
            this.ts = ts;
            this.user = user;
            this.deleteData = deleteData;
        }

        public boolean equals(DeleteRecord other) {
            if (other == null)
                return false;
            if (this.ts != other.ts)
                return false;

            return (this.user.equals(other.user) &&
                    this.deleteData.equals(other.deleteData));
        }

        public String print() {
            return "@" + ts + " delete (" + user + ", db1, " + deleteData + ")\n";
        }
    }

    //the suspiciousRecords is the list of suspicious records.
    private static Set<DeleteRecord> suspiciousRecords = new HashSet<>();
    private static HashMap<Long, Set<String>> cond2HasHopeDataList = new HashMap<>();
    private static Set<String> db1InsertedData = new HashSet<>();
    //db2InsertedData is eq to cond2 is not satisfiable
    private static Set<String> db2InsertedData = new HashSet<>();

    private void removeValidatedRecords(String data) {
        List<DeleteRecord> removedRecords = new ArrayList<>();
        for (DeleteRecord deleteRecord : suspiciousRecords) {
            if (deleteRecord.deleteData.equals(data)) {
                removedRecords.add(deleteRecord);
            }
        }
        suspiciousRecords.removeAll(removedRecords);
    }

    public static void printAllViolations() {
        for (DeleteRecord suspiciousRecord : suspiciousRecords) {
            if (db2InsertedData.contains(suspiciousRecord.deleteData)) {
                System.out.println("Violation: " + suspiciousRecord.print());
            } else {
                Set<String> hopefulDataList = cond2HasHopeDataList.get(suspiciousRecord.ts);
                if (hopefulDataList == null)
                    System.out.println("Violation: " + suspiciousRecord.print());

                else if (hopefulDataList.contains(suspiciousRecord.deleteData)) {
                    System.out.println("Satisfy the second condition of the disjunctive formula");
                } else {
                    System.out.println("Violation: " + suspiciousRecord.print());
                }
            }
        }
    }

event delete (String user,String db,String p,String data) {
    if (data.equals("unknown")) //Unknown data does not affect the state of monitor at all
        return true;

    if (db.equals("db1")) {
        accurateEvents[0] = true;
        return true;
    }

//    if (db.equals("db1")) {
//        this.suspiciousRecords.add(new DeleteRecord(LogEntryExtractor.TimeStamp, user, data));
//
//        if (db2InsertedData.contains(data))
//            return true;
//
//        else {
//            if (db1InsertedData.contains(data)) {
//                Set<String> dataList = this.cond2HasHopeDataList.get(LogEntryExtractor.TimeStamp);
//                if (dataList == null) {
//                    dataList = new HashSet<>();
//                    this.cond2HasHopeDataList.put(LogEntryExtractor.TimeStamp, dataList);
//                }
//
//                dataList.add(data);
//            }
//        }
//
//    } else if (db.equals("db2")) {
//        this.removeValidatedRecords(data);
//    }
}


event insert (String user,String db,String p,String data) {}


raw:


    if (insert) {
	    if (data.equals("unknown"))
                return false;

            if (db.equals("db1")) {
                this.db1InsertedData.add(data);
            }   else if (db.equals("db2")) {
                this.db2InsertedData.add(data);
            }
    }

}


